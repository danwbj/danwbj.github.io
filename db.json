{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/wechatpay.png","path":"images/wechatpay.png","modified":1,"renderable":0},{"_id":"source/images/alipay.png","path":"images/alipay.png","modified":1,"renderable":0},{"_id":"source/images/nomad_ui1.png","path":"images/nomad_ui1.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c37902f2da71d89e1dfa9462c82624c15b066e25","modified":1523085358000},{"_id":"source/CNAME","hash":"2d763bf6ec707f651a67d7b443eed17acdc9dff3","modified":1523083497000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1517834513000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1517834513000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1517834513000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1517834513000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1517834513000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1517834513000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1517834513000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1517834513000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1517834513000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1517834513000},{"_id":"themes/next/README.cn.md","hash":"5d8af3d8de8d3926126a738519e97c8442b0effe","modified":1517834513000},{"_id":"themes/next/README.md","hash":"44b28d995681a7c48bfe3d0577d6203812d07e59","modified":1517834513000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1517834513000},{"_id":"themes/next/_config.yml","hash":"529118e9ea5977e97f5f018ebcae8dd8a5f0c36e","modified":1517895587000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1517834513000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1517834513000},{"_id":"source/_data/next.yml","hash":"049d7146dd065e2613dd83b539b49a985debaa05","modified":1529235865000},{"_id":"source/_posts/1529235554495.md","hash":"308d8d5cb4b4e86e55b089cbfbfddcf50d9a6ce9","modified":1529235565000},{"_id":"source/_posts/.DS_Store","hash":"55d1d04397fb067b8b4abb311a082bb63c521987","modified":1523085358000},{"_id":"source/_posts/CentOS7部署Nginx.md","hash":"6ef259e471109cb7bce32b5235f8dfb092d06f39","modified":1523700768000},{"_id":"source/_posts/call()、apply()、bind()区别.md","hash":"0bf4b1ef8609a94322f79fbd4e27d7f54d1c8043","modified":1523083497000},{"_id":"source/_posts/docker常用命令整理.md","hash":"7dfade065e812523c3fdcc5d6a02bfd516c3fbba","modified":1523849908000},{"_id":"source/_posts/Linux环境下安装node.md","hash":"f38f3a2c602d7cedcc30b5a66e7ef8c783c9214d","modified":1523677207000},{"_id":"source/_posts/es6基础.md","hash":"bc1bc9229590718d4006ffc7030af30fb1782a98","modified":1523083497000},{"_id":"source/_posts/javascript的GC理解.md","hash":"4ce7b203ea29786d9ae024ddcb775d0840b6dff3","modified":1523083497000},{"_id":"source/_posts/javascript的变量函数提升总结.md","hash":"4c4695c9b1235b8341f8a1980fa86698f13bd92b","modified":1523083497000},{"_id":"source/_posts/js对象引用赋值引发数据可变的解决方案.md","hash":"721d5994af5a2765c890065e6b2370ae37549711","modified":1523083497000},{"_id":"source/_posts/js实现插入排序算法.md","hash":"4e31a4c535c5c6a2678a391196ff253c5415e7b9","modified":1523083497000},{"_id":"source/_posts/linux命令学习笔记.md","hash":"aed8225300f9c2f51b83afedf9a3cb7d7e911a61","modified":1523341349000},{"_id":"source/_posts/mac下使用tree命令.md","hash":"878d067836e048a7f2212ab3a1013880fbcf936b","modified":1523083497000},{"_id":"source/_posts/linux系统分类.md","hash":"abdcb74cec9fbbd2acd8e5fcc2aa33e2d75806b6","modified":1523083497000},{"_id":"source/_posts/js实现冒泡排序算法.md","hash":"3595a51cd05832f37c0bdc0bcc71950d397a953b","modified":1523083497000},{"_id":"source/_posts/promise深入理解.md","hash":"2588df5452a40cc7b942ba228fc1db5a85b8cf43","modified":1523083497000},{"_id":"source/about/index.md","hash":"15c9fafcbd8a38ad404a7f5bbacce2e40cf313bb","modified":1523083497000},{"_id":"source/_posts/输出1-100之间的素数.md","hash":"53b8c4eeb2898fd185020f6cd6d89a1944d3a0cd","modified":1523083497000},{"_id":"source/_posts/深入理解node的Event Loop.md","hash":"7d35e398f05141586511703ac6fac1015e82dd69","modified":1525606267000},{"_id":"source/categories/index.md","hash":"4dd6812379e8c924a3832725fa4d8c08faaef32b","modified":1523083497000},{"_id":"source/_posts/搭建node的GraphQL服务端.md","hash":"2d8f7cdd5f0d66433fa4092ea94ecb9f77971288","modified":1523676836000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517897257000},{"_id":"source/images/avatar.jpg","hash":"16cce08fca9435292fceaa42e1ada24ab5934cff","modified":1523083497000},{"_id":"source/tags/index.md","hash":"c062528cfcac091b9b95576967fb5993fc9eb998","modified":1523083497000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1517834513000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1517834513000},{"_id":"themes/next/.git/ORIG_HEAD","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1519891819000},{"_id":"themes/next/.git/index","hash":"e831e92022e27988e5a6dc5cd56c0e97358589c6","modified":1517882351000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1517834269000},{"_id":"themes/next/.git/packed-refs","hash":"339779e225d913a344c5e6210617badd049c4434","modified":1517834513000},{"_id":"themes/next/.git/FETCH_HEAD","hash":"d67b7cbcc31216dec8e0329efb4eed8c0eec4cdb","modified":1519891819000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1517834513000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1517834513000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1517834513000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1517834513000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1517834513000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1517834513000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1517834513000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1517834513000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1517834513000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1517834513000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1517834513000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1517834513000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1517834513000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1517834513000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1517834513000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1517834513000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1517834513000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1517834513000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1517834513000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1517834513000},{"_id":"themes/next/layout/_layout.swig","hash":"cf0710d4a77b348293ef9806d4e893e61566caf7","modified":1523085686000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1517834513000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1517834513000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1517834513000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1517834513000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1517834513000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1517834513000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1517834513000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1517834513000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1517834513000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1517834513000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1517834513000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1517834513000},{"_id":"source/images/wechatpay.png","hash":"bf675265b129fbbf8ab50771fc550eecd8c28226","modified":1523083497000},{"_id":"source/images/alipay.png","hash":"cd2a08d895a2ac18670235e96cc90e846efb8b01","modified":1523083497000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1517834269000},{"_id":"source/images/nomad_ui1.png","hash":"104e8106f7c360cc234c97438f24fd97a65a05b6","modified":1528898150000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1517834269000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1517834269000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1517834269000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1517834269000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1517834269000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1517834269000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1517834269000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1517834269000},{"_id":"themes/next/.git/logs/HEAD","hash":"22ce2b7d62ed5c0d2c9048b4ec1cc2022a8f0bfe","modified":1517834513000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1517834269000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1517834513000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1517834513000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1517834513000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1517834513000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1517834513000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1517834513000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1517834513000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1517834513000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1517834513000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1517834513000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1517834513000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1517834513000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1517834513000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1517834513000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1517834513000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1517834513000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1517834513000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1517834513000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1517834513000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1517834513000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1517834513000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1517834513000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1517834513000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1517834513000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1517834513000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1517834513000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1517834513000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1517834513000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1517834513000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1517834513000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1517834513000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1517834513000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1517834513000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1517834513000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1517834513000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1517834513000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1517834513000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1517834513000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1517834513000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1517834513000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1517834513000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1517834513000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1517834513000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1517834513000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1517834513000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1517834513000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517834513000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1517834513000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1517834513000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517834513000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1517834513000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1517834513000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1517834513000},{"_id":"themes/next/source/js/.DS_Store","hash":"a966b48ceac13ddc677220a35e01da70510e22cc","modified":1523085778000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/.git/refs/heads/master","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1517834513000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1517834513000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1517834513000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1517834513000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1517834513000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1517834513000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1517834513000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1517834513000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1517834513000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1517834513000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1517834513000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1517834513000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1517834513000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1517834513000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1517834513000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1517834513000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1517834513000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1517834513000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1517834513000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1517834513000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1517834513000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1517834513000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1517834513000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1517834513000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1517834513000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1517834513000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1517834513000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1517834513000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1517834513000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1517834513000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1517834513000},{"_id":"themes/next/source/js/src/love.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1517842151000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1517834513000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1517834513000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1517834513000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1517834513000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1517834513000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1517834513000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1517834513000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1517834513000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1517834513000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1517834513000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1517834513000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1517834513000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1517834513000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1517834513000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1517834513000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1517834513000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1517834513000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1517834513000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1517834513000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1517834513000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1517834513000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1517834513000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1517834513000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1517834513000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1517834513000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1517834513000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1517834513000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1517834513000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1517834513000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1517834513000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1517834513000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"22ce2b7d62ed5c0d2c9048b4ec1cc2022a8f0bfe","modified":1517834513000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1517834513000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1517834513000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1517834513000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1517834513000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1517834513000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1517834513000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1517834513000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1517834513000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1517834513000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1517834513000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1517834513000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1517834513000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1517834513000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1517834513000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1517834513000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1517834513000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"22ce2b7d62ed5c0d2c9048b4ec1cc2022a8f0bfe","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1517834513000},{"_id":"themes/next/.git/objects/pack/pack-421922bcd2e1de0531ed466f8cf62ea1cc93866e.idx","hash":"f98580a787b0832e2edac748c643af96810e672b","modified":1517834513000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1517834513000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1517834513000},{"_id":"themes/next/.git/objects/pack/pack-421922bcd2e1de0531ed466f8cf62ea1cc93866e.pack","hash":"d8a37b6f3ce99643f288332bf82cc6dc204d6839","modified":1517834513000},{"_id":"public/search.xml","hash":"a036a3593b6310c1985bb7ca7e3a16d0d7a721c8","modified":1529235948725},{"_id":"public/about/index.html","hash":"73152b44a5661a69665a2b33a410d08065063dc8","modified":1529235948750},{"_id":"public/categories/index.html","hash":"0d68154c3525296574afde97b0ef7b8ef774309e","modified":1529235948751},{"_id":"public/tags/index.html","hash":"b7e386f5fd017332c4433234db7bbf3293566c69","modified":1529235948751},{"_id":"public/2018/06/13/1529235554495/index.html","hash":"06da4c07b6a5daf3f10257d248438fe967f6fa02","modified":1529235948751},{"_id":"public/2018/05/06/深入理解node的Event Loop/index.html","hash":"2c9876fcf299695349527ee7a23c633e98b2d624","modified":1529235948751},{"_id":"public/2018/04/15/CentOS7部署Nginx/index.html","hash":"a4d687bde42af74406ebb3dfea8458caef971709","modified":1529235948751},{"_id":"public/2018/04/15/搭建node的GraphQL服务端/index.html","hash":"8d8d312a7c9ae0d1f68173c51f6f42ba383ee4f0","modified":1529235948751},{"_id":"public/2018/04/14/Linux环境下安装node/index.html","hash":"fe533f09d9d1f80ab834f74b4949c5f4f1601907","modified":1529235948751},{"_id":"public/2018/04/10/linux命令学习笔记/index.html","hash":"9bb82038c1872aa6ef3a25a06c9d512ba3fad79d","modified":1529235948751},{"_id":"public/2018/03/22/js实现插入排序算法/index.html","hash":"d9619392e4d4ec79b6e95bdfa6bf7c134cfd6305","modified":1529235948751},{"_id":"public/2018/03/22/js实现冒泡排序算法/index.html","hash":"623baa6035ac3798a1c0b72c97ebb8eb5c18d5fa","modified":1529235948751},{"_id":"public/2018/03/16/docker常用命令整理/index.html","hash":"4f96aeb03ca028279b37fb19fd2957fc66f18687","modified":1529235948751},{"_id":"public/2018/03/01/js对象引用赋值引发数据可变的解决方案/index.html","hash":"523c7faa45fa3513ab26378a8309bea9a3b3c140","modified":1529235948751},{"_id":"public/2018/03/01/javascript的变量函数提升总结/index.html","hash":"cb3a64a48cc5023e21a742362bef6dc9d189468d","modified":1529235948751},{"_id":"public/2018/02/28/输出1-100之间的素数/index.html","hash":"273f2f8b8440e6d9b213ecfb7b14f967b9be32cc","modified":1529235948751},{"_id":"public/2018/02/27/linux系统分类/index.html","hash":"a37f9855d45394f24b4e42d7529a05ce2b89deb3","modified":1529235948751},{"_id":"public/2018/02/26/es6基础/index.html","hash":"fe303d6660e6c1eb7d36137e5dc262b5db965262","modified":1529235948751},{"_id":"public/2018/02/24/javascript的GC理解/index.html","hash":"378a6c580986c47a74e2447a83f1327bf91f4ced","modified":1529235948752},{"_id":"public/2018/02/24/call()、apply()、bind()区别/index.html","hash":"f751cd2effa6fe492af0dd9028ac9b0202c3f846","modified":1529235948752},{"_id":"public/2018/02/12/promise深入理解/index.html","hash":"8f9605c10b01d81f4f8a0457b04f7805733a4f24","modified":1529235948752},{"_id":"public/2018/02/10/mac下使用tree命令/index.html","hash":"d70236abd36ab2ad36f8a1e63b8d7fa9574f670d","modified":1529235948752},{"_id":"public/archives/index.html","hash":"7853a1ddb86a3467466816d3327dff20574fa89c","modified":1529235948752},{"_id":"public/archives/page/2/index.html","hash":"50ae1f7379d17c4cab2525cc62ad8aa3ff92134c","modified":1529235948752},{"_id":"public/archives/2018/index.html","hash":"c13afe571b908397aa6d686c1c695403a9496eb7","modified":1529235948752},{"_id":"public/archives/2018/page/2/index.html","hash":"0d42968c81b7c1e980d88f09ae94430d555cd7da","modified":1529235948752},{"_id":"public/archives/2018/02/index.html","hash":"2c616d29f1932aa7cf73aa8df40bc5fb2f2894f9","modified":1529235948752},{"_id":"public/archives/2018/03/index.html","hash":"eefa5e792fb8477e3145001ebc310079b8b73300","modified":1529235948752},{"_id":"public/archives/2018/04/index.html","hash":"3df82f0de40d20efac7281ec9ffd2f05f65c4b0b","modified":1529235948753},{"_id":"public/archives/2018/05/index.html","hash":"ce548dace85010787033572d0f65425ccabec5a0","modified":1529235948753},{"_id":"public/archives/2018/06/index.html","hash":"51453d6f693076156796647b31735bee5fe99c47","modified":1529235948753},{"_id":"public/categories/其他/index.html","hash":"2f661cb024d66a0b4705f5874a21091dae7b1f60","modified":1529235948753},{"_id":"public/categories/javascript/index.html","hash":"cfb5db36ff8aafff08488755758801ab87e178e7","modified":1529235948753},{"_id":"public/categories/node/index.html","hash":"a4d998bbb62e290134feba051256b6220901b975","modified":1529235948753},{"_id":"public/categories/算法/index.html","hash":"8a9a6bf94a7338d6637b24c0deaabdaab3964232","modified":1529235948753},{"_id":"public/categories/linux/index.html","hash":"3dab7eee8657860c4ff7cb41e2c5a3821a289af9","modified":1529235948753},{"_id":"public/categories/mac/index.html","hash":"597e38134055f43a0a3902733ed5ed3b7ac70436","modified":1529235948753},{"_id":"public/categories/docker/index.html","hash":"6b5b09982d410731734387027c8b878b017aab57","modified":1529235948753},{"_id":"public/index.html","hash":"1f345810e0dce68955ef40772bb2d8834bb764bf","modified":1529235948753},{"_id":"public/page/2/index.html","hash":"4f6a14bb3d68926d109d54e083a258e28f3a8210","modified":1529235948753},{"_id":"public/tags/nomad/index.html","hash":"135947698393c006ea01d611650afb4c641a35a0","modified":1529235948753},{"_id":"public/tags/分布式，微服务/index.html","hash":"86b31d92eb0dc9f971691c7c0753d0f4866eebbd","modified":1529235948753},{"_id":"public/tags/nginx/index.html","hash":"bdb499322b70e1fd577f840039970bc7dbe5d1ff","modified":1529235948753},{"_id":"public/tags/linux/index.html","hash":"cd13e4e3187814f120a919ed17ffaaf3a7156b42","modified":1529235948754},{"_id":"public/tags/CentOS7/index.html","hash":"d0e48fa468812c0a9709f86a82a4ff24f9ce25d3","modified":1529235948754},{"_id":"public/tags/call/index.html","hash":"2a521fa57ed3e504c1674429258b621067c40b46","modified":1529235948754},{"_id":"public/tags/apply/index.html","hash":"9932d18518a002408ca4f12b2c8b463ed2f54899","modified":1529235948754},{"_id":"public/tags/bind/index.html","hash":"455b90fd04a3da6db2e40becd59085d65c8fca67","modified":1529235948754},{"_id":"public/tags/node/index.html","hash":"533c6a030639ea96ec37efd2fa44a4ac1fba029d","modified":1529235948754},{"_id":"public/tags/es6/index.html","hash":"e80c604dac257f71e7d2ea690517daee22f1ce1e","modified":1529235948754},{"_id":"public/tags/垃圾回收/index.html","hash":"90732fe0a2dbfc35a940f243b7cd3f9803348044","modified":1529235948754},{"_id":"public/tags/变量函数提升/index.html","hash":"b4fd3f66eb598937a058204d3ae1830ee79a924a","modified":1529235948754},{"_id":"public/tags/引用赋值/index.html","hash":"0bd15b3ef1f24aa7b8422d8ce2b5e70257fa305d","modified":1529235948754},{"_id":"public/tags/插入排序/index.html","hash":"03a9d76e3e5e54d7281028bf8b7a57b0822c32c9","modified":1529235948754},{"_id":"public/tags/常用命令/index.html","hash":"1b9917bbc058e6a17ed19f0c4c847a188ca731a8","modified":1529235948754},{"_id":"public/tags/操作系统/index.html","hash":"f02d7ba41bf8a6b7e75ffa4cbd84f1dca2589f8d","modified":1529235948754},{"_id":"public/tags/mac/index.html","hash":"235ecb086f141ea7ff5a0058d54e950379c9dd0e","modified":1529235948754},{"_id":"public/tags/shell/index.html","hash":"34c21eaa0eabac79284aa6ea90d0e590ebcc9109","modified":1529235948754},{"_id":"public/tags/冒泡排序/index.html","hash":"512b572f74a35f19b987d453fae1cbf805a9fa73","modified":1529235948754},{"_id":"public/tags/js/index.html","hash":"47cae8325324652b9ea9fb51180b4ac717cd8661","modified":1529235948755},{"_id":"public/tags/promise/index.html","hash":"5d035b55999cbbca55355309e1bb3152f3ef6f07","modified":1529235948755},{"_id":"public/tags/素数/index.html","hash":"350ecd2ce4befeee0f6d735001c53a778383995b","modified":1529235948755},{"_id":"public/tags/setTimeout/index.html","hash":"46f7728b50995e09d7bdcb3e541bae58adc01830","modified":1529235948755},{"_id":"public/tags/GraphQL/index.html","hash":"5f8616322eaeb51fd91bad16daa298605fdb8b15","modified":1529235948755},{"_id":"public/tags/docker/index.html","hash":"7b4b7ba14b02588c9e6d8db8e2ccdbabad1f007c","modified":1529235948755},{"_id":"public/CNAME","hash":"2d763bf6ec707f651a67d7b443eed17acdc9dff3","modified":1529235948761},{"_id":"public/images/avatar.jpg","hash":"16cce08fca9435292fceaa42e1ada24ab5934cff","modified":1529235948761},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1529235948762},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1529235948762},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1529235948762},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1529235948762},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1529235948762},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1529235948762},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1529235948762},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1529235948762},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1529235948762},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1529235948762},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1529235948763},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529235948763},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1529235948763},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1529235948763},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529235948763},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1529235948763},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1529235948763},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1529235948763},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1529235948763},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1529235948763},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1529235948763},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1529235948763},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1529235948763},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1529235948763},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1529235948763},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1529235948764},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1529235948764},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1529235948764},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1529235948764},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1529235948764},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1529235948764},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1529235948764},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1529235948764},{"_id":"public/images/wechatpay.png","hash":"bf675265b129fbbf8ab50771fc550eecd8c28226","modified":1529235949256},{"_id":"public/images/alipay.png","hash":"cd2a08d895a2ac18670235e96cc90e846efb8b01","modified":1529235949256},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1529235949267},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1529235949267},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1529235949275},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1529235949275},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1529235949275},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1529235949275},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1529235949275},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1529235949275},{"_id":"public/js/src/love.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1529235949275},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1529235949275},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1529235949275},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1529235949275},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1529235949275},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1529235949275},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1529235949275},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1529235949275},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1529235949275},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1529235949276},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1529235949276},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1529235949276},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1529235949276},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1529235949276},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1529235949276},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1529235949276},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1529235949276},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1529235949276},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1529235949276},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1529235949276},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1529235949276},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1529235949276},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1529235949276},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1529235949277},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1529235949277},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1529235949277},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1529235949277},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1529235949277},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1529235949277},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1529235949277},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1529235949277},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1529235949277},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1529235949277},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1529235949277},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1529235949277},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1529235949277},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1529235949277},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1529235949277},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1529235949277},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1529235949278},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1529235949278},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1529235949278},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1529235949278},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1529235949278},{"_id":"public/css/main.css","hash":"20564b23ad2b5db5359501fcbc6fd4c8c6232519","modified":1529235949278},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1529235949278},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1529235949278},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1529235949278},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1529235949278},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1529235949278},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1529235949278},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1529235949278},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1529235949278},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1529235949279},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1529235949279},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1529235949279},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1529235949279},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1529235949280},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1529235949280},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1529235949280},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1529235949280},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1529235949280},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1529235949280},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1529235949280},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1529235949280},{"_id":"public/images/nomad_ui1.png","hash":"104e8106f7c360cc234c97438f24fd97a65a05b6","modified":1529235949281},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1529235949281},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1529235949281},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1529235949281},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1529235949296}],"Category":[{"name":"其他","_id":"cjiirlio900040i6tj0xegroi"},{"name":"javascript","_id":"cjiirlioo000a0i6txu6czo4q"},{"name":"node","_id":"cjiirlios000f0i6tjuk8xxg8"},{"name":"算法","_id":"cjiirlip0000s0i6tamt4p9j5"},{"name":"linux","_id":"cjiirlip3000y0i6t21q9g4xt"},{"name":"mac","_id":"cjiirlipa001e0i6tx6pao1p6"},{"name":"docker","_id":"cjiirlipb001i0i6tqmjgkidr"}],"Data":[{"_id":"next","data":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}],"Page":[{"title":"about","date":"2018-02-05T13:13:37.000Z","about":"/about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-02-05 21:13:37\nabout: /about\n---\n","updated":"2018-04-07T06:44:57.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjiirlio400010i6twbtp8byg","content":"","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":""},{"title":"categories","date":"2018-02-05T13:08:44.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-02-05 21:08:44\ntype: \"categories\"\n---\n","updated":"2018-04-07T06:44:57.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjiirlio600030i6tumtc0ylg","content":"","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":""},{"title":"tags","date":"2018-02-05T13:11:39.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-02-05 21:11:39\ntype: \"tags\"\n---\n","updated":"2018-04-07T06:44:57.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjiirliof00070i6tjq45alpv","content":"","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":""}],"Post":[{"title":"nomad初体验","date":"2018-06-13T13:10:15.000Z","_content":"\n> Nomad是一个管理机器集群并在集群上运行应用程序的工具。支持多种驱动程序（Docker、VMS、Java）运行job,操作简单，多数据中心，可以跨数据中心调度。\n\n### 安装\n在nomad官网找到适合自己系统的安装包，这里以linux为列\n首先下载二进制包并解压\n\n```\n# wget https://releases.hashicorp.com/nomad/0.8.4/nomad_0.8.4_linux_amd64.zip\nunzip nomad_0.8.4_linux_amd64.zip\n```\n\n配置环境变量，使其全局生效,编辑系统变量文件 /etc/profile 在末尾增加如下配置：   \n\n```\n# export PATH=$PATH:/nomad_path/  （此处填写解压后的nomad文件地址）\n```\n使环境变量立即生效\n\n```\n# source /etc/profile\n```\n\n执行nomad命令，看到nomad提示，说明nomad安装成功\n\n```\nUsage: nomad [-version] [-help] [-autocomplete-(un)install] <command> [args]\n\nCommon commands:\n    run         Run a new job or update an existing job\n    stop        Stop a running job\n    status      Display the status output for a resource\n    alloc       Interact with allocations\n    job         Interact with jobs\n    node        Interact with nodes\n    agent       Runs a Nomad agent\n\nOther commands:\n    acl             Interact with ACL policies and tokens\n    agent-info      Display status information about the local agent\n    deployment      Interact with deployments\n    eval            Interact with evaluations\n    namespace       Interact with namespaces\n    operator        Provides cluster-level tools for Nomad operators\n    quota           Interact with quotas\n    sentinel        Interact with Sentinel policies\n    server          Interact with servers\n    ui              Open the Nomad Web UI\n    version         Prints the Nomad version\n```\n### 启动Agent\n\n为了简单，我们启动一个开发模式的agent，开发模式可以快速启动server端和client端   \n\n```\n# nomad agent -dev\n\n==> Starting Nomad agent...\n==> Nomad agent configuration:\n\n                Client: true\n             Log Level: DEBUG\n                Region: global (DC: dc1)\n                Server: true\n\n==> Nomad agent started! Log data will stream in below:\n\n    [INFO] serf: EventMemberJoin: nomad.global 127.0.0.1\n    [INFO] nomad: starting 4 scheduling worker(s) for [service batch _core]\n    [INFO] client: using alloc directory /tmp/NomadClient599911093\n    [INFO] raft: Node at 127.0.0.1:4647 [Follower] entering Follower state\n    [INFO] nomad: adding server nomad.global (Addr: 127.0.0.1:4647) (DC: dc1)\n    [WARN] fingerprint.network: Ethtool not found, checking /sys/net speed file\n    [WARN] raft: Heartbeat timeout reached, starting election\n    [INFO] raft: Node at 127.0.0.1:4647 [Candidate] entering Candidate state\n    [DEBUG] raft: Votes needed: 1\n    [DEBUG] raft: Vote granted. Tally: 1\n    [INFO] raft: Election won. Tally: 1\n    [INFO] raft: Node at 127.0.0.1:4647 [Leader] entering Leader state\n    [INFO] raft: Disabling EnableSingleNode (bootstrap)\n    [DEBUG] raft: Node 127.0.0.1:4647 updated peer set (2): [127.0.0.1:4647]\n    [INFO] nomad: cluster leadership acquired\n    [DEBUG] client: applied fingerprints [arch cpu host memory storage network]\n    [DEBUG] client: available drivers [docker exec java]\n    [DEBUG] client: node registration complete\n    [DEBUG] client: updated allocations at index 1 (0 allocs)\n    [DEBUG] client: allocs: (added 0) (removed 0) (updated 0) (ignore 0)\n    [DEBUG] client: state updated to ready\n```\n从输出可以看到我们已经成功启动了nomad server端和client端   \n访问本地127.0.0.1:4646 可以看到Nomad自带的ui界面 \n\n### 集群节点  \n打开另一个终端，运行一下命令可以看到nomad集群上已经注册的节点\n\n```\n# nomad node status\nID        DC   Name                   Class   Drain  Eligibility  Status\n53f694be  dc1  localhost.localdomain  <none>  false  eligible     ready\n```\n\n开发模式也启动了一个server端，所有运行下面的命令可以查看到server成员\n\n```\n# nomad server members\nName                          Address    Port  Status  Leader  Protocol  Build  Datacenter  Region\nlocalhost.localdomain.global  127.0.0.1  4648  alive   true    2         0.8.1  dc1         global\n```\n\n如果需要停止agent只需要Ctrl+C，就可以停止一个agent\n\n### Nomad Job\n\njob是用户在使用Nomad时与之交互的主要配置，是Nomad应该运行的任务的声明性规范，Job有一个全局唯一的名称，有一个或者多个任务组。\n\n#### 运行一个Job\n进入到你的工作目录，使用nomad inti命令生成一个实例job配置文件:example.nomad\n\n```\n# cd /root/nomad/\n# nomad init\nExample job file written to example.nomad\n\n```\n运行job,可以看到job被分配到节点上运行   \n\n```\n# nomad job run example.nomad\n==> Monitoring evaluation \"301af722\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"56ea1af8\"\n    Allocation \"05e3f77a\" created: node \"53f694be\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"301af722\" finished with status \"complete\"\n\n```\n\n查看Job状态\n\n```\n# nomad job status\nID       Type     Priority  Status   Submit Date\nexample  service  50        running  2018-06-13T19:28:21+08:00\n\n```\n 如果想查看一个Job的详细信息\n \n```\n# nomad server members\nName                          Address    Port  Status  Leader  Protocol  Build  Datacenter  Region\nlocalhost.localdomain.global  127.0.0.1  4648  alive   true    2         0.8.1  dc1         global\n[root@localhost nomad_cluster]# nomad job status example\nID            = example\nName          = example\nSubmit Date   = 2018-06-13T19:28:21+08:00\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         1        0       0         0\n\nLatest Deployment\nID          = 56ea1af8\nStatus      = failed\nDescription = Failed due to unhealthy allocations\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy\ncache       1        1       0        1\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created    Modified\n05e3f77a  53f694be  cache       0        run      running  3m51s ago  51s ago\n```\n#### 修改一个Job\n现在我们编辑example.nomad文件中count的，设置为3,这个参数的作用是指定要运行的任务组数\n\n```\n# The \"count\" parameter specifies the number of the task groups that should\n# be running under this group. This value must be non-negative and defaults\n# to 1.\ncount = 3\n```\n运行nomad job 命令可以看到如果我们更新了job会发生什么变化\n\n```\n# nomad job plan example.nomad\n+/- Job: \"example\"\n+/- Task Group: \"cache\" (2 create, 1 in-place update)\n  +/- Count: \"1\" => \"3\" (forces create)\n      Task: \"redis\"\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 9\nTo submit the job with version verification run:\n\nnomad job run -check-index 9 example.nomad\n\nWhen running the job with the check-index flag, the job will only be run if the\nserver side version matches the job modify index returned. If the index has\nchanged, another user has modified the job and the plan's results are\npotentially invalid.\n```\n使用给出的更新命令去更新job\n\n```\n# nomad job run -check-index 9 example.nomad\n==> Monitoring evaluation \"153899d5\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"d1734e35\"\n    Allocation \"fd9851d0\" created: node \"53f694be\", group \"cache\"\n    Allocation \"05e3f77a\" modified: node \"53f694be\", group \"cache\"\n    Allocation \"e6ca8a97\" created: node \"53f694be\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"153899d5\" finished with status \"complete\"\n```\n#### 停止job\n停止job使用nomad stop 命令\n\n```\n# nomad stop example\n==> Monitoring evaluation \"ffc6fddd\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"d1734e35\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"ffc6fddd\" finished with status \"complete\" \n\n```\n停止后，使用nomad status 命令查看Job状态已经变为dead状态\n\n```\n[root@localhost nomad_cluster]# nomad job  status\nID       Type     Priority  Status          Submit Date\nexample  service  50        dead (stopped)  2018-06-13T19:49:41+08:00\n```\n### 搭建集群\n现在开始我们搭建一个nomad集群，前边我们使用dev模式同时启动了一个nomad server以及client端，如果在生产环境，建议至少使用3-5台服务\n\n#### 环境准备\n我这里准备三台虚拟机\n\nip | 虚拟名\n---|---\n10.211.55.4 | s1\n10.211.55.5 | s2\n10.211.55.6 | s3\n\n以下简称s1,s2,s3\n#### 启动server\n在s1虚机上工作目录创建服务器配置文件server.hcl，内容如下:\n\n```\n# touch server.hcl\n# vi server.hcl\n\ndata_dir = \"/tmp/server\"\n\nname = \"server1\"\n\nserver {\n  enabled = true\n\n  # Self-elect, should be 3 or 5 for production\n  bootstrap_expect = 3\n}\n\n```\n保存，退出，启动nomad server代理\n\n```\n# nomad agent -config server.hcl\n==> Loaded configuration from server.hcl\n==> Starting Nomad agent...\n==> Nomad agent configuration:\n\n                Client: false\n             Log Level: INFO\n                Region: global (DC: dc1)\n                Server: true\n               Version: 0.8.1\n\n==> Nomad agent started! Log data will stream in below:\n\n    2018/06/10 12:54:32 [INFO] raft: Initial configuration (index=0): []\n    2018/06/10 12:54:32 [INFO] raft: Node at 10.211.55.4:4647 [Follower] entering Follower state (Leader: \"\")\n    2018/06/10 12:54:32 [INFO] serf: EventMemberJoin: server1.global 10.211.55.4\n    2018/06/10 12:54:32.125891 [INFO] nomad: starting 2 scheduling worker(s) for [service batch system _core]\n    2018/06/10 12:54:32.126270 [INFO] nomad: adding server server1.global (Addr: 10.211.55.4:4647) (DC: dc1)\n    2018/06/10 12:54:32.126983 [ERR] consul: error looking up Nomad servers: server.nomad: unable to query Consul datacenters: Get http://127.0.0.1:8500/v1/catalog/datacenters: dial tcp 127.0.0.1:8500: getsockopt: connection refused\n    2018/06/10 12:54:33 [WARN] raft: no known peers, aborting election\n    2018/06/10 12:54:42.238478 [ERR] worker: failed to dequeue evaluation: No cluster leader\n    2018/06/10 12:54:42.647826 [ERR] worker: failed to dequeue evaluation: No cluster leader\n    2018/06/10 12:54:47.530410 [ERR] worker: failed to dequeue evaluation: No cluster leader\n    2018/06/10 12:54:47.877889 [ERR] worker: failed to dequeue evaluation: No cluster leader\n```\n这里可以看到agent 启动之后会去找leader，由于我们配置的bootstrap_expect参数为3，因此只有三个集群节点都启动之后，才回去选举一个leader   \n接下来我们在s2, s3机器上也重复上面的操作，分别启动一个server,为了区分，在三个配置文件中我们使用 name区分，s1,s2,s3配置文件中的name分别为server1,server2,server\n\n三台机器上的agent都启动成功之后，我们使用nomad join命令将三个server连接\n\n```\n在s2上执行\n# nomad server join 10.211.55.4\n在s3上执行\n# nomad server join 10.211.55.5\n\n```\n这样就把三个server组成了一个集群,并且他们已经选举了一个leader\n\n```\n# nomad server members\nName            Address      Port  Status  Leader  Protocol  Build  Datacenter  Region\nserver1.global  10.211.55.4  4648  alive   false   2         0.8.1  dc1         global\nserver2.global  10.211.55.5  4648  alive   true    2         0.8.1  dc1         global\nserver3.global  10.211.55.6  4648  alive   false   2         0.8.1  dc1         global\n\n```\n#### 启动client\n在s2虚机上工作目录创建服务器配置文件client1.hcl，内容如下:\n\n```\n# touch client1.hcl\n# vi client1.hcl\n\nlog_level = \"DEBUG\"\n\ndata_dir = \"/tmp/client1\"\n\nname = \"client1\"\n\nclient {\n  enabled = true\n\n  # For demo assume we are talking to server1. For production,\n  # this should be like \"nomad.service.consul:4647\" and a system\n  # like Consul used for service discovery.\n  servers = [\"10.211.55.5:4647\"]\n}\n\n# Modify our port to avoid a collision with server1 and client1\nports {\n  http = 5656\n}\n\n```\n保存，退出，启动nomad client代理\n\n```\n[root@localhost nomad_cluster]# nomad agent -config client1.hcl\n==> Loaded configuration from client1.hcl\n==> Starting Nomad agent...\n==> Nomad agent configuration:\n\n                Client: true\n             Log Level: DEBUG\n                Region: global (DC: dc1)\n                Server: false\n               Version: 0.8.1\n\n==> Nomad agent started! Log data will stream in below:\n\n    2018/06/13 20:43:31.353729 [INFO] client: using state directory /tmp/client1/client\n    2018/06/13 20:43:31.354585 [INFO] client: using alloc directory /tmp/client1/alloc\n    2018/06/13 20:43:31.357777 [DEBUG] client.fingerprint_manager: built-in fingerprints: [arch cgroup consul cpu host memory network nomad signal storage vault env_aws env_gce]\n    2018/06/13 20:43:35.446947 [DEBUG] driver.docker: image \"nginx\" (sha256:cd5239a0906a6ccf0562354852fae04bc5b52d72a2aff9a871ddb6bd57553569) reference count incremented: 1\n    2018/06/13 20:43:35.452540 [DEBUG] client: starting task context for 'redis' (alloc '1bcb0f46-a710-769a-287e-7d432342f143')\n    2018/06/13 20:43:35.453826 [DEBUG] client: starting task runners for alloc '1bcb0f46-a710-769a-287e-7d432342f143'\n    2018/06/13 20:43:40.697028 [DEBUG] client: 3 evaluations triggered by node update\n    2018/06/13 20:43:40.697068 [DEBUG] client: state updated to ready\n    2018/06/13 20:43:40.869207 [DEBUG] client: state changed, updating node and re-registering.\n    2018/06/13 20:43:40.878128 [INFO] client: node registration complete\n\n```\n重复上面的操作在s3上面也启动一个client端，使用一下命令查看节点\n\n```\n# nomad node-status\nID        DC   Name     Class   Drain  Eligibility  Status\n85be1fd0  dc1  client1  <none>  false  eligible     ready\nd3f05cb0  dc1  client2  <none>  false  eligible     ready\n```\n现在我们已经有了一个集群，我们在s1上提交一个job测试一下我们的集群，使用example.nomad，确保count=3\n\n```\n# nomad job run example.nomad\n==> Monitoring evaluation \"8095c3ec\"\n    Evaluation triggered by job \"example\"\n    Allocation \"7bc737e3\" created: node \"85be1fd0\", group \"cache\"\n    Allocation \"22e53fa4\" created: node \"1a9b1e3d\", group \"cache\"\n    Allocation \"2692e18b\" created: node \"1a9b1e3d\", group \"cache\"\n    Evaluation within deployment: \"b44335b4\"\n    Allocation \"7bc737e3\" status changed: \"pending\" -> \"running\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"8095c3ec\" finished with status \"complete\"\n```\n输出中看到调度程序为其中一个客户机节点分配了两个任务，剩下的任务分配给第二个客户端。也可以使用nomad status命令查看\n\n```\n[root@centos-linux nomad_cluster]# nomad job status\nID             Type     Priority  Status          Submit Date\nexample        service  50        running         2018-06-13T20:57:26+08:00\nexample-api-3  service  50        dead (stopped)  2018-06-12T23:16:09+08:00\nexample-api-4  service  50        running         2018-06-12T23:18:55+08:00\nexample-api-5  service  50        dead (stopped)  2018-06-12T23:36:26+08:00\nexample-api-6  service  50        dead (stopped)  2018-06-13T00:55:06+08:00\nnginx          service  50        dead (stopped)  2018-06-10T00:04:52+08:00\n[root@centos-linux nomad_cluster]# nomad job status example\nID            = example\nName          = example\nSubmit Date   = 2018-06-13T20:57:26+08:00\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         3        0       3         0\n\nLatest Deployment\nID          = b44335b4\nStatus      = failed\nDescription = Failed due to unhealthy allocations\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy\ncache       3        3       0        3\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status    Created        Modified\n22e53fa4  1a9b1e3d  cache       2        run      running   3d7h from now  3d7h from now\n2692e18b  1a9b1e3d  cache       2        run      running   3d7h from now  3d7h from now\n7bc737e3  85be1fd0  cache       2        run      running   3d7h from now  3d7h from now\n```\n到此，我们已经成功搭建了nomad集群，并在集群上运行了简单地Job!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/1529235554495.md","raw":"---\ntitle: nomad初体验\ndate: 2018-06-13 21:10:15\ntags: [nomad,分布式，微服务]\ncategory: [其他]\n---\n\n> Nomad是一个管理机器集群并在集群上运行应用程序的工具。支持多种驱动程序（Docker、VMS、Java）运行job,操作简单，多数据中心，可以跨数据中心调度。\n\n### 安装\n在nomad官网找到适合自己系统的安装包，这里以linux为列\n首先下载二进制包并解压\n\n```\n# wget https://releases.hashicorp.com/nomad/0.8.4/nomad_0.8.4_linux_amd64.zip\nunzip nomad_0.8.4_linux_amd64.zip\n```\n\n配置环境变量，使其全局生效,编辑系统变量文件 /etc/profile 在末尾增加如下配置：   \n\n```\n# export PATH=$PATH:/nomad_path/  （此处填写解压后的nomad文件地址）\n```\n使环境变量立即生效\n\n```\n# source /etc/profile\n```\n\n执行nomad命令，看到nomad提示，说明nomad安装成功\n\n```\nUsage: nomad [-version] [-help] [-autocomplete-(un)install] <command> [args]\n\nCommon commands:\n    run         Run a new job or update an existing job\n    stop        Stop a running job\n    status      Display the status output for a resource\n    alloc       Interact with allocations\n    job         Interact with jobs\n    node        Interact with nodes\n    agent       Runs a Nomad agent\n\nOther commands:\n    acl             Interact with ACL policies and tokens\n    agent-info      Display status information about the local agent\n    deployment      Interact with deployments\n    eval            Interact with evaluations\n    namespace       Interact with namespaces\n    operator        Provides cluster-level tools for Nomad operators\n    quota           Interact with quotas\n    sentinel        Interact with Sentinel policies\n    server          Interact with servers\n    ui              Open the Nomad Web UI\n    version         Prints the Nomad version\n```\n### 启动Agent\n\n为了简单，我们启动一个开发模式的agent，开发模式可以快速启动server端和client端   \n\n```\n# nomad agent -dev\n\n==> Starting Nomad agent...\n==> Nomad agent configuration:\n\n                Client: true\n             Log Level: DEBUG\n                Region: global (DC: dc1)\n                Server: true\n\n==> Nomad agent started! Log data will stream in below:\n\n    [INFO] serf: EventMemberJoin: nomad.global 127.0.0.1\n    [INFO] nomad: starting 4 scheduling worker(s) for [service batch _core]\n    [INFO] client: using alloc directory /tmp/NomadClient599911093\n    [INFO] raft: Node at 127.0.0.1:4647 [Follower] entering Follower state\n    [INFO] nomad: adding server nomad.global (Addr: 127.0.0.1:4647) (DC: dc1)\n    [WARN] fingerprint.network: Ethtool not found, checking /sys/net speed file\n    [WARN] raft: Heartbeat timeout reached, starting election\n    [INFO] raft: Node at 127.0.0.1:4647 [Candidate] entering Candidate state\n    [DEBUG] raft: Votes needed: 1\n    [DEBUG] raft: Vote granted. Tally: 1\n    [INFO] raft: Election won. Tally: 1\n    [INFO] raft: Node at 127.0.0.1:4647 [Leader] entering Leader state\n    [INFO] raft: Disabling EnableSingleNode (bootstrap)\n    [DEBUG] raft: Node 127.0.0.1:4647 updated peer set (2): [127.0.0.1:4647]\n    [INFO] nomad: cluster leadership acquired\n    [DEBUG] client: applied fingerprints [arch cpu host memory storage network]\n    [DEBUG] client: available drivers [docker exec java]\n    [DEBUG] client: node registration complete\n    [DEBUG] client: updated allocations at index 1 (0 allocs)\n    [DEBUG] client: allocs: (added 0) (removed 0) (updated 0) (ignore 0)\n    [DEBUG] client: state updated to ready\n```\n从输出可以看到我们已经成功启动了nomad server端和client端   \n访问本地127.0.0.1:4646 可以看到Nomad自带的ui界面 \n\n### 集群节点  \n打开另一个终端，运行一下命令可以看到nomad集群上已经注册的节点\n\n```\n# nomad node status\nID        DC   Name                   Class   Drain  Eligibility  Status\n53f694be  dc1  localhost.localdomain  <none>  false  eligible     ready\n```\n\n开发模式也启动了一个server端，所有运行下面的命令可以查看到server成员\n\n```\n# nomad server members\nName                          Address    Port  Status  Leader  Protocol  Build  Datacenter  Region\nlocalhost.localdomain.global  127.0.0.1  4648  alive   true    2         0.8.1  dc1         global\n```\n\n如果需要停止agent只需要Ctrl+C，就可以停止一个agent\n\n### Nomad Job\n\njob是用户在使用Nomad时与之交互的主要配置，是Nomad应该运行的任务的声明性规范，Job有一个全局唯一的名称，有一个或者多个任务组。\n\n#### 运行一个Job\n进入到你的工作目录，使用nomad inti命令生成一个实例job配置文件:example.nomad\n\n```\n# cd /root/nomad/\n# nomad init\nExample job file written to example.nomad\n\n```\n运行job,可以看到job被分配到节点上运行   \n\n```\n# nomad job run example.nomad\n==> Monitoring evaluation \"301af722\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"56ea1af8\"\n    Allocation \"05e3f77a\" created: node \"53f694be\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"301af722\" finished with status \"complete\"\n\n```\n\n查看Job状态\n\n```\n# nomad job status\nID       Type     Priority  Status   Submit Date\nexample  service  50        running  2018-06-13T19:28:21+08:00\n\n```\n 如果想查看一个Job的详细信息\n \n```\n# nomad server members\nName                          Address    Port  Status  Leader  Protocol  Build  Datacenter  Region\nlocalhost.localdomain.global  127.0.0.1  4648  alive   true    2         0.8.1  dc1         global\n[root@localhost nomad_cluster]# nomad job status example\nID            = example\nName          = example\nSubmit Date   = 2018-06-13T19:28:21+08:00\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         1        0       0         0\n\nLatest Deployment\nID          = 56ea1af8\nStatus      = failed\nDescription = Failed due to unhealthy allocations\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy\ncache       1        1       0        1\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created    Modified\n05e3f77a  53f694be  cache       0        run      running  3m51s ago  51s ago\n```\n#### 修改一个Job\n现在我们编辑example.nomad文件中count的，设置为3,这个参数的作用是指定要运行的任务组数\n\n```\n# The \"count\" parameter specifies the number of the task groups that should\n# be running under this group. This value must be non-negative and defaults\n# to 1.\ncount = 3\n```\n运行nomad job 命令可以看到如果我们更新了job会发生什么变化\n\n```\n# nomad job plan example.nomad\n+/- Job: \"example\"\n+/- Task Group: \"cache\" (2 create, 1 in-place update)\n  +/- Count: \"1\" => \"3\" (forces create)\n      Task: \"redis\"\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 9\nTo submit the job with version verification run:\n\nnomad job run -check-index 9 example.nomad\n\nWhen running the job with the check-index flag, the job will only be run if the\nserver side version matches the job modify index returned. If the index has\nchanged, another user has modified the job and the plan's results are\npotentially invalid.\n```\n使用给出的更新命令去更新job\n\n```\n# nomad job run -check-index 9 example.nomad\n==> Monitoring evaluation \"153899d5\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"d1734e35\"\n    Allocation \"fd9851d0\" created: node \"53f694be\", group \"cache\"\n    Allocation \"05e3f77a\" modified: node \"53f694be\", group \"cache\"\n    Allocation \"e6ca8a97\" created: node \"53f694be\", group \"cache\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"153899d5\" finished with status \"complete\"\n```\n#### 停止job\n停止job使用nomad stop 命令\n\n```\n# nomad stop example\n==> Monitoring evaluation \"ffc6fddd\"\n    Evaluation triggered by job \"example\"\n    Evaluation within deployment: \"d1734e35\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"ffc6fddd\" finished with status \"complete\" \n\n```\n停止后，使用nomad status 命令查看Job状态已经变为dead状态\n\n```\n[root@localhost nomad_cluster]# nomad job  status\nID       Type     Priority  Status          Submit Date\nexample  service  50        dead (stopped)  2018-06-13T19:49:41+08:00\n```\n### 搭建集群\n现在开始我们搭建一个nomad集群，前边我们使用dev模式同时启动了一个nomad server以及client端，如果在生产环境，建议至少使用3-5台服务\n\n#### 环境准备\n我这里准备三台虚拟机\n\nip | 虚拟名\n---|---\n10.211.55.4 | s1\n10.211.55.5 | s2\n10.211.55.6 | s3\n\n以下简称s1,s2,s3\n#### 启动server\n在s1虚机上工作目录创建服务器配置文件server.hcl，内容如下:\n\n```\n# touch server.hcl\n# vi server.hcl\n\ndata_dir = \"/tmp/server\"\n\nname = \"server1\"\n\nserver {\n  enabled = true\n\n  # Self-elect, should be 3 or 5 for production\n  bootstrap_expect = 3\n}\n\n```\n保存，退出，启动nomad server代理\n\n```\n# nomad agent -config server.hcl\n==> Loaded configuration from server.hcl\n==> Starting Nomad agent...\n==> Nomad agent configuration:\n\n                Client: false\n             Log Level: INFO\n                Region: global (DC: dc1)\n                Server: true\n               Version: 0.8.1\n\n==> Nomad agent started! Log data will stream in below:\n\n    2018/06/10 12:54:32 [INFO] raft: Initial configuration (index=0): []\n    2018/06/10 12:54:32 [INFO] raft: Node at 10.211.55.4:4647 [Follower] entering Follower state (Leader: \"\")\n    2018/06/10 12:54:32 [INFO] serf: EventMemberJoin: server1.global 10.211.55.4\n    2018/06/10 12:54:32.125891 [INFO] nomad: starting 2 scheduling worker(s) for [service batch system _core]\n    2018/06/10 12:54:32.126270 [INFO] nomad: adding server server1.global (Addr: 10.211.55.4:4647) (DC: dc1)\n    2018/06/10 12:54:32.126983 [ERR] consul: error looking up Nomad servers: server.nomad: unable to query Consul datacenters: Get http://127.0.0.1:8500/v1/catalog/datacenters: dial tcp 127.0.0.1:8500: getsockopt: connection refused\n    2018/06/10 12:54:33 [WARN] raft: no known peers, aborting election\n    2018/06/10 12:54:42.238478 [ERR] worker: failed to dequeue evaluation: No cluster leader\n    2018/06/10 12:54:42.647826 [ERR] worker: failed to dequeue evaluation: No cluster leader\n    2018/06/10 12:54:47.530410 [ERR] worker: failed to dequeue evaluation: No cluster leader\n    2018/06/10 12:54:47.877889 [ERR] worker: failed to dequeue evaluation: No cluster leader\n```\n这里可以看到agent 启动之后会去找leader，由于我们配置的bootstrap_expect参数为3，因此只有三个集群节点都启动之后，才回去选举一个leader   \n接下来我们在s2, s3机器上也重复上面的操作，分别启动一个server,为了区分，在三个配置文件中我们使用 name区分，s1,s2,s3配置文件中的name分别为server1,server2,server\n\n三台机器上的agent都启动成功之后，我们使用nomad join命令将三个server连接\n\n```\n在s2上执行\n# nomad server join 10.211.55.4\n在s3上执行\n# nomad server join 10.211.55.5\n\n```\n这样就把三个server组成了一个集群,并且他们已经选举了一个leader\n\n```\n# nomad server members\nName            Address      Port  Status  Leader  Protocol  Build  Datacenter  Region\nserver1.global  10.211.55.4  4648  alive   false   2         0.8.1  dc1         global\nserver2.global  10.211.55.5  4648  alive   true    2         0.8.1  dc1         global\nserver3.global  10.211.55.6  4648  alive   false   2         0.8.1  dc1         global\n\n```\n#### 启动client\n在s2虚机上工作目录创建服务器配置文件client1.hcl，内容如下:\n\n```\n# touch client1.hcl\n# vi client1.hcl\n\nlog_level = \"DEBUG\"\n\ndata_dir = \"/tmp/client1\"\n\nname = \"client1\"\n\nclient {\n  enabled = true\n\n  # For demo assume we are talking to server1. For production,\n  # this should be like \"nomad.service.consul:4647\" and a system\n  # like Consul used for service discovery.\n  servers = [\"10.211.55.5:4647\"]\n}\n\n# Modify our port to avoid a collision with server1 and client1\nports {\n  http = 5656\n}\n\n```\n保存，退出，启动nomad client代理\n\n```\n[root@localhost nomad_cluster]# nomad agent -config client1.hcl\n==> Loaded configuration from client1.hcl\n==> Starting Nomad agent...\n==> Nomad agent configuration:\n\n                Client: true\n             Log Level: DEBUG\n                Region: global (DC: dc1)\n                Server: false\n               Version: 0.8.1\n\n==> Nomad agent started! Log data will stream in below:\n\n    2018/06/13 20:43:31.353729 [INFO] client: using state directory /tmp/client1/client\n    2018/06/13 20:43:31.354585 [INFO] client: using alloc directory /tmp/client1/alloc\n    2018/06/13 20:43:31.357777 [DEBUG] client.fingerprint_manager: built-in fingerprints: [arch cgroup consul cpu host memory network nomad signal storage vault env_aws env_gce]\n    2018/06/13 20:43:35.446947 [DEBUG] driver.docker: image \"nginx\" (sha256:cd5239a0906a6ccf0562354852fae04bc5b52d72a2aff9a871ddb6bd57553569) reference count incremented: 1\n    2018/06/13 20:43:35.452540 [DEBUG] client: starting task context for 'redis' (alloc '1bcb0f46-a710-769a-287e-7d432342f143')\n    2018/06/13 20:43:35.453826 [DEBUG] client: starting task runners for alloc '1bcb0f46-a710-769a-287e-7d432342f143'\n    2018/06/13 20:43:40.697028 [DEBUG] client: 3 evaluations triggered by node update\n    2018/06/13 20:43:40.697068 [DEBUG] client: state updated to ready\n    2018/06/13 20:43:40.869207 [DEBUG] client: state changed, updating node and re-registering.\n    2018/06/13 20:43:40.878128 [INFO] client: node registration complete\n\n```\n重复上面的操作在s3上面也启动一个client端，使用一下命令查看节点\n\n```\n# nomad node-status\nID        DC   Name     Class   Drain  Eligibility  Status\n85be1fd0  dc1  client1  <none>  false  eligible     ready\nd3f05cb0  dc1  client2  <none>  false  eligible     ready\n```\n现在我们已经有了一个集群，我们在s1上提交一个job测试一下我们的集群，使用example.nomad，确保count=3\n\n```\n# nomad job run example.nomad\n==> Monitoring evaluation \"8095c3ec\"\n    Evaluation triggered by job \"example\"\n    Allocation \"7bc737e3\" created: node \"85be1fd0\", group \"cache\"\n    Allocation \"22e53fa4\" created: node \"1a9b1e3d\", group \"cache\"\n    Allocation \"2692e18b\" created: node \"1a9b1e3d\", group \"cache\"\n    Evaluation within deployment: \"b44335b4\"\n    Allocation \"7bc737e3\" status changed: \"pending\" -> \"running\"\n    Evaluation status changed: \"pending\" -> \"complete\"\n==> Evaluation \"8095c3ec\" finished with status \"complete\"\n```\n输出中看到调度程序为其中一个客户机节点分配了两个任务，剩下的任务分配给第二个客户端。也可以使用nomad status命令查看\n\n```\n[root@centos-linux nomad_cluster]# nomad job status\nID             Type     Priority  Status          Submit Date\nexample        service  50        running         2018-06-13T20:57:26+08:00\nexample-api-3  service  50        dead (stopped)  2018-06-12T23:16:09+08:00\nexample-api-4  service  50        running         2018-06-12T23:18:55+08:00\nexample-api-5  service  50        dead (stopped)  2018-06-12T23:36:26+08:00\nexample-api-6  service  50        dead (stopped)  2018-06-13T00:55:06+08:00\nnginx          service  50        dead (stopped)  2018-06-10T00:04:52+08:00\n[root@centos-linux nomad_cluster]# nomad job status example\nID            = example\nName          = example\nSubmit Date   = 2018-06-13T20:57:26+08:00\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         3        0       3         0\n\nLatest Deployment\nID          = b44335b4\nStatus      = failed\nDescription = Failed due to unhealthy allocations\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy\ncache       3        3       0        3\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status    Created        Modified\n22e53fa4  1a9b1e3d  cache       2        run      running   3d7h from now  3d7h from now\n2692e18b  1a9b1e3d  cache       2        run      running   3d7h from now  3d7h from now\n7bc737e3  85be1fd0  cache       2        run      running   3d7h from now  3d7h from now\n```\n到此，我们已经成功搭建了nomad集群，并在集群上运行了简单地Job!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"1529235554495","published":1,"updated":"2018-06-17T11:39:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirlinz00000i6tfjxy8mc8","content":"<blockquote>\n<p>Nomad是一个管理机器集群并在集群上运行应用程序的工具。支持多种驱动程序（Docker、VMS、Java）运行job,操作简单，多数据中心，可以跨数据中心调度。</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>在nomad官网找到适合自己系统的安装包，这里以linux为列<br>首先下载二进制包并解压</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget https://releases.hashicorp.com/nomad/0.8.4/nomad_0.8.4_linux_amd64.zip</span><br><span class=\"line\">unzip nomad_0.8.4_linux_amd64.zip</span><br></pre></td></tr></table></figure>\n<p>配置环境变量，使其全局生效,编辑系统变量文件 /etc/profile 在末尾增加如下配置：   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># export PATH=$PATH:/nomad_path/  （此处填写解压后的nomad文件地址）</span><br></pre></td></tr></table></figure>\n<p>使环境变量立即生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># source /etc/profile</span><br></pre></td></tr></table></figure>\n<p>执行nomad命令，看到nomad提示，说明nomad安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: nomad [-version] [-help] [-autocomplete-(un)install] &lt;command&gt; [args]</span><br><span class=\"line\"></span><br><span class=\"line\">Common commands:</span><br><span class=\"line\">    run         Run a new job or update an existing job</span><br><span class=\"line\">    stop        Stop a running job</span><br><span class=\"line\">    status      Display the status output for a resource</span><br><span class=\"line\">    alloc       Interact with allocations</span><br><span class=\"line\">    job         Interact with jobs</span><br><span class=\"line\">    node        Interact with nodes</span><br><span class=\"line\">    agent       Runs a Nomad agent</span><br><span class=\"line\"></span><br><span class=\"line\">Other commands:</span><br><span class=\"line\">    acl             Interact with ACL policies and tokens</span><br><span class=\"line\">    agent-info      Display status information about the local agent</span><br><span class=\"line\">    deployment      Interact with deployments</span><br><span class=\"line\">    eval            Interact with evaluations</span><br><span class=\"line\">    namespace       Interact with namespaces</span><br><span class=\"line\">    operator        Provides cluster-level tools for Nomad operators</span><br><span class=\"line\">    quota           Interact with quotas</span><br><span class=\"line\">    sentinel        Interact with Sentinel policies</span><br><span class=\"line\">    server          Interact with servers</span><br><span class=\"line\">    ui              Open the Nomad Web UI</span><br><span class=\"line\">    version         Prints the Nomad version</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动Agent\"><a href=\"#启动Agent\" class=\"headerlink\" title=\"启动Agent\"></a>启动Agent</h3><p>为了简单，我们启动一个开发模式的agent，开发模式可以快速启动server端和client端   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad agent -dev</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; Starting Nomad agent...</span><br><span class=\"line\">==&gt; Nomad agent configuration:</span><br><span class=\"line\"></span><br><span class=\"line\">                Client: true</span><br><span class=\"line\">             Log Level: DEBUG</span><br><span class=\"line\">                Region: global (DC: dc1)</span><br><span class=\"line\">                Server: true</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; Nomad agent started! Log data will stream in below:</span><br><span class=\"line\"></span><br><span class=\"line\">    [INFO] serf: EventMemberJoin: nomad.global 127.0.0.1</span><br><span class=\"line\">    [INFO] nomad: starting 4 scheduling worker(s) for [service batch _core]</span><br><span class=\"line\">    [INFO] client: using alloc directory /tmp/NomadClient599911093</span><br><span class=\"line\">    [INFO] raft: Node at 127.0.0.1:4647 [Follower] entering Follower state</span><br><span class=\"line\">    [INFO] nomad: adding server nomad.global (Addr: 127.0.0.1:4647) (DC: dc1)</span><br><span class=\"line\">    [WARN] fingerprint.network: Ethtool not found, checking /sys/net speed file</span><br><span class=\"line\">    [WARN] raft: Heartbeat timeout reached, starting election</span><br><span class=\"line\">    [INFO] raft: Node at 127.0.0.1:4647 [Candidate] entering Candidate state</span><br><span class=\"line\">    [DEBUG] raft: Votes needed: 1</span><br><span class=\"line\">    [DEBUG] raft: Vote granted. Tally: 1</span><br><span class=\"line\">    [INFO] raft: Election won. Tally: 1</span><br><span class=\"line\">    [INFO] raft: Node at 127.0.0.1:4647 [Leader] entering Leader state</span><br><span class=\"line\">    [INFO] raft: Disabling EnableSingleNode (bootstrap)</span><br><span class=\"line\">    [DEBUG] raft: Node 127.0.0.1:4647 updated peer set (2): [127.0.0.1:4647]</span><br><span class=\"line\">    [INFO] nomad: cluster leadership acquired</span><br><span class=\"line\">    [DEBUG] client: applied fingerprints [arch cpu host memory storage network]</span><br><span class=\"line\">    [DEBUG] client: available drivers [docker exec java]</span><br><span class=\"line\">    [DEBUG] client: node registration complete</span><br><span class=\"line\">    [DEBUG] client: updated allocations at index 1 (0 allocs)</span><br><span class=\"line\">    [DEBUG] client: allocs: (added 0) (removed 0) (updated 0) (ignore 0)</span><br><span class=\"line\">    [DEBUG] client: state updated to ready</span><br></pre></td></tr></table></figure>\n<p>从输出可以看到我们已经成功启动了nomad server端和client端<br>访问本地127.0.0.1:4646 可以看到Nomad自带的ui界面 </p>\n<h3 id=\"集群节点\"><a href=\"#集群节点\" class=\"headerlink\" title=\"集群节点\"></a>集群节点</h3><p>打开另一个终端，运行一下命令可以看到nomad集群上已经注册的节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad node status</span><br><span class=\"line\">ID        DC   Name                   Class   Drain  Eligibility  Status</span><br><span class=\"line\">53f694be  dc1  localhost.localdomain  &lt;none&gt;  false  eligible     ready</span><br></pre></td></tr></table></figure>\n<p>开发模式也启动了一个server端，所有运行下面的命令可以查看到server成员</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad server members</span><br><span class=\"line\">Name                          Address    Port  Status  Leader  Protocol  Build  Datacenter  Region</span><br><span class=\"line\">localhost.localdomain.global  127.0.0.1  4648  alive   true    2         0.8.1  dc1         global</span><br></pre></td></tr></table></figure>\n<p>如果需要停止agent只需要Ctrl+C，就可以停止一个agent</p>\n<h3 id=\"Nomad-Job\"><a href=\"#Nomad-Job\" class=\"headerlink\" title=\"Nomad Job\"></a>Nomad Job</h3><p>job是用户在使用Nomad时与之交互的主要配置，是Nomad应该运行的任务的声明性规范，Job有一个全局唯一的名称，有一个或者多个任务组。</p>\n<h4 id=\"运行一个Job\"><a href=\"#运行一个Job\" class=\"headerlink\" title=\"运行一个Job\"></a>运行一个Job</h4><p>进入到你的工作目录，使用nomad inti命令生成一个实例job配置文件:example.nomad</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd /root/nomad/</span><br><span class=\"line\"># nomad init</span><br><span class=\"line\">Example job file written to example.nomad</span><br></pre></td></tr></table></figure>\n<p>运行job,可以看到job被分配到节点上运行   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad job run example.nomad</span><br><span class=\"line\">==&gt; Monitoring evaluation &quot;301af722&quot;</span><br><span class=\"line\">    Evaluation triggered by job &quot;example&quot;</span><br><span class=\"line\">    Evaluation within deployment: &quot;56ea1af8&quot;</span><br><span class=\"line\">    Allocation &quot;05e3f77a&quot; created: node &quot;53f694be&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Evaluation status changed: &quot;pending&quot; -&gt; &quot;complete&quot;</span><br><span class=\"line\">==&gt; Evaluation &quot;301af722&quot; finished with status &quot;complete&quot;</span><br></pre></td></tr></table></figure>\n<p>查看Job状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad job status</span><br><span class=\"line\">ID       Type     Priority  Status   Submit Date</span><br><span class=\"line\">example  service  50        running  2018-06-13T19:28:21+08:00</span><br></pre></td></tr></table></figure>\n<p> 如果想查看一个Job的详细信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad server members</span><br><span class=\"line\">Name                          Address    Port  Status  Leader  Protocol  Build  Datacenter  Region</span><br><span class=\"line\">localhost.localdomain.global  127.0.0.1  4648  alive   true    2         0.8.1  dc1         global</span><br><span class=\"line\">[root@localhost nomad_cluster]# nomad job status example</span><br><span class=\"line\">ID            = example</span><br><span class=\"line\">Name          = example</span><br><span class=\"line\">Submit Date   = 2018-06-13T19:28:21+08:00</span><br><span class=\"line\">Type          = service</span><br><span class=\"line\">Priority      = 50</span><br><span class=\"line\">Datacenters   = dc1</span><br><span class=\"line\">Status        = running</span><br><span class=\"line\">Periodic      = false</span><br><span class=\"line\">Parameterized = false</span><br><span class=\"line\"></span><br><span class=\"line\">Summary</span><br><span class=\"line\">Task Group  Queued  Starting  Running  Failed  Complete  Lost</span><br><span class=\"line\">cache       0       0         1        0       0         0</span><br><span class=\"line\"></span><br><span class=\"line\">Latest Deployment</span><br><span class=\"line\">ID          = 56ea1af8</span><br><span class=\"line\">Status      = failed</span><br><span class=\"line\">Description = Failed due to unhealthy allocations</span><br><span class=\"line\"></span><br><span class=\"line\">Deployed</span><br><span class=\"line\">Task Group  Desired  Placed  Healthy  Unhealthy</span><br><span class=\"line\">cache       1        1       0        1</span><br><span class=\"line\"></span><br><span class=\"line\">Allocations</span><br><span class=\"line\">ID        Node ID   Task Group  Version  Desired  Status   Created    Modified</span><br><span class=\"line\">05e3f77a  53f694be  cache       0        run      running  3m51s ago  51s ago</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改一个Job\"><a href=\"#修改一个Job\" class=\"headerlink\" title=\"修改一个Job\"></a>修改一个Job</h4><p>现在我们编辑example.nomad文件中count的，设置为3,这个参数的作用是指定要运行的任务组数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The &quot;count&quot; parameter specifies the number of the task groups that should</span><br><span class=\"line\"># be running under this group. This value must be non-negative and defaults</span><br><span class=\"line\"># to 1.</span><br><span class=\"line\">count = 3</span><br></pre></td></tr></table></figure>\n<p>运行nomad job 命令可以看到如果我们更新了job会发生什么变化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad job plan example.nomad</span><br><span class=\"line\">+/- Job: &quot;example&quot;</span><br><span class=\"line\">+/- Task Group: &quot;cache&quot; (2 create, 1 in-place update)</span><br><span class=\"line\">  +/- Count: &quot;1&quot; =&gt; &quot;3&quot; (forces create)</span><br><span class=\"line\">      Task: &quot;redis&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Scheduler dry-run:</span><br><span class=\"line\">- All tasks successfully allocated.</span><br><span class=\"line\"></span><br><span class=\"line\">Job Modify Index: 9</span><br><span class=\"line\">To submit the job with version verification run:</span><br><span class=\"line\"></span><br><span class=\"line\">nomad job run -check-index 9 example.nomad</span><br><span class=\"line\"></span><br><span class=\"line\">When running the job with the check-index flag, the job will only be run if the</span><br><span class=\"line\">server side version matches the job modify index returned. If the index has</span><br><span class=\"line\">changed, another user has modified the job and the plan&apos;s results are</span><br><span class=\"line\">potentially invalid.</span><br></pre></td></tr></table></figure>\n<p>使用给出的更新命令去更新job</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad job run -check-index 9 example.nomad</span><br><span class=\"line\">==&gt; Monitoring evaluation &quot;153899d5&quot;</span><br><span class=\"line\">    Evaluation triggered by job &quot;example&quot;</span><br><span class=\"line\">    Evaluation within deployment: &quot;d1734e35&quot;</span><br><span class=\"line\">    Allocation &quot;fd9851d0&quot; created: node &quot;53f694be&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Allocation &quot;05e3f77a&quot; modified: node &quot;53f694be&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Allocation &quot;e6ca8a97&quot; created: node &quot;53f694be&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Evaluation status changed: &quot;pending&quot; -&gt; &quot;complete&quot;</span><br><span class=\"line\">==&gt; Evaluation &quot;153899d5&quot; finished with status &quot;complete&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止job\"><a href=\"#停止job\" class=\"headerlink\" title=\"停止job\"></a>停止job</h4><p>停止job使用nomad stop 命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad stop example</span><br><span class=\"line\">==&gt; Monitoring evaluation &quot;ffc6fddd&quot;</span><br><span class=\"line\">    Evaluation triggered by job &quot;example&quot;</span><br><span class=\"line\">    Evaluation within deployment: &quot;d1734e35&quot;</span><br><span class=\"line\">    Evaluation status changed: &quot;pending&quot; -&gt; &quot;complete&quot;</span><br><span class=\"line\">==&gt; Evaluation &quot;ffc6fddd&quot; finished with status &quot;complete&quot;</span><br></pre></td></tr></table></figure>\n<p>停止后，使用nomad status 命令查看Job状态已经变为dead状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nomad_cluster]# nomad job  status</span><br><span class=\"line\">ID       Type     Priority  Status          Submit Date</span><br><span class=\"line\">example  service  50        dead (stopped)  2018-06-13T19:49:41+08:00</span><br></pre></td></tr></table></figure>\n<h3 id=\"搭建集群\"><a href=\"#搭建集群\" class=\"headerlink\" title=\"搭建集群\"></a>搭建集群</h3><p>现在开始我们搭建一个nomad集群，前边我们使用dev模式同时启动了一个nomad server以及client端，如果在生产环境，建议至少使用3-5台服务</p>\n<h4 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h4><p>我这里准备三台虚拟机</p>\n<table>\n<thead>\n<tr>\n<th>ip</th>\n<th>虚拟名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10.211.55.4</td>\n<td>s1</td>\n</tr>\n<tr>\n<td>10.211.55.5</td>\n<td>s2</td>\n</tr>\n<tr>\n<td>10.211.55.6</td>\n<td>s3</td>\n</tr>\n</tbody>\n</table>\n<p>以下简称s1,s2,s3</p>\n<h4 id=\"启动server\"><a href=\"#启动server\" class=\"headerlink\" title=\"启动server\"></a>启动server</h4><p>在s1虚机上工作目录创建服务器配置文件server.hcl，内容如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># touch server.hcl</span><br><span class=\"line\"># vi server.hcl</span><br><span class=\"line\"></span><br><span class=\"line\">data_dir = &quot;/tmp/server&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">name = &quot;server1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  enabled = true</span><br><span class=\"line\"></span><br><span class=\"line\">  # Self-elect, should be 3 or 5 for production</span><br><span class=\"line\">  bootstrap_expect = 3</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>保存，退出，启动nomad server代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad agent -config server.hcl</span><br><span class=\"line\">==&gt; Loaded configuration from server.hcl</span><br><span class=\"line\">==&gt; Starting Nomad agent...</span><br><span class=\"line\">==&gt; Nomad agent configuration:</span><br><span class=\"line\"></span><br><span class=\"line\">                Client: false</span><br><span class=\"line\">             Log Level: INFO</span><br><span class=\"line\">                Region: global (DC: dc1)</span><br><span class=\"line\">                Server: true</span><br><span class=\"line\">               Version: 0.8.1</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; Nomad agent started! Log data will stream in below:</span><br><span class=\"line\"></span><br><span class=\"line\">    2018/06/10 12:54:32 [INFO] raft: Initial configuration (index=0): []</span><br><span class=\"line\">    2018/06/10 12:54:32 [INFO] raft: Node at 10.211.55.4:4647 [Follower] entering Follower state (Leader: &quot;&quot;)</span><br><span class=\"line\">    2018/06/10 12:54:32 [INFO] serf: EventMemberJoin: server1.global 10.211.55.4</span><br><span class=\"line\">    2018/06/10 12:54:32.125891 [INFO] nomad: starting 2 scheduling worker(s) for [service batch system _core]</span><br><span class=\"line\">    2018/06/10 12:54:32.126270 [INFO] nomad: adding server server1.global (Addr: 10.211.55.4:4647) (DC: dc1)</span><br><span class=\"line\">    2018/06/10 12:54:32.126983 [ERR] consul: error looking up Nomad servers: server.nomad: unable to query Consul datacenters: Get http://127.0.0.1:8500/v1/catalog/datacenters: dial tcp 127.0.0.1:8500: getsockopt: connection refused</span><br><span class=\"line\">    2018/06/10 12:54:33 [WARN] raft: no known peers, aborting election</span><br><span class=\"line\">    2018/06/10 12:54:42.238478 [ERR] worker: failed to dequeue evaluation: No cluster leader</span><br><span class=\"line\">    2018/06/10 12:54:42.647826 [ERR] worker: failed to dequeue evaluation: No cluster leader</span><br><span class=\"line\">    2018/06/10 12:54:47.530410 [ERR] worker: failed to dequeue evaluation: No cluster leader</span><br><span class=\"line\">    2018/06/10 12:54:47.877889 [ERR] worker: failed to dequeue evaluation: No cluster leader</span><br></pre></td></tr></table></figure>\n<p>这里可以看到agent 启动之后会去找leader，由于我们配置的bootstrap_expect参数为3，因此只有三个集群节点都启动之后，才回去选举一个leader<br>接下来我们在s2, s3机器上也重复上面的操作，分别启动一个server,为了区分，在三个配置文件中我们使用 name区分，s1,s2,s3配置文件中的name分别为server1,server2,server</p>\n<p>三台机器上的agent都启动成功之后，我们使用nomad join命令将三个server连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在s2上执行</span><br><span class=\"line\"># nomad server join 10.211.55.4</span><br><span class=\"line\">在s3上执行</span><br><span class=\"line\"># nomad server join 10.211.55.5</span><br></pre></td></tr></table></figure>\n<p>这样就把三个server组成了一个集群,并且他们已经选举了一个leader</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad server members</span><br><span class=\"line\">Name            Address      Port  Status  Leader  Protocol  Build  Datacenter  Region</span><br><span class=\"line\">server1.global  10.211.55.4  4648  alive   false   2         0.8.1  dc1         global</span><br><span class=\"line\">server2.global  10.211.55.5  4648  alive   true    2         0.8.1  dc1         global</span><br><span class=\"line\">server3.global  10.211.55.6  4648  alive   false   2         0.8.1  dc1         global</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动client\"><a href=\"#启动client\" class=\"headerlink\" title=\"启动client\"></a>启动client</h4><p>在s2虚机上工作目录创建服务器配置文件client1.hcl，内容如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># touch client1.hcl</span><br><span class=\"line\"># vi client1.hcl</span><br><span class=\"line\"></span><br><span class=\"line\">log_level = &quot;DEBUG&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">data_dir = &quot;/tmp/client1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">name = &quot;client1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">client &#123;</span><br><span class=\"line\">  enabled = true</span><br><span class=\"line\"></span><br><span class=\"line\">  # For demo assume we are talking to server1. For production,</span><br><span class=\"line\">  # this should be like &quot;nomad.service.consul:4647&quot; and a system</span><br><span class=\"line\">  # like Consul used for service discovery.</span><br><span class=\"line\">  servers = [&quot;10.211.55.5:4647&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Modify our port to avoid a collision with server1 and client1</span><br><span class=\"line\">ports &#123;</span><br><span class=\"line\">  http = 5656</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>保存，退出，启动nomad client代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nomad_cluster]# nomad agent -config client1.hcl</span><br><span class=\"line\">==&gt; Loaded configuration from client1.hcl</span><br><span class=\"line\">==&gt; Starting Nomad agent...</span><br><span class=\"line\">==&gt; Nomad agent configuration:</span><br><span class=\"line\"></span><br><span class=\"line\">                Client: true</span><br><span class=\"line\">             Log Level: DEBUG</span><br><span class=\"line\">                Region: global (DC: dc1)</span><br><span class=\"line\">                Server: false</span><br><span class=\"line\">               Version: 0.8.1</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; Nomad agent started! Log data will stream in below:</span><br><span class=\"line\"></span><br><span class=\"line\">    2018/06/13 20:43:31.353729 [INFO] client: using state directory /tmp/client1/client</span><br><span class=\"line\">    2018/06/13 20:43:31.354585 [INFO] client: using alloc directory /tmp/client1/alloc</span><br><span class=\"line\">    2018/06/13 20:43:31.357777 [DEBUG] client.fingerprint_manager: built-in fingerprints: [arch cgroup consul cpu host memory network nomad signal storage vault env_aws env_gce]</span><br><span class=\"line\">    2018/06/13 20:43:35.446947 [DEBUG] driver.docker: image &quot;nginx&quot; (sha256:cd5239a0906a6ccf0562354852fae04bc5b52d72a2aff9a871ddb6bd57553569) reference count incremented: 1</span><br><span class=\"line\">    2018/06/13 20:43:35.452540 [DEBUG] client: starting task context for &apos;redis&apos; (alloc &apos;1bcb0f46-a710-769a-287e-7d432342f143&apos;)</span><br><span class=\"line\">    2018/06/13 20:43:35.453826 [DEBUG] client: starting task runners for alloc &apos;1bcb0f46-a710-769a-287e-7d432342f143&apos;</span><br><span class=\"line\">    2018/06/13 20:43:40.697028 [DEBUG] client: 3 evaluations triggered by node update</span><br><span class=\"line\">    2018/06/13 20:43:40.697068 [DEBUG] client: state updated to ready</span><br><span class=\"line\">    2018/06/13 20:43:40.869207 [DEBUG] client: state changed, updating node and re-registering.</span><br><span class=\"line\">    2018/06/13 20:43:40.878128 [INFO] client: node registration complete</span><br></pre></td></tr></table></figure>\n<p>重复上面的操作在s3上面也启动一个client端，使用一下命令查看节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad node-status</span><br><span class=\"line\">ID        DC   Name     Class   Drain  Eligibility  Status</span><br><span class=\"line\">85be1fd0  dc1  client1  &lt;none&gt;  false  eligible     ready</span><br><span class=\"line\">d3f05cb0  dc1  client2  &lt;none&gt;  false  eligible     ready</span><br></pre></td></tr></table></figure>\n<p>现在我们已经有了一个集群，我们在s1上提交一个job测试一下我们的集群，使用example.nomad，确保count=3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad job run example.nomad</span><br><span class=\"line\">==&gt; Monitoring evaluation &quot;8095c3ec&quot;</span><br><span class=\"line\">    Evaluation triggered by job &quot;example&quot;</span><br><span class=\"line\">    Allocation &quot;7bc737e3&quot; created: node &quot;85be1fd0&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Allocation &quot;22e53fa4&quot; created: node &quot;1a9b1e3d&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Allocation &quot;2692e18b&quot; created: node &quot;1a9b1e3d&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Evaluation within deployment: &quot;b44335b4&quot;</span><br><span class=\"line\">    Allocation &quot;7bc737e3&quot; status changed: &quot;pending&quot; -&gt; &quot;running&quot;</span><br><span class=\"line\">    Evaluation status changed: &quot;pending&quot; -&gt; &quot;complete&quot;</span><br><span class=\"line\">==&gt; Evaluation &quot;8095c3ec&quot; finished with status &quot;complete&quot;</span><br></pre></td></tr></table></figure>\n<p>输出中看到调度程序为其中一个客户机节点分配了两个任务，剩下的任务分配给第二个客户端。也可以使用nomad status命令查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos-linux nomad_cluster]# nomad job status</span><br><span class=\"line\">ID             Type     Priority  Status          Submit Date</span><br><span class=\"line\">example        service  50        running         2018-06-13T20:57:26+08:00</span><br><span class=\"line\">example-api-3  service  50        dead (stopped)  2018-06-12T23:16:09+08:00</span><br><span class=\"line\">example-api-4  service  50        running         2018-06-12T23:18:55+08:00</span><br><span class=\"line\">example-api-5  service  50        dead (stopped)  2018-06-12T23:36:26+08:00</span><br><span class=\"line\">example-api-6  service  50        dead (stopped)  2018-06-13T00:55:06+08:00</span><br><span class=\"line\">nginx          service  50        dead (stopped)  2018-06-10T00:04:52+08:00</span><br><span class=\"line\">[root@centos-linux nomad_cluster]# nomad job status example</span><br><span class=\"line\">ID            = example</span><br><span class=\"line\">Name          = example</span><br><span class=\"line\">Submit Date   = 2018-06-13T20:57:26+08:00</span><br><span class=\"line\">Type          = service</span><br><span class=\"line\">Priority      = 50</span><br><span class=\"line\">Datacenters   = dc1</span><br><span class=\"line\">Status        = running</span><br><span class=\"line\">Periodic      = false</span><br><span class=\"line\">Parameterized = false</span><br><span class=\"line\"></span><br><span class=\"line\">Summary</span><br><span class=\"line\">Task Group  Queued  Starting  Running  Failed  Complete  Lost</span><br><span class=\"line\">cache       0       0         3        0       3         0</span><br><span class=\"line\"></span><br><span class=\"line\">Latest Deployment</span><br><span class=\"line\">ID          = b44335b4</span><br><span class=\"line\">Status      = failed</span><br><span class=\"line\">Description = Failed due to unhealthy allocations</span><br><span class=\"line\"></span><br><span class=\"line\">Deployed</span><br><span class=\"line\">Task Group  Desired  Placed  Healthy  Unhealthy</span><br><span class=\"line\">cache       3        3       0        3</span><br><span class=\"line\"></span><br><span class=\"line\">Allocations</span><br><span class=\"line\">ID        Node ID   Task Group  Version  Desired  Status    Created        Modified</span><br><span class=\"line\">22e53fa4  1a9b1e3d  cache       2        run      running   3d7h from now  3d7h from now</span><br><span class=\"line\">2692e18b  1a9b1e3d  cache       2        run      running   3d7h from now  3d7h from now</span><br><span class=\"line\">7bc737e3  85be1fd0  cache       2        run      running   3d7h from now  3d7h from now</span><br></pre></td></tr></table></figure>\n<p>到此，我们已经成功搭建了nomad集群，并在集群上运行了简单地Job!</p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<blockquote>\n<p>Nomad是一个管理机器集群并在集群上运行应用程序的工具。支持多种驱动程序（Docker、VMS、Java）运行job,操作简单，多数据中心，可以跨数据中心调度。</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>在nomad官网找到适合自己系统的安装包，这里以linux为列<br>首先下载二进制包并解压</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget https://releases.hashicorp.com/nomad/0.8.4/nomad_0.8.4_linux_amd64.zip</span><br><span class=\"line\">unzip nomad_0.8.4_linux_amd64.zip</span><br></pre></td></tr></table></figure>\n<p>配置环境变量，使其全局生效,编辑系统变量文件 /etc/profile 在末尾增加如下配置：   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># export PATH=$PATH:/nomad_path/  （此处填写解压后的nomad文件地址）</span><br></pre></td></tr></table></figure>\n<p>使环境变量立即生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># source /etc/profile</span><br></pre></td></tr></table></figure>\n<p>执行nomad命令，看到nomad提示，说明nomad安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: nomad [-version] [-help] [-autocomplete-(un)install] &lt;command&gt; [args]</span><br><span class=\"line\"></span><br><span class=\"line\">Common commands:</span><br><span class=\"line\">    run         Run a new job or update an existing job</span><br><span class=\"line\">    stop        Stop a running job</span><br><span class=\"line\">    status      Display the status output for a resource</span><br><span class=\"line\">    alloc       Interact with allocations</span><br><span class=\"line\">    job         Interact with jobs</span><br><span class=\"line\">    node        Interact with nodes</span><br><span class=\"line\">    agent       Runs a Nomad agent</span><br><span class=\"line\"></span><br><span class=\"line\">Other commands:</span><br><span class=\"line\">    acl             Interact with ACL policies and tokens</span><br><span class=\"line\">    agent-info      Display status information about the local agent</span><br><span class=\"line\">    deployment      Interact with deployments</span><br><span class=\"line\">    eval            Interact with evaluations</span><br><span class=\"line\">    namespace       Interact with namespaces</span><br><span class=\"line\">    operator        Provides cluster-level tools for Nomad operators</span><br><span class=\"line\">    quota           Interact with quotas</span><br><span class=\"line\">    sentinel        Interact with Sentinel policies</span><br><span class=\"line\">    server          Interact with servers</span><br><span class=\"line\">    ui              Open the Nomad Web UI</span><br><span class=\"line\">    version         Prints the Nomad version</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动Agent\"><a href=\"#启动Agent\" class=\"headerlink\" title=\"启动Agent\"></a>启动Agent</h3><p>为了简单，我们启动一个开发模式的agent，开发模式可以快速启动server端和client端   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad agent -dev</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; Starting Nomad agent...</span><br><span class=\"line\">==&gt; Nomad agent configuration:</span><br><span class=\"line\"></span><br><span class=\"line\">                Client: true</span><br><span class=\"line\">             Log Level: DEBUG</span><br><span class=\"line\">                Region: global (DC: dc1)</span><br><span class=\"line\">                Server: true</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; Nomad agent started! Log data will stream in below:</span><br><span class=\"line\"></span><br><span class=\"line\">    [INFO] serf: EventMemberJoin: nomad.global 127.0.0.1</span><br><span class=\"line\">    [INFO] nomad: starting 4 scheduling worker(s) for [service batch _core]</span><br><span class=\"line\">    [INFO] client: using alloc directory /tmp/NomadClient599911093</span><br><span class=\"line\">    [INFO] raft: Node at 127.0.0.1:4647 [Follower] entering Follower state</span><br><span class=\"line\">    [INFO] nomad: adding server nomad.global (Addr: 127.0.0.1:4647) (DC: dc1)</span><br><span class=\"line\">    [WARN] fingerprint.network: Ethtool not found, checking /sys/net speed file</span><br><span class=\"line\">    [WARN] raft: Heartbeat timeout reached, starting election</span><br><span class=\"line\">    [INFO] raft: Node at 127.0.0.1:4647 [Candidate] entering Candidate state</span><br><span class=\"line\">    [DEBUG] raft: Votes needed: 1</span><br><span class=\"line\">    [DEBUG] raft: Vote granted. Tally: 1</span><br><span class=\"line\">    [INFO] raft: Election won. Tally: 1</span><br><span class=\"line\">    [INFO] raft: Node at 127.0.0.1:4647 [Leader] entering Leader state</span><br><span class=\"line\">    [INFO] raft: Disabling EnableSingleNode (bootstrap)</span><br><span class=\"line\">    [DEBUG] raft: Node 127.0.0.1:4647 updated peer set (2): [127.0.0.1:4647]</span><br><span class=\"line\">    [INFO] nomad: cluster leadership acquired</span><br><span class=\"line\">    [DEBUG] client: applied fingerprints [arch cpu host memory storage network]</span><br><span class=\"line\">    [DEBUG] client: available drivers [docker exec java]</span><br><span class=\"line\">    [DEBUG] client: node registration complete</span><br><span class=\"line\">    [DEBUG] client: updated allocations at index 1 (0 allocs)</span><br><span class=\"line\">    [DEBUG] client: allocs: (added 0) (removed 0) (updated 0) (ignore 0)</span><br><span class=\"line\">    [DEBUG] client: state updated to ready</span><br></pre></td></tr></table></figure>\n<p>从输出可以看到我们已经成功启动了nomad server端和client端<br>访问本地127.0.0.1:4646 可以看到Nomad自带的ui界面 </p>\n<h3 id=\"集群节点\"><a href=\"#集群节点\" class=\"headerlink\" title=\"集群节点\"></a>集群节点</h3><p>打开另一个终端，运行一下命令可以看到nomad集群上已经注册的节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad node status</span><br><span class=\"line\">ID        DC   Name                   Class   Drain  Eligibility  Status</span><br><span class=\"line\">53f694be  dc1  localhost.localdomain  &lt;none&gt;  false  eligible     ready</span><br></pre></td></tr></table></figure>\n<p>开发模式也启动了一个server端，所有运行下面的命令可以查看到server成员</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad server members</span><br><span class=\"line\">Name                          Address    Port  Status  Leader  Protocol  Build  Datacenter  Region</span><br><span class=\"line\">localhost.localdomain.global  127.0.0.1  4648  alive   true    2         0.8.1  dc1         global</span><br></pre></td></tr></table></figure>\n<p>如果需要停止agent只需要Ctrl+C，就可以停止一个agent</p>\n<h3 id=\"Nomad-Job\"><a href=\"#Nomad-Job\" class=\"headerlink\" title=\"Nomad Job\"></a>Nomad Job</h3><p>job是用户在使用Nomad时与之交互的主要配置，是Nomad应该运行的任务的声明性规范，Job有一个全局唯一的名称，有一个或者多个任务组。</p>\n<h4 id=\"运行一个Job\"><a href=\"#运行一个Job\" class=\"headerlink\" title=\"运行一个Job\"></a>运行一个Job</h4><p>进入到你的工作目录，使用nomad inti命令生成一个实例job配置文件:example.nomad</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd /root/nomad/</span><br><span class=\"line\"># nomad init</span><br><span class=\"line\">Example job file written to example.nomad</span><br></pre></td></tr></table></figure>\n<p>运行job,可以看到job被分配到节点上运行   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad job run example.nomad</span><br><span class=\"line\">==&gt; Monitoring evaluation &quot;301af722&quot;</span><br><span class=\"line\">    Evaluation triggered by job &quot;example&quot;</span><br><span class=\"line\">    Evaluation within deployment: &quot;56ea1af8&quot;</span><br><span class=\"line\">    Allocation &quot;05e3f77a&quot; created: node &quot;53f694be&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Evaluation status changed: &quot;pending&quot; -&gt; &quot;complete&quot;</span><br><span class=\"line\">==&gt; Evaluation &quot;301af722&quot; finished with status &quot;complete&quot;</span><br></pre></td></tr></table></figure>\n<p>查看Job状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad job status</span><br><span class=\"line\">ID       Type     Priority  Status   Submit Date</span><br><span class=\"line\">example  service  50        running  2018-06-13T19:28:21+08:00</span><br></pre></td></tr></table></figure>\n<p> 如果想查看一个Job的详细信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad server members</span><br><span class=\"line\">Name                          Address    Port  Status  Leader  Protocol  Build  Datacenter  Region</span><br><span class=\"line\">localhost.localdomain.global  127.0.0.1  4648  alive   true    2         0.8.1  dc1         global</span><br><span class=\"line\">[root@localhost nomad_cluster]# nomad job status example</span><br><span class=\"line\">ID            = example</span><br><span class=\"line\">Name          = example</span><br><span class=\"line\">Submit Date   = 2018-06-13T19:28:21+08:00</span><br><span class=\"line\">Type          = service</span><br><span class=\"line\">Priority      = 50</span><br><span class=\"line\">Datacenters   = dc1</span><br><span class=\"line\">Status        = running</span><br><span class=\"line\">Periodic      = false</span><br><span class=\"line\">Parameterized = false</span><br><span class=\"line\"></span><br><span class=\"line\">Summary</span><br><span class=\"line\">Task Group  Queued  Starting  Running  Failed  Complete  Lost</span><br><span class=\"line\">cache       0       0         1        0       0         0</span><br><span class=\"line\"></span><br><span class=\"line\">Latest Deployment</span><br><span class=\"line\">ID          = 56ea1af8</span><br><span class=\"line\">Status      = failed</span><br><span class=\"line\">Description = Failed due to unhealthy allocations</span><br><span class=\"line\"></span><br><span class=\"line\">Deployed</span><br><span class=\"line\">Task Group  Desired  Placed  Healthy  Unhealthy</span><br><span class=\"line\">cache       1        1       0        1</span><br><span class=\"line\"></span><br><span class=\"line\">Allocations</span><br><span class=\"line\">ID        Node ID   Task Group  Version  Desired  Status   Created    Modified</span><br><span class=\"line\">05e3f77a  53f694be  cache       0        run      running  3m51s ago  51s ago</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改一个Job\"><a href=\"#修改一个Job\" class=\"headerlink\" title=\"修改一个Job\"></a>修改一个Job</h4><p>现在我们编辑example.nomad文件中count的，设置为3,这个参数的作用是指定要运行的任务组数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The &quot;count&quot; parameter specifies the number of the task groups that should</span><br><span class=\"line\"># be running under this group. This value must be non-negative and defaults</span><br><span class=\"line\"># to 1.</span><br><span class=\"line\">count = 3</span><br></pre></td></tr></table></figure>\n<p>运行nomad job 命令可以看到如果我们更新了job会发生什么变化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad job plan example.nomad</span><br><span class=\"line\">+/- Job: &quot;example&quot;</span><br><span class=\"line\">+/- Task Group: &quot;cache&quot; (2 create, 1 in-place update)</span><br><span class=\"line\">  +/- Count: &quot;1&quot; =&gt; &quot;3&quot; (forces create)</span><br><span class=\"line\">      Task: &quot;redis&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Scheduler dry-run:</span><br><span class=\"line\">- All tasks successfully allocated.</span><br><span class=\"line\"></span><br><span class=\"line\">Job Modify Index: 9</span><br><span class=\"line\">To submit the job with version verification run:</span><br><span class=\"line\"></span><br><span class=\"line\">nomad job run -check-index 9 example.nomad</span><br><span class=\"line\"></span><br><span class=\"line\">When running the job with the check-index flag, the job will only be run if the</span><br><span class=\"line\">server side version matches the job modify index returned. If the index has</span><br><span class=\"line\">changed, another user has modified the job and the plan&apos;s results are</span><br><span class=\"line\">potentially invalid.</span><br></pre></td></tr></table></figure>\n<p>使用给出的更新命令去更新job</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad job run -check-index 9 example.nomad</span><br><span class=\"line\">==&gt; Monitoring evaluation &quot;153899d5&quot;</span><br><span class=\"line\">    Evaluation triggered by job &quot;example&quot;</span><br><span class=\"line\">    Evaluation within deployment: &quot;d1734e35&quot;</span><br><span class=\"line\">    Allocation &quot;fd9851d0&quot; created: node &quot;53f694be&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Allocation &quot;05e3f77a&quot; modified: node &quot;53f694be&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Allocation &quot;e6ca8a97&quot; created: node &quot;53f694be&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Evaluation status changed: &quot;pending&quot; -&gt; &quot;complete&quot;</span><br><span class=\"line\">==&gt; Evaluation &quot;153899d5&quot; finished with status &quot;complete&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止job\"><a href=\"#停止job\" class=\"headerlink\" title=\"停止job\"></a>停止job</h4><p>停止job使用nomad stop 命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad stop example</span><br><span class=\"line\">==&gt; Monitoring evaluation &quot;ffc6fddd&quot;</span><br><span class=\"line\">    Evaluation triggered by job &quot;example&quot;</span><br><span class=\"line\">    Evaluation within deployment: &quot;d1734e35&quot;</span><br><span class=\"line\">    Evaluation status changed: &quot;pending&quot; -&gt; &quot;complete&quot;</span><br><span class=\"line\">==&gt; Evaluation &quot;ffc6fddd&quot; finished with status &quot;complete&quot;</span><br></pre></td></tr></table></figure>\n<p>停止后，使用nomad status 命令查看Job状态已经变为dead状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nomad_cluster]# nomad job  status</span><br><span class=\"line\">ID       Type     Priority  Status          Submit Date</span><br><span class=\"line\">example  service  50        dead (stopped)  2018-06-13T19:49:41+08:00</span><br></pre></td></tr></table></figure>\n<h3 id=\"搭建集群\"><a href=\"#搭建集群\" class=\"headerlink\" title=\"搭建集群\"></a>搭建集群</h3><p>现在开始我们搭建一个nomad集群，前边我们使用dev模式同时启动了一个nomad server以及client端，如果在生产环境，建议至少使用3-5台服务</p>\n<h4 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h4><p>我这里准备三台虚拟机</p>\n<table>\n<thead>\n<tr>\n<th>ip</th>\n<th>虚拟名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10.211.55.4</td>\n<td>s1</td>\n</tr>\n<tr>\n<td>10.211.55.5</td>\n<td>s2</td>\n</tr>\n<tr>\n<td>10.211.55.6</td>\n<td>s3</td>\n</tr>\n</tbody>\n</table>\n<p>以下简称s1,s2,s3</p>\n<h4 id=\"启动server\"><a href=\"#启动server\" class=\"headerlink\" title=\"启动server\"></a>启动server</h4><p>在s1虚机上工作目录创建服务器配置文件server.hcl，内容如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># touch server.hcl</span><br><span class=\"line\"># vi server.hcl</span><br><span class=\"line\"></span><br><span class=\"line\">data_dir = &quot;/tmp/server&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">name = &quot;server1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  enabled = true</span><br><span class=\"line\"></span><br><span class=\"line\">  # Self-elect, should be 3 or 5 for production</span><br><span class=\"line\">  bootstrap_expect = 3</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>保存，退出，启动nomad server代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad agent -config server.hcl</span><br><span class=\"line\">==&gt; Loaded configuration from server.hcl</span><br><span class=\"line\">==&gt; Starting Nomad agent...</span><br><span class=\"line\">==&gt; Nomad agent configuration:</span><br><span class=\"line\"></span><br><span class=\"line\">                Client: false</span><br><span class=\"line\">             Log Level: INFO</span><br><span class=\"line\">                Region: global (DC: dc1)</span><br><span class=\"line\">                Server: true</span><br><span class=\"line\">               Version: 0.8.1</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; Nomad agent started! Log data will stream in below:</span><br><span class=\"line\"></span><br><span class=\"line\">    2018/06/10 12:54:32 [INFO] raft: Initial configuration (index=0): []</span><br><span class=\"line\">    2018/06/10 12:54:32 [INFO] raft: Node at 10.211.55.4:4647 [Follower] entering Follower state (Leader: &quot;&quot;)</span><br><span class=\"line\">    2018/06/10 12:54:32 [INFO] serf: EventMemberJoin: server1.global 10.211.55.4</span><br><span class=\"line\">    2018/06/10 12:54:32.125891 [INFO] nomad: starting 2 scheduling worker(s) for [service batch system _core]</span><br><span class=\"line\">    2018/06/10 12:54:32.126270 [INFO] nomad: adding server server1.global (Addr: 10.211.55.4:4647) (DC: dc1)</span><br><span class=\"line\">    2018/06/10 12:54:32.126983 [ERR] consul: error looking up Nomad servers: server.nomad: unable to query Consul datacenters: Get http://127.0.0.1:8500/v1/catalog/datacenters: dial tcp 127.0.0.1:8500: getsockopt: connection refused</span><br><span class=\"line\">    2018/06/10 12:54:33 [WARN] raft: no known peers, aborting election</span><br><span class=\"line\">    2018/06/10 12:54:42.238478 [ERR] worker: failed to dequeue evaluation: No cluster leader</span><br><span class=\"line\">    2018/06/10 12:54:42.647826 [ERR] worker: failed to dequeue evaluation: No cluster leader</span><br><span class=\"line\">    2018/06/10 12:54:47.530410 [ERR] worker: failed to dequeue evaluation: No cluster leader</span><br><span class=\"line\">    2018/06/10 12:54:47.877889 [ERR] worker: failed to dequeue evaluation: No cluster leader</span><br></pre></td></tr></table></figure>\n<p>这里可以看到agent 启动之后会去找leader，由于我们配置的bootstrap_expect参数为3，因此只有三个集群节点都启动之后，才回去选举一个leader<br>接下来我们在s2, s3机器上也重复上面的操作，分别启动一个server,为了区分，在三个配置文件中我们使用 name区分，s1,s2,s3配置文件中的name分别为server1,server2,server</p>\n<p>三台机器上的agent都启动成功之后，我们使用nomad join命令将三个server连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在s2上执行</span><br><span class=\"line\"># nomad server join 10.211.55.4</span><br><span class=\"line\">在s3上执行</span><br><span class=\"line\"># nomad server join 10.211.55.5</span><br></pre></td></tr></table></figure>\n<p>这样就把三个server组成了一个集群,并且他们已经选举了一个leader</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad server members</span><br><span class=\"line\">Name            Address      Port  Status  Leader  Protocol  Build  Datacenter  Region</span><br><span class=\"line\">server1.global  10.211.55.4  4648  alive   false   2         0.8.1  dc1         global</span><br><span class=\"line\">server2.global  10.211.55.5  4648  alive   true    2         0.8.1  dc1         global</span><br><span class=\"line\">server3.global  10.211.55.6  4648  alive   false   2         0.8.1  dc1         global</span><br></pre></td></tr></table></figure>\n<h4 id=\"启动client\"><a href=\"#启动client\" class=\"headerlink\" title=\"启动client\"></a>启动client</h4><p>在s2虚机上工作目录创建服务器配置文件client1.hcl，内容如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># touch client1.hcl</span><br><span class=\"line\"># vi client1.hcl</span><br><span class=\"line\"></span><br><span class=\"line\">log_level = &quot;DEBUG&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">data_dir = &quot;/tmp/client1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">name = &quot;client1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">client &#123;</span><br><span class=\"line\">  enabled = true</span><br><span class=\"line\"></span><br><span class=\"line\">  # For demo assume we are talking to server1. For production,</span><br><span class=\"line\">  # this should be like &quot;nomad.service.consul:4647&quot; and a system</span><br><span class=\"line\">  # like Consul used for service discovery.</span><br><span class=\"line\">  servers = [&quot;10.211.55.5:4647&quot;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># Modify our port to avoid a collision with server1 and client1</span><br><span class=\"line\">ports &#123;</span><br><span class=\"line\">  http = 5656</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>保存，退出，启动nomad client代理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost nomad_cluster]# nomad agent -config client1.hcl</span><br><span class=\"line\">==&gt; Loaded configuration from client1.hcl</span><br><span class=\"line\">==&gt; Starting Nomad agent...</span><br><span class=\"line\">==&gt; Nomad agent configuration:</span><br><span class=\"line\"></span><br><span class=\"line\">                Client: true</span><br><span class=\"line\">             Log Level: DEBUG</span><br><span class=\"line\">                Region: global (DC: dc1)</span><br><span class=\"line\">                Server: false</span><br><span class=\"line\">               Version: 0.8.1</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; Nomad agent started! Log data will stream in below:</span><br><span class=\"line\"></span><br><span class=\"line\">    2018/06/13 20:43:31.353729 [INFO] client: using state directory /tmp/client1/client</span><br><span class=\"line\">    2018/06/13 20:43:31.354585 [INFO] client: using alloc directory /tmp/client1/alloc</span><br><span class=\"line\">    2018/06/13 20:43:31.357777 [DEBUG] client.fingerprint_manager: built-in fingerprints: [arch cgroup consul cpu host memory network nomad signal storage vault env_aws env_gce]</span><br><span class=\"line\">    2018/06/13 20:43:35.446947 [DEBUG] driver.docker: image &quot;nginx&quot; (sha256:cd5239a0906a6ccf0562354852fae04bc5b52d72a2aff9a871ddb6bd57553569) reference count incremented: 1</span><br><span class=\"line\">    2018/06/13 20:43:35.452540 [DEBUG] client: starting task context for &apos;redis&apos; (alloc &apos;1bcb0f46-a710-769a-287e-7d432342f143&apos;)</span><br><span class=\"line\">    2018/06/13 20:43:35.453826 [DEBUG] client: starting task runners for alloc &apos;1bcb0f46-a710-769a-287e-7d432342f143&apos;</span><br><span class=\"line\">    2018/06/13 20:43:40.697028 [DEBUG] client: 3 evaluations triggered by node update</span><br><span class=\"line\">    2018/06/13 20:43:40.697068 [DEBUG] client: state updated to ready</span><br><span class=\"line\">    2018/06/13 20:43:40.869207 [DEBUG] client: state changed, updating node and re-registering.</span><br><span class=\"line\">    2018/06/13 20:43:40.878128 [INFO] client: node registration complete</span><br></pre></td></tr></table></figure>\n<p>重复上面的操作在s3上面也启动一个client端，使用一下命令查看节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad node-status</span><br><span class=\"line\">ID        DC   Name     Class   Drain  Eligibility  Status</span><br><span class=\"line\">85be1fd0  dc1  client1  &lt;none&gt;  false  eligible     ready</span><br><span class=\"line\">d3f05cb0  dc1  client2  &lt;none&gt;  false  eligible     ready</span><br></pre></td></tr></table></figure>\n<p>现在我们已经有了一个集群，我们在s1上提交一个job测试一下我们的集群，使用example.nomad，确保count=3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nomad job run example.nomad</span><br><span class=\"line\">==&gt; Monitoring evaluation &quot;8095c3ec&quot;</span><br><span class=\"line\">    Evaluation triggered by job &quot;example&quot;</span><br><span class=\"line\">    Allocation &quot;7bc737e3&quot; created: node &quot;85be1fd0&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Allocation &quot;22e53fa4&quot; created: node &quot;1a9b1e3d&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Allocation &quot;2692e18b&quot; created: node &quot;1a9b1e3d&quot;, group &quot;cache&quot;</span><br><span class=\"line\">    Evaluation within deployment: &quot;b44335b4&quot;</span><br><span class=\"line\">    Allocation &quot;7bc737e3&quot; status changed: &quot;pending&quot; -&gt; &quot;running&quot;</span><br><span class=\"line\">    Evaluation status changed: &quot;pending&quot; -&gt; &quot;complete&quot;</span><br><span class=\"line\">==&gt; Evaluation &quot;8095c3ec&quot; finished with status &quot;complete&quot;</span><br></pre></td></tr></table></figure>\n<p>输出中看到调度程序为其中一个客户机节点分配了两个任务，剩下的任务分配给第二个客户端。也可以使用nomad status命令查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos-linux nomad_cluster]# nomad job status</span><br><span class=\"line\">ID             Type     Priority  Status          Submit Date</span><br><span class=\"line\">example        service  50        running         2018-06-13T20:57:26+08:00</span><br><span class=\"line\">example-api-3  service  50        dead (stopped)  2018-06-12T23:16:09+08:00</span><br><span class=\"line\">example-api-4  service  50        running         2018-06-12T23:18:55+08:00</span><br><span class=\"line\">example-api-5  service  50        dead (stopped)  2018-06-12T23:36:26+08:00</span><br><span class=\"line\">example-api-6  service  50        dead (stopped)  2018-06-13T00:55:06+08:00</span><br><span class=\"line\">nginx          service  50        dead (stopped)  2018-06-10T00:04:52+08:00</span><br><span class=\"line\">[root@centos-linux nomad_cluster]# nomad job status example</span><br><span class=\"line\">ID            = example</span><br><span class=\"line\">Name          = example</span><br><span class=\"line\">Submit Date   = 2018-06-13T20:57:26+08:00</span><br><span class=\"line\">Type          = service</span><br><span class=\"line\">Priority      = 50</span><br><span class=\"line\">Datacenters   = dc1</span><br><span class=\"line\">Status        = running</span><br><span class=\"line\">Periodic      = false</span><br><span class=\"line\">Parameterized = false</span><br><span class=\"line\"></span><br><span class=\"line\">Summary</span><br><span class=\"line\">Task Group  Queued  Starting  Running  Failed  Complete  Lost</span><br><span class=\"line\">cache       0       0         3        0       3         0</span><br><span class=\"line\"></span><br><span class=\"line\">Latest Deployment</span><br><span class=\"line\">ID          = b44335b4</span><br><span class=\"line\">Status      = failed</span><br><span class=\"line\">Description = Failed due to unhealthy allocations</span><br><span class=\"line\"></span><br><span class=\"line\">Deployed</span><br><span class=\"line\">Task Group  Desired  Placed  Healthy  Unhealthy</span><br><span class=\"line\">cache       3        3       0        3</span><br><span class=\"line\"></span><br><span class=\"line\">Allocations</span><br><span class=\"line\">ID        Node ID   Task Group  Version  Desired  Status    Created        Modified</span><br><span class=\"line\">22e53fa4  1a9b1e3d  cache       2        run      running   3d7h from now  3d7h from now</span><br><span class=\"line\">2692e18b  1a9b1e3d  cache       2        run      running   3d7h from now  3d7h from now</span><br><span class=\"line\">7bc737e3  85be1fd0  cache       2        run      running   3d7h from now  3d7h from now</span><br></pre></td></tr></table></figure>\n<p>到此，我们已经成功搭建了nomad集群，并在集群上运行了简单地Job!</p>\n"},{"title":"CentOS7安装配置Nginx","date":"2018-04-15T10:08:07.000Z","catagory":["linux"],"_content":"\n\n#### 安装\n- 安装nginx依赖包\n```\nyum install openssl\nyum install zlib\nyum install pcre\n```\n- Nginx依赖项\n```\nrpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n```\n- 安装nginx\n```\nyum install nginx\n```\n- 启动nginx\n```\nservice start nginx\n或者\nsystemctl start nginx\n```\n#### 配置\n主配置文件：/etc/nginx/conf.d/nginx.conf   \n在主配置的include处可以修改自己的配置文件路径\n \n```js\n\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n    \n    #include /etc/nginx/conf.d/*.conf;  // 默认配置文件位置;\n    \n    include /root/nginx/conf/*.conf;  // 修改为自己的路径;\n}\n```\n\n","source":"_posts/CentOS7部署Nginx.md","raw":"---\ntitle: CentOS7安装配置Nginx\ndate: 2018-04-15 18:08:07\ntags: [nginx,linux,CentOS7]\ncatagory: [linux]\n---\n\n\n#### 安装\n- 安装nginx依赖包\n```\nyum install openssl\nyum install zlib\nyum install pcre\n```\n- Nginx依赖项\n```\nrpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n```\n- 安装nginx\n```\nyum install nginx\n```\n- 启动nginx\n```\nservice start nginx\n或者\nsystemctl start nginx\n```\n#### 配置\n主配置文件：/etc/nginx/conf.d/nginx.conf   \n在主配置的include处可以修改自己的配置文件路径\n \n```js\n\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n    \n    #include /etc/nginx/conf.d/*.conf;  // 默认配置文件位置;\n    \n    include /root/nginx/conf/*.conf;  // 修改为自己的路径;\n}\n```\n\n","slug":"CentOS7部署Nginx","published":1,"updated":"2018-04-14T10:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirlio500020i6t217r5x3h","content":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ul>\n<li><p>安装nginx依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install openssl</span><br><span class=\"line\">yum install zlib</span><br><span class=\"line\">yum install pcre</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Nginx依赖项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service start nginx</span><br><span class=\"line\">或者</span><br><span class=\"line\">systemctl start nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>主配置文件：/etc/nginx/conf.d/nginx.conf<br>在主配置的include处可以修改自己的配置文件路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /<span class=\"keyword\">var</span>/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /<span class=\"keyword\">var</span>/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  <span class=\"string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /<span class=\"keyword\">var</span>/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #include /etc/nginx/conf.d/*.conf;  // 默认配置文件位置;</span><br><span class=\"line\">    </span><br><span class=\"line\">    include /root/nginx/conf<span class=\"comment\">/*.conf;  // 修改为自己的路径;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ul>\n<li><p>安装nginx依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install openssl</span><br><span class=\"line\">yum install zlib</span><br><span class=\"line\">yum install pcre</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Nginx依赖项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service start nginx</span><br><span class=\"line\">或者</span><br><span class=\"line\">systemctl start nginx</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>主配置文件：/etc/nginx/conf.d/nginx.conf<br>在主配置的include处可以修改自己的配置文件路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">user  nginx;</span><br><span class=\"line\">worker_processes  <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /<span class=\"keyword\">var</span>/log/nginx/error.log warn;</span><br><span class=\"line\">pid        /<span class=\"keyword\">var</span>/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  <span class=\"string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /<span class=\"keyword\">var</span>/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    keepalive_timeout  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #include /etc/nginx/conf.d/*.conf;  // 默认配置文件位置;</span><br><span class=\"line\">    </span><br><span class=\"line\">    include /root/nginx/conf<span class=\"comment\">/*.conf;  // 修改为自己的路径;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"call()、apply()、bind()区别","date":"2018-02-24T07:22:35.000Z","_content":"#### 执行的环境this\nthis指向：this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的   \n\napply(),call(),bind()都是改变函数执行的环境（this）的，apply(),call()改变函数的this之后会立即执行函数，而bind()返回的是被修改this之后的新函数，在需要调用的时候去调用这个新函数，并且可以在执行的执行的时候去传递参数。\n\n\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb() //undefined\n```\n上面的代码之所以返回undefined是因为b在调用的时候是window.b(),this指向的是window，如果直接执行a.fn就会返回a里面的user\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\na.fn()  //danw\n```\n虽然这种方式可以正确的返回，但是有时间我们不得不将对象赋值给另一个变量，这时候就需要使用以下三种方法来改变this指向：\n#### call()\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.call(a)   //danw\n```\n通过call方法将b添加到a执行环境中去执行，所有this就会指向a   \ncall方法还可以传递多个参数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (p1,p2){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.call(a,1,2)   //danw\n```\n#### apply()\napply和call方法的效果一样，唯一不同的是在传递参数的时候是按照数组传递的。\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (p1,p2){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.apply(a,[1,2])   //danw\n```\n#### bind()\nbind()方法和apply(),call()方法一样会改变this指向，但是bind()方法不会立即去执行函数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.bind(a)\n```\n执行上面代码发现并没有打印出结果，是因为b.bind(a)会返回一个新的函数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nvar c = b.bind(a)   //返回新的函数c\nc() //danw      执行函数c,会返回danw\n```\n所以谁bind()可以让对应的函数想什么时候执行就什么时候执行   \nbind()也可以传递参数,并且可以在执行的时候再次追加参数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (p1,p2,p3){\n        console.log(p1,p2,p3)   //1,2,3\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nvar c = b.bind(a,1)   //返回新的函数c\nc(2,3) //danw      执行函数c,会返回danw\n```\n","source":"_posts/call()、apply()、bind()区别.md","raw":"---\ntitle: call()、apply()、bind()区别\ndate: 2018-02-24 15:22:35\ntags: [call(), apply(), bind()]\ncategory: [javascript]\n---\n#### 执行的环境this\nthis指向：this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的   \n\napply(),call(),bind()都是改变函数执行的环境（this）的，apply(),call()改变函数的this之后会立即执行函数，而bind()返回的是被修改this之后的新函数，在需要调用的时候去调用这个新函数，并且可以在执行的执行的时候去传递参数。\n\n\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb() //undefined\n```\n上面的代码之所以返回undefined是因为b在调用的时候是window.b(),this指向的是window，如果直接执行a.fn就会返回a里面的user\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\na.fn()  //danw\n```\n虽然这种方式可以正确的返回，但是有时间我们不得不将对象赋值给另一个变量，这时候就需要使用以下三种方法来改变this指向：\n#### call()\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.call(a)   //danw\n```\n通过call方法将b添加到a执行环境中去执行，所有this就会指向a   \ncall方法还可以传递多个参数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (p1,p2){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.call(a,1,2)   //danw\n```\n#### apply()\napply和call方法的效果一样，唯一不同的是在传递参数的时候是按照数组传递的。\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (p1,p2){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.apply(a,[1,2])   //danw\n```\n#### bind()\nbind()方法和apply(),call()方法一样会改变this指向，但是bind()方法不会立即去执行函数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.bind(a)\n```\n执行上面代码发现并没有打印出结果，是因为b.bind(a)会返回一个新的函数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nvar c = b.bind(a)   //返回新的函数c\nc() //danw      执行函数c,会返回danw\n```\n所以谁bind()可以让对应的函数想什么时候执行就什么时候执行   \nbind()也可以传递参数,并且可以在执行的时候再次追加参数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (p1,p2,p3){\n        console.log(p1,p2,p3)   //1,2,3\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nvar c = b.bind(a,1)   //返回新的函数c\nc(2,3) //danw      执行函数c,会返回danw\n```\n","slug":"call()、apply()、bind()区别","published":1,"updated":"2018-04-07T06:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirlioe00060i6tmyiw8nvj","content":"<h4 id=\"执行的环境this\"><a href=\"#执行的环境this\" class=\"headerlink\" title=\"执行的环境this\"></a>执行的环境this</h4><p>this指向：this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的   </p>\n<p>apply(),call(),bind()都是改变函数执行的环境（this）的，apply(),call()改变函数的this之后会立即执行函数，而bind()返回的是被修改this之后的新函数，在需要调用的时候去调用这个新函数，并且可以在执行的执行的时候去传递参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b() <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码之所以返回undefined是因为b在调用的时候是window.b(),this指向的是window，如果直接执行a.fn就会返回a里面的user<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.fn()  <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure></p>\n<p>虽然这种方式可以正确的返回，但是有时间我们不得不将对象赋值给另一个变量，这时候就需要使用以下三种方法来改变this指向：</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.call(a)   <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure>\n<p>通过call方法将b添加到a执行环境中去执行，所有this就会指向a<br>call方法还可以传递多个参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1,p2</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.call(a,<span class=\"number\">1</span>,<span class=\"number\">2</span>)   <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h4><p>apply和call方法的效果一样，唯一不同的是在传递参数的时候是按照数组传递的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1,p2</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.apply(a,[<span class=\"number\">1</span>,<span class=\"number\">2</span>])   <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h4><p>bind()方法和apply(),call()方法一样会改变this指向，但是bind()方法不会立即去执行函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.bind(a)</span><br></pre></td></tr></table></figure></p>\n<p>执行上面代码发现并没有打印出结果，是因为b.bind(a)会返回一个新的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = b.bind(a)   <span class=\"comment\">//返回新的函数c</span></span><br><span class=\"line\">c() <span class=\"comment\">//danw      执行函数c,会返回danw</span></span><br></pre></td></tr></table></figure></p>\n<p>所以谁bind()可以让对应的函数想什么时候执行就什么时候执行<br>bind()也可以传递参数,并且可以在执行的时候再次追加参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1,p2,p3</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(p1,p2,p3)   <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = b.bind(a,<span class=\"number\">1</span>)   <span class=\"comment\">//返回新的函数c</span></span><br><span class=\"line\">c(<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">//danw      执行函数c,会返回danw</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h4 id=\"执行的环境this\"><a href=\"#执行的环境this\" class=\"headerlink\" title=\"执行的环境this\"></a>执行的环境this</h4><p>this指向：this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的   </p>\n<p>apply(),call(),bind()都是改变函数执行的环境（this）的，apply(),call()改变函数的this之后会立即执行函数，而bind()返回的是被修改this之后的新函数，在需要调用的时候去调用这个新函数，并且可以在执行的执行的时候去传递参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b() <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码之所以返回undefined是因为b在调用的时候是window.b(),this指向的是window，如果直接执行a.fn就会返回a里面的user<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.fn()  <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure></p>\n<p>虽然这种方式可以正确的返回，但是有时间我们不得不将对象赋值给另一个变量，这时候就需要使用以下三种方法来改变this指向：</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.call(a)   <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure>\n<p>通过call方法将b添加到a执行环境中去执行，所有this就会指向a<br>call方法还可以传递多个参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1,p2</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.call(a,<span class=\"number\">1</span>,<span class=\"number\">2</span>)   <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h4><p>apply和call方法的效果一样，唯一不同的是在传递参数的时候是按照数组传递的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1,p2</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.apply(a,[<span class=\"number\">1</span>,<span class=\"number\">2</span>])   <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h4><p>bind()方法和apply(),call()方法一样会改变this指向，但是bind()方法不会立即去执行函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.bind(a)</span><br></pre></td></tr></table></figure></p>\n<p>执行上面代码发现并没有打印出结果，是因为b.bind(a)会返回一个新的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = b.bind(a)   <span class=\"comment\">//返回新的函数c</span></span><br><span class=\"line\">c() <span class=\"comment\">//danw      执行函数c,会返回danw</span></span><br></pre></td></tr></table></figure></p>\n<p>所以谁bind()可以让对应的函数想什么时候执行就什么时候执行<br>bind()也可以传递参数,并且可以在执行的时候再次追加参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1,p2,p3</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(p1,p2,p3)   <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = b.bind(a,<span class=\"number\">1</span>)   <span class=\"comment\">//返回新的函数c</span></span><br><span class=\"line\">c(<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">//danw      执行函数c,会返回danw</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"Linux环境下安装node","date":"2018-04-14T03:39:09.000Z","_content":"#### 下载\n```\nwget https://npm.taobao.org/mirrors/node/v8.9.3/node-v8.9.3-linux-x64.tar.xz\n```\n#### 解压\n解压后的文件需要保留，压缩文件可以删除\n```\ntar -xzvf node-v8.9.3-linux-x64.tar.gz\n```\n#### 创建软连接\n```\nln -s /node-v8.9.3-linux-x64/bin/node /usr/local/bin/node\nln -s /node-v8.9.3-linux-x64/bin/npm/usr/local/bin/npm\n```\n#### 测试安装是否成功\n```\nnode -v  出现版本号即安装成功\nnpm -v   出现版本号即安装成功\n```\n\nok!\n","source":"_posts/Linux环境下安装node.md","raw":"---\ntitle: Linux环境下安装node\ndate: 2018-04-14 11:39:09\ntags: [node,linux]\ncategory: [node]\n---\n#### 下载\n```\nwget https://npm.taobao.org/mirrors/node/v8.9.3/node-v8.9.3-linux-x64.tar.xz\n```\n#### 解压\n解压后的文件需要保留，压缩文件可以删除\n```\ntar -xzvf node-v8.9.3-linux-x64.tar.gz\n```\n#### 创建软连接\n```\nln -s /node-v8.9.3-linux-x64/bin/node /usr/local/bin/node\nln -s /node-v8.9.3-linux-x64/bin/npm/usr/local/bin/npm\n```\n#### 测试安装是否成功\n```\nnode -v  出现版本号即安装成功\nnpm -v   出现版本号即安装成功\n```\n\nok!\n","slug":"Linux环境下安装node","published":1,"updated":"2018-04-14T03:40:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirliol00080i6t5v3e24ri","content":"<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://npm.taobao.org/mirrors/node/v8.9.3/node-v8.9.3-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<h4 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h4><p>解压后的文件需要保留，压缩文件可以删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf node-v8.9.3-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"创建软连接\"><a href=\"#创建软连接\" class=\"headerlink\" title=\"创建软连接\"></a>创建软连接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /node-v8.9.3-linux-x64/bin/node /usr/local/bin/node</span><br><span class=\"line\">ln -s /node-v8.9.3-linux-x64/bin/npm/usr/local/bin/npm</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试安装是否成功\"><a href=\"#测试安装是否成功\" class=\"headerlink\" title=\"测试安装是否成功\"></a>测试安装是否成功</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v  出现版本号即安装成功</span><br><span class=\"line\">npm -v   出现版本号即安装成功</span><br></pre></td></tr></table></figure>\n<p>ok!</p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://npm.taobao.org/mirrors/node/v8.9.3/node-v8.9.3-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<h4 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h4><p>解压后的文件需要保留，压缩文件可以删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf node-v8.9.3-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"创建软连接\"><a href=\"#创建软连接\" class=\"headerlink\" title=\"创建软连接\"></a>创建软连接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /node-v8.9.3-linux-x64/bin/node /usr/local/bin/node</span><br><span class=\"line\">ln -s /node-v8.9.3-linux-x64/bin/npm/usr/local/bin/npm</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试安装是否成功\"><a href=\"#测试安装是否成功\" class=\"headerlink\" title=\"测试安装是否成功\"></a>测试安装是否成功</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v  出现版本号即安装成功</span><br><span class=\"line\">npm -v   出现版本号即安装成功</span><br></pre></td></tr></table></figure>\n<p>ok!</p>\n"},{"title":"es6基础","date":"2018-02-26T02:31:14.000Z","_content":"####  let命令\n\nlet有块级作用域，let声明的变量只在它所在的代码块有效\n\nvar有变量提升现象，let没有变量提升\n\nlet暂时性死区 \n```javascript\nvar tmp = 123;\n\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n\n```\nES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错\nlet不允许重复声明\n一道面试题：\n```javascript\nvar funcs = []\nfor (var i = 0; i < 10; i++) {\n    funcs.push(function() { console.log(i) })\n}\nfuncs.forEach(function(func) {\n    func()\n})\n```\n以上代码会输出10次数组10，如果想要输出0-9，两种解决方案：\n```javascript\n    // ES5告诉我们可以利用闭包解决这个问题\n    var funcs = []\n    for (var i = 0; i < 10; i++) {\n        func.push((function(value) {\n            return function() {\n                console.log(value)\n            }\n        }(i)))\n    }\n    // es6\n    for (let i = 0; i < 10; i++) {\n        func.push(function() {\n            console.log(i)\n        })\n    }\n```\n\n#### 模板字符串\n\n字符串拼接\n\n```javascript\n//es5 \nvar name = 'lux'\nconsole.log('hello' + name)\n//es6\nconst name = 'lux'\nconsole.log(`hello ${name}`) //hello lux\n```\nes6提供的常用的字符串方法\n\n```javascript\n// includes：判断是否包含然后直接返回布尔值\nlet str = 'hahay'\nconsole.log(str.includes('y')) // true\n\n// repeat: 获取字符串重复n次\nlet s = 'he'\nconsole.log(s.repeat(3)) // 'hehehe'\n```\n\n#### 函数\n默认参数\n```javascript\n//es5设置参数默认值\n//这种方式如果num=0就会出现num的值被默认200覆盖\n    function action(num) {\n        num = num || 200\n        //当传入num时，num为传入的值\n        //当没传入参数时，num即有了默认值200\n        return num\n    }\n//es6设置默认参数\n    function action(num = 200) {\n        console.log(num)\n    }\n    action() //200\n    action(300) //300\n```\n箭头函数\n> 三个特点:   \n1. 不需要function关键字来创建函数  \n2. 省略return关键字 \n3. 继承当前上下文的 this 关键字\n  \n```javascript\n//例如：\n    [1,2,3].map( x => x + 1 )\n    \n//等同于：\n    [1,2,3].map((function(x){\n        return x + 1\n    }).bind(this))\n```\n\n#### 拓展的对象功能\n对象初始化简写\n```javascript\nlet name = 'danw'\nlet age = 27\nvar d = {name:name,age:age}\n\n//以上代码es6可以简写为：\nlet name = 'danw'\nlet age = 27\nvar d = {name,age}\n```\n对象初始化中方法赋值的简写\n```javascript\nconst people = {\n    name: 'lux',\n    getName: function() {\n        console.log(this.name)\n    }\n}\n//以上代码简写如下：\nconst people = {\n    name: 'lux',\n    getName () {\n        console.log(this.name)\n    }\n}\n```\nObject.assign()实现对象浅复制\n```javascript\nvar objA = {a：1,b:2}\nconst obj = Object.assign({}, objA)\nobj.c = 3\nconsole.log(obj) //{a：1,b:2,c:3}\nconsole.log(objA) //{a：1,b:2}  objA的值不会被改变\n```\n\n#### 更方便的数据访问--解构\n```javascript\nconst people = {\n    name: 'lux',\n    age: 20\n}\nconst name = people.name\nconst age = people.age\nconsole.log(name + ' --- ' + age)\n\n//对象解构取值\nconst {name,age} = people\n//数组结构取值\nconst color = ['red', 'blue']\nconst [first, second] = color\n```\n\n#### Spread Operator 展开运算符（...）\n```javascript\n//数组\nconst color = ['red', 'yellow']\nconst colorful = [...color, 'green', 'pink']\nconsole.log(colorful) //[red, yellow, green, pink]\n\n//对象\nconst alp = { fist: 'a', second: 'b'}\nconst alphabets = { ...alp, third: 'c' }\nconsole.log(alphabets) //{ \"fist\": \"a\", \"second\": \"b\", \"third\": \"c\"\n\n```\n\n#### import 和 export\n用法总结\n- 当用export default people导出时，就用 import people 导入（不带大括号）\n- 一个文件里，有且只能有一个export default。但可以有多个export。\n- 当用export name 时，就用import { name }导入（记得带上大括号）\n- 当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } \n- 当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example\n\n#### Promise\n思考题\n```javascript\nsetTimeout(function() {\n      console.log(1)\n    }, 0);\n    new Promise(function executor(resolve) {\n      console.log(2);\n      for( var i=0 ; i<10000 ; i++ ) {\n        i == 9999 && resolve();\n      }\n      console.log(3);\n    }).then(function() {\n      console.log(4);\n    });\n    console.log(5);\n//输出：2 3 5 4 1\n\n```\n> 类似面试题：https://zhuanlan.zhihu.com/p/25407758\n","source":"_posts/es6基础.md","raw":"---\ntitle: es6基础\ndate: 2018-02-26 10:31:14\ntags: [es6]\ncategory: [javascript]\n---\n####  let命令\n\nlet有块级作用域，let声明的变量只在它所在的代码块有效\n\nvar有变量提升现象，let没有变量提升\n\nlet暂时性死区 \n```javascript\nvar tmp = 123;\n\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n\n```\nES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错\nlet不允许重复声明\n一道面试题：\n```javascript\nvar funcs = []\nfor (var i = 0; i < 10; i++) {\n    funcs.push(function() { console.log(i) })\n}\nfuncs.forEach(function(func) {\n    func()\n})\n```\n以上代码会输出10次数组10，如果想要输出0-9，两种解决方案：\n```javascript\n    // ES5告诉我们可以利用闭包解决这个问题\n    var funcs = []\n    for (var i = 0; i < 10; i++) {\n        func.push((function(value) {\n            return function() {\n                console.log(value)\n            }\n        }(i)))\n    }\n    // es6\n    for (let i = 0; i < 10; i++) {\n        func.push(function() {\n            console.log(i)\n        })\n    }\n```\n\n#### 模板字符串\n\n字符串拼接\n\n```javascript\n//es5 \nvar name = 'lux'\nconsole.log('hello' + name)\n//es6\nconst name = 'lux'\nconsole.log(`hello ${name}`) //hello lux\n```\nes6提供的常用的字符串方法\n\n```javascript\n// includes：判断是否包含然后直接返回布尔值\nlet str = 'hahay'\nconsole.log(str.includes('y')) // true\n\n// repeat: 获取字符串重复n次\nlet s = 'he'\nconsole.log(s.repeat(3)) // 'hehehe'\n```\n\n#### 函数\n默认参数\n```javascript\n//es5设置参数默认值\n//这种方式如果num=0就会出现num的值被默认200覆盖\n    function action(num) {\n        num = num || 200\n        //当传入num时，num为传入的值\n        //当没传入参数时，num即有了默认值200\n        return num\n    }\n//es6设置默认参数\n    function action(num = 200) {\n        console.log(num)\n    }\n    action() //200\n    action(300) //300\n```\n箭头函数\n> 三个特点:   \n1. 不需要function关键字来创建函数  \n2. 省略return关键字 \n3. 继承当前上下文的 this 关键字\n  \n```javascript\n//例如：\n    [1,2,3].map( x => x + 1 )\n    \n//等同于：\n    [1,2,3].map((function(x){\n        return x + 1\n    }).bind(this))\n```\n\n#### 拓展的对象功能\n对象初始化简写\n```javascript\nlet name = 'danw'\nlet age = 27\nvar d = {name:name,age:age}\n\n//以上代码es6可以简写为：\nlet name = 'danw'\nlet age = 27\nvar d = {name,age}\n```\n对象初始化中方法赋值的简写\n```javascript\nconst people = {\n    name: 'lux',\n    getName: function() {\n        console.log(this.name)\n    }\n}\n//以上代码简写如下：\nconst people = {\n    name: 'lux',\n    getName () {\n        console.log(this.name)\n    }\n}\n```\nObject.assign()实现对象浅复制\n```javascript\nvar objA = {a：1,b:2}\nconst obj = Object.assign({}, objA)\nobj.c = 3\nconsole.log(obj) //{a：1,b:2,c:3}\nconsole.log(objA) //{a：1,b:2}  objA的值不会被改变\n```\n\n#### 更方便的数据访问--解构\n```javascript\nconst people = {\n    name: 'lux',\n    age: 20\n}\nconst name = people.name\nconst age = people.age\nconsole.log(name + ' --- ' + age)\n\n//对象解构取值\nconst {name,age} = people\n//数组结构取值\nconst color = ['red', 'blue']\nconst [first, second] = color\n```\n\n#### Spread Operator 展开运算符（...）\n```javascript\n//数组\nconst color = ['red', 'yellow']\nconst colorful = [...color, 'green', 'pink']\nconsole.log(colorful) //[red, yellow, green, pink]\n\n//对象\nconst alp = { fist: 'a', second: 'b'}\nconst alphabets = { ...alp, third: 'c' }\nconsole.log(alphabets) //{ \"fist\": \"a\", \"second\": \"b\", \"third\": \"c\"\n\n```\n\n#### import 和 export\n用法总结\n- 当用export default people导出时，就用 import people 导入（不带大括号）\n- 一个文件里，有且只能有一个export default。但可以有多个export。\n- 当用export name 时，就用import { name }导入（记得带上大括号）\n- 当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } \n- 当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example\n\n#### Promise\n思考题\n```javascript\nsetTimeout(function() {\n      console.log(1)\n    }, 0);\n    new Promise(function executor(resolve) {\n      console.log(2);\n      for( var i=0 ; i<10000 ; i++ ) {\n        i == 9999 && resolve();\n      }\n      console.log(3);\n    }).then(function() {\n      console.log(4);\n    });\n    console.log(5);\n//输出：2 3 5 4 1\n\n```\n> 类似面试题：https://zhuanlan.zhihu.com/p/25407758\n","slug":"es6基础","published":1,"updated":"2018-04-07T06:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirliom00090i6tgncnz2bl","content":"<h4 id=\"let命令\"><a href=\"#let命令\" class=\"headerlink\" title=\"let命令\"></a>let命令</h4><p>let有块级作用域，let声明的变量只在它所在的代码块有效</p>\n<p>var有变量提升现象，let没有变量提升</p>\n<p>let暂时性死区<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错<br>let不允许重复声明<br>一道面试题：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> funcs = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    funcs.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i) &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funcs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">    func()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码会输出10次数组10，如果想要输出0-9，两种解决方案：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5告诉我们可以利用闭包解决这个问题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> funcs = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    func.push((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;(i)))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    func.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><p>字符串拼接</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es5 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'lux'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span> + name)</span><br><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'lux'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>) <span class=\"comment\">//hello lux</span></span><br></pre></td></tr></table></figure>\n<p>es6提供的常用的字符串方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// includes：判断是否包含然后直接返回布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'hahay'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">'y'</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// repeat: 获取字符串重复n次</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'he'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.repeat(<span class=\"number\">3</span>)) <span class=\"comment\">// 'hehehe'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p>默认参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es5设置参数默认值</span></span><br><span class=\"line\"><span class=\"comment\">//这种方式如果num=0就会出现num的值被默认200覆盖</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">        num = num || <span class=\"number\">200</span></span><br><span class=\"line\">        <span class=\"comment\">//当传入num时，num为传入的值</span></span><br><span class=\"line\">        <span class=\"comment\">//当没传入参数时，num即有了默认值200</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//es6设置默认参数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action</span>(<span class=\"params\">num = <span class=\"number\">200</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    action() <span class=\"comment\">//200</span></span><br><span class=\"line\">    action(<span class=\"number\">300</span>) <span class=\"comment\">//300</span></span><br></pre></td></tr></table></figure></p>\n<p>箭头函数</p>\n<blockquote>\n<p>三个特点:   </p>\n<ol>\n<li>不需要function关键字来创建函数  </li>\n<li>省略return关键字 </li>\n<li>继承当前上下文的 this 关键字</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//例如：</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map( <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span> )</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//等同于：</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;).bind(<span class=\"keyword\">this</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"拓展的对象功能\"><a href=\"#拓展的对象功能\" class=\"headerlink\" title=\"拓展的对象功能\"></a>拓展的对象功能</h4><p>对象初始化简写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'danw'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = &#123;<span class=\"attr\">name</span>:name,<span class=\"attr\">age</span>:age&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以上代码es6可以简写为：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'danw'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = &#123;name,age&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对象初始化中方法赋值的简写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lux'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上代码简写如下：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lux'</span>,</span><br><span class=\"line\">    getName () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Object.assign()实现对象浅复制<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;a：<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, objA)</span><br><span class=\"line\">obj.c = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//&#123;a：1,b:2,c:3&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objA) <span class=\"comment\">//&#123;a：1,b:2&#125;  objA的值不会被改变</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"更方便的数据访问–解构\"><a href=\"#更方便的数据访问–解构\" class=\"headerlink\" title=\"更方便的数据访问–解构\"></a>更方便的数据访问–解构</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lux'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = people.name</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = people.age</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name + <span class=\"string\">' --- '</span> + age)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象解构取值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name,age&#125; = people</span><br><span class=\"line\"><span class=\"comment\">//数组结构取值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> color = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, second] = color</span><br></pre></td></tr></table></figure>\n<h4 id=\"Spread-Operator-展开运算符（…）\"><a href=\"#Spread-Operator-展开运算符（…）\" class=\"headerlink\" title=\"Spread Operator 展开运算符（…）\"></a>Spread Operator 展开运算符（…）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> color = [<span class=\"string\">'red'</span>, <span class=\"string\">'yellow'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> colorful = [...color, <span class=\"string\">'green'</span>, <span class=\"string\">'pink'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(colorful) <span class=\"comment\">//[red, yellow, green, pink]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> alp = &#123; <span class=\"attr\">fist</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">second</span>: <span class=\"string\">'b'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> alphabets = &#123; ...alp, <span class=\"attr\">third</span>: <span class=\"string\">'c'</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(alphabets) <span class=\"comment\">//&#123; \"fist\": \"a\", \"second\": \"b\", \"third\": \"c\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"import-和-export\"><a href=\"#import-和-export\" class=\"headerlink\" title=\"import 和 export\"></a>import 和 export</h4><p>用法总结</p>\n<ul>\n<li>当用export default people导出时，就用 import people 导入（不带大括号）</li>\n<li>一个文件里，有且只能有一个export default。但可以有多个export。</li>\n<li>当用export name 时，就用import { name }导入（记得带上大括号）</li>\n<li>当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } </li>\n<li>当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example</li>\n</ul>\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><p>思考题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span> ; i&lt;<span class=\"number\">10000</span> ; i++ ) &#123;</span><br><span class=\"line\">        i == <span class=\"number\">9999</span> &amp;&amp; resolve();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出：2 3 5 4 1</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>类似面试题：<a href=\"https://zhuanlan.zhihu.com/p/25407758\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/25407758</a></p>\n</blockquote>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h4 id=\"let命令\"><a href=\"#let命令\" class=\"headerlink\" title=\"let命令\"></a>let命令</h4><p>let有块级作用域，let声明的变量只在它所在的代码块有效</p>\n<p>var有变量提升现象，let没有变量提升</p>\n<p>let暂时性死区<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错<br>let不允许重复声明<br>一道面试题：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> funcs = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    funcs.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i) &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funcs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">    func()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码会输出10次数组10，如果想要输出0-9，两种解决方案：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5告诉我们可以利用闭包解决这个问题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> funcs = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    func.push((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;(i)))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    func.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><p>字符串拼接</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es5 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'lux'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span> + name)</span><br><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'lux'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>) <span class=\"comment\">//hello lux</span></span><br></pre></td></tr></table></figure>\n<p>es6提供的常用的字符串方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// includes：判断是否包含然后直接返回布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'hahay'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">'y'</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// repeat: 获取字符串重复n次</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'he'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.repeat(<span class=\"number\">3</span>)) <span class=\"comment\">// 'hehehe'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p>默认参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es5设置参数默认值</span></span><br><span class=\"line\"><span class=\"comment\">//这种方式如果num=0就会出现num的值被默认200覆盖</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">        num = num || <span class=\"number\">200</span></span><br><span class=\"line\">        <span class=\"comment\">//当传入num时，num为传入的值</span></span><br><span class=\"line\">        <span class=\"comment\">//当没传入参数时，num即有了默认值200</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//es6设置默认参数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action</span>(<span class=\"params\">num = <span class=\"number\">200</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    action() <span class=\"comment\">//200</span></span><br><span class=\"line\">    action(<span class=\"number\">300</span>) <span class=\"comment\">//300</span></span><br></pre></td></tr></table></figure></p>\n<p>箭头函数</p>\n<blockquote>\n<p>三个特点:   </p>\n<ol>\n<li>不需要function关键字来创建函数  </li>\n<li>省略return关键字 </li>\n<li>继承当前上下文的 this 关键字</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//例如：</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map( <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span> )</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//等同于：</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;).bind(<span class=\"keyword\">this</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"拓展的对象功能\"><a href=\"#拓展的对象功能\" class=\"headerlink\" title=\"拓展的对象功能\"></a>拓展的对象功能</h4><p>对象初始化简写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'danw'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = &#123;<span class=\"attr\">name</span>:name,<span class=\"attr\">age</span>:age&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以上代码es6可以简写为：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'danw'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = &#123;name,age&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对象初始化中方法赋值的简写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lux'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上代码简写如下：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lux'</span>,</span><br><span class=\"line\">    getName () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Object.assign()实现对象浅复制<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;a：<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, objA)</span><br><span class=\"line\">obj.c = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//&#123;a：1,b:2,c:3&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objA) <span class=\"comment\">//&#123;a：1,b:2&#125;  objA的值不会被改变</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"更方便的数据访问–解构\"><a href=\"#更方便的数据访问–解构\" class=\"headerlink\" title=\"更方便的数据访问–解构\"></a>更方便的数据访问–解构</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lux'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = people.name</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = people.age</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name + <span class=\"string\">' --- '</span> + age)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象解构取值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name,age&#125; = people</span><br><span class=\"line\"><span class=\"comment\">//数组结构取值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> color = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, second] = color</span><br></pre></td></tr></table></figure>\n<h4 id=\"Spread-Operator-展开运算符（…）\"><a href=\"#Spread-Operator-展开运算符（…）\" class=\"headerlink\" title=\"Spread Operator 展开运算符（…）\"></a>Spread Operator 展开运算符（…）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> color = [<span class=\"string\">'red'</span>, <span class=\"string\">'yellow'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> colorful = [...color, <span class=\"string\">'green'</span>, <span class=\"string\">'pink'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(colorful) <span class=\"comment\">//[red, yellow, green, pink]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> alp = &#123; <span class=\"attr\">fist</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">second</span>: <span class=\"string\">'b'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> alphabets = &#123; ...alp, <span class=\"attr\">third</span>: <span class=\"string\">'c'</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(alphabets) <span class=\"comment\">//&#123; \"fist\": \"a\", \"second\": \"b\", \"third\": \"c\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"import-和-export\"><a href=\"#import-和-export\" class=\"headerlink\" title=\"import 和 export\"></a>import 和 export</h4><p>用法总结</p>\n<ul>\n<li>当用export default people导出时，就用 import people 导入（不带大括号）</li>\n<li>一个文件里，有且只能有一个export default。但可以有多个export。</li>\n<li>当用export name 时，就用import { name }导入（记得带上大括号）</li>\n<li>当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } </li>\n<li>当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example</li>\n</ul>\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><p>思考题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span> ; i&lt;<span class=\"number\">10000</span> ; i++ ) &#123;</span><br><span class=\"line\">        i == <span class=\"number\">9999</span> &amp;&amp; resolve();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出：2 3 5 4 1</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>类似面试题：<a href=\"https://zhuanlan.zhihu.com/p/25407758\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/25407758</a></p>\n</blockquote>\n"},{"title":"javascript的GC理解","date":"2018-02-24T08:07:36.000Z","_content":"js会将我们使用不到的变量销毁，怎么判断哪些变量是不会再使用的\n* 全局变量是不会被销毁的，因为我们随时都可能会用到这个变量，所以不能被销毁。\n* 函数内部的变量再函数执行完之后就会被销毁，但是如果这个函数有被外部的变量引用就不会销毁\n```javascript\nfunction a(){\n    var b = 0;\n    return function(){\n        b ++;\n        console.log(b);\n    }\n}\nvar d = a();\nd();//1\nd();//2\n```\n","source":"_posts/javascript的GC理解.md","raw":"---\ntitle: javascript的GC理解\ndate: 2018-02-24 16:07:36\ntags: [垃圾回收]\ncategory: [javascript]\n---\njs会将我们使用不到的变量销毁，怎么判断哪些变量是不会再使用的\n* 全局变量是不会被销毁的，因为我们随时都可能会用到这个变量，所以不能被销毁。\n* 函数内部的变量再函数执行完之后就会被销毁，但是如果这个函数有被外部的变量引用就不会销毁\n```javascript\nfunction a(){\n    var b = 0;\n    return function(){\n        b ++;\n        console.log(b);\n    }\n}\nvar d = a();\nd();//1\nd();//2\n```\n","slug":"javascript的GC理解","published":1,"updated":"2018-04-07T06:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirliop000c0i6tb5ae7jm5","content":"<p>js会将我们使用不到的变量销毁，怎么判断哪些变量是不会再使用的</p>\n<ul>\n<li>全局变量是不会被销毁的，因为我们随时都可能会用到这个变量，所以不能被销毁。</li>\n<li>函数内部的变量再函数执行完之后就会被销毁，但是如果这个函数有被外部的变量引用就不会销毁<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        b ++;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = a();</span><br><span class=\"line\">d();<span class=\"comment\">//1</span></span><br><span class=\"line\">d();<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>js会将我们使用不到的变量销毁，怎么判断哪些变量是不会再使用的</p>\n<ul>\n<li>全局变量是不会被销毁的，因为我们随时都可能会用到这个变量，所以不能被销毁。</li>\n<li>函数内部的变量再函数执行完之后就会被销毁，但是如果这个函数有被外部的变量引用就不会销毁<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        b ++;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = a();</span><br><span class=\"line\">d();<span class=\"comment\">//1</span></span><br><span class=\"line\">d();<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"javascript的变量函数提升总结","date":"2018-03-01T02:28:56.000Z","_content":"\n首先对比三段代码：\n```javascript\nvar v='Hello World';\nalert(v); //Hello World\n```\n```javascript\nvar v='Hello World';\n(function(){\n    alert(v);\n})()//Hello World\n```\n```javascript\nvar v='Hello World';\n(function(){\n    alert(v);\n    var v='I love you';\n})()//undefined\n```\n#### javascript作用域\nJavaScript是函数级作用域(function-level scope)，并没有块级作用域,因此在代码块中并不会创建一个新的作用域。只有函数才会创建新的作用域，这样块里面的变量会影响到外部作用域，比如if语句：\n```javascript\nvar x = 1;\nconsole.log(x); // 1\nif (true) {\n   var x = 2;\n   console.log(x); //2\n}\n console.log(x);// 2\n```\n解决方案：\n在函数中创建一个临时的作用域，请像下面这样做\n```javascript\nfunction foo() {\n    var x = 1;\n    if (x) {\n        (function () {\n            var x = 2;\n            // some other code\n        }());\n    }\n    // x is still 1.\n}\n\n```\n#### 变量提升\n变量提升 **_只是提升变量的声明，并不会把赋值也提升上来_**。\n我们定义三个变量：\n\n```javascript\n(function(){\n    var a='One';\n    var b='Two';\n    var c='Three';\n})()\n```\n实际上它是这样子的：\n```javascript\n(function(){\n    var a,b,c;\n    a='One';\n    b='Two';\n    c='Three';\n})()\n```\n####  函数提升\njs中函数的定义有两种，函数声明方式和函数表达式方式，需要注意的是**_只有函数声明会被提升_**\n\n函数声明方式提升【成功】\n\n```javascript\nfunction myTest(){\n    foo();\n    function foo(){\n        alert(\"我来自 foo\");\n    }\n}\nmyTest();\n```\n函数表达式方式提升【失败】\n\n```javascript\nfunction myTest(){\n    foo();\n    var foo =function foo(){\n        alert(\"我来自 foo\");\n    }\n}\nmyTest();\n```\n原文：http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html","source":"_posts/javascript的变量函数提升总结.md","raw":"---\ntitle: javascript的变量函数提升总结\ndate: 2018-03-01 10:28:56\ntags: [变量函数提升]\ncategory: [javascript]\n---\n\n首先对比三段代码：\n```javascript\nvar v='Hello World';\nalert(v); //Hello World\n```\n```javascript\nvar v='Hello World';\n(function(){\n    alert(v);\n})()//Hello World\n```\n```javascript\nvar v='Hello World';\n(function(){\n    alert(v);\n    var v='I love you';\n})()//undefined\n```\n#### javascript作用域\nJavaScript是函数级作用域(function-level scope)，并没有块级作用域,因此在代码块中并不会创建一个新的作用域。只有函数才会创建新的作用域，这样块里面的变量会影响到外部作用域，比如if语句：\n```javascript\nvar x = 1;\nconsole.log(x); // 1\nif (true) {\n   var x = 2;\n   console.log(x); //2\n}\n console.log(x);// 2\n```\n解决方案：\n在函数中创建一个临时的作用域，请像下面这样做\n```javascript\nfunction foo() {\n    var x = 1;\n    if (x) {\n        (function () {\n            var x = 2;\n            // some other code\n        }());\n    }\n    // x is still 1.\n}\n\n```\n#### 变量提升\n变量提升 **_只是提升变量的声明，并不会把赋值也提升上来_**。\n我们定义三个变量：\n\n```javascript\n(function(){\n    var a='One';\n    var b='Two';\n    var c='Three';\n})()\n```\n实际上它是这样子的：\n```javascript\n(function(){\n    var a,b,c;\n    a='One';\n    b='Two';\n    c='Three';\n})()\n```\n####  函数提升\njs中函数的定义有两种，函数声明方式和函数表达式方式，需要注意的是**_只有函数声明会被提升_**\n\n函数声明方式提升【成功】\n\n```javascript\nfunction myTest(){\n    foo();\n    function foo(){\n        alert(\"我来自 foo\");\n    }\n}\nmyTest();\n```\n函数表达式方式提升【失败】\n\n```javascript\nfunction myTest(){\n    foo();\n    var foo =function foo(){\n        alert(\"我来自 foo\");\n    }\n}\nmyTest();\n```\n原文：http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html","slug":"javascript的变量函数提升总结","published":1,"updated":"2018-04-07T06:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirlior000d0i6taiq6eway","content":"<p>首先对比三段代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">alert(v); <span class=\"comment\">//Hello World</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(v);</span><br><span class=\"line\">&#125;)()<span class=\"comment\">//Hello World</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(v);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> v=<span class=\"string\">'I love you'</span>;</span><br><span class=\"line\">&#125;)()<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"javascript作用域\"><a href=\"#javascript作用域\" class=\"headerlink\" title=\"javascript作用域\"></a>javascript作用域</h4><p>JavaScript是函数级作用域(function-level scope)，并没有块级作用域,因此在代码块中并不会创建一个新的作用域。只有函数才会创建新的作用域，这样块里面的变量会影响到外部作用域，比如if语句：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(x);<span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>解决方案：<br>在函数中创建一个临时的作用域，请像下面这样做<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x) &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">// some other code</span></span><br><span class=\"line\">        &#125;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// x is still 1.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h4><p>变量提升 <strong><em>只是提升变量的声明，并不会把赋值也提升上来</em></strong>。<br>我们定义三个变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a=<span class=\"string\">'One'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b=<span class=\"string\">'Two'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c=<span class=\"string\">'Three'</span>;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>实际上它是这样子的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a,b,c;</span><br><span class=\"line\">    a=<span class=\"string\">'One'</span>;</span><br><span class=\"line\">    b=<span class=\"string\">'Two'</span>;</span><br><span class=\"line\">    c=<span class=\"string\">'Three'</span>;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h4><p>js中函数的定义有两种，函数声明方式和函数表达式方式，需要注意的是<strong><em>只有函数声明会被提升</em></strong></p>\n<p>函数声明方式提升【成功】</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTest</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    foo();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"我来自 foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myTest();</span><br></pre></td></tr></table></figure>\n<p>函数表达式方式提升【失败】</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTest</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    foo();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo =<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"我来自 foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myTest();</span><br></pre></td></tr></table></figure>\n<p>原文：<a href=\"http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html</a></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>首先对比三段代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">alert(v); <span class=\"comment\">//Hello World</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(v);</span><br><span class=\"line\">&#125;)()<span class=\"comment\">//Hello World</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(v);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> v=<span class=\"string\">'I love you'</span>;</span><br><span class=\"line\">&#125;)()<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"javascript作用域\"><a href=\"#javascript作用域\" class=\"headerlink\" title=\"javascript作用域\"></a>javascript作用域</h4><p>JavaScript是函数级作用域(function-level scope)，并没有块级作用域,因此在代码块中并不会创建一个新的作用域。只有函数才会创建新的作用域，这样块里面的变量会影响到外部作用域，比如if语句：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(x);<span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>解决方案：<br>在函数中创建一个临时的作用域，请像下面这样做<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x) &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">// some other code</span></span><br><span class=\"line\">        &#125;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// x is still 1.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h4><p>变量提升 <strong><em>只是提升变量的声明，并不会把赋值也提升上来</em></strong>。<br>我们定义三个变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a=<span class=\"string\">'One'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b=<span class=\"string\">'Two'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c=<span class=\"string\">'Three'</span>;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>实际上它是这样子的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a,b,c;</span><br><span class=\"line\">    a=<span class=\"string\">'One'</span>;</span><br><span class=\"line\">    b=<span class=\"string\">'Two'</span>;</span><br><span class=\"line\">    c=<span class=\"string\">'Three'</span>;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h4><p>js中函数的定义有两种，函数声明方式和函数表达式方式，需要注意的是<strong><em>只有函数声明会被提升</em></strong></p>\n<p>函数声明方式提升【成功】</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTest</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    foo();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"我来自 foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myTest();</span><br></pre></td></tr></table></figure>\n<p>函数表达式方式提升【失败】</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTest</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    foo();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo =<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"我来自 foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myTest();</span><br></pre></td></tr></table></figure>\n<p>原文：<a href=\"http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html</a></p>\n"},{"title":"js对象引用赋值引发数据可变的解决方案","date":"2018-03-01T02:28:56.000Z","_content":"\n### js赋值（引用赋值）\n```javascript\nconst student1 = {\n    school: 'Baidu',\n    name: 'HOU Ce',\n    birthdate: '1995-12-15',\n}\n\nconst changeStudent = (student, newName, newBday) => {\n    const newStudent = student;\n    newStudent.name = newName;\n    newStudent.birthdate = newBday;\n    return newStudent;\n}\n\nconst student2 = changeStudent(student1, 'YAN Haijing', '1990-11-10');\n\n// both students will have the name properties\nconsole.log(student1, student2);\n// Object {school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"} \n// Object {school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"}\n```\n创建了一个新的对象student2，但是老的对象student1也被改动了\n\n### 深拷贝与浅拷贝的区别\n以Object.assign(浅拷贝)为列：\n```javascript\nvar obj1 = { a: 0, b: { c: 0 } }\nvar obj2 = Object.assign({}, obj1)\nobj2.a = 1\nobj2.b.c = 1\nconsole.log(obj1) //{ a: 0, b: { c: 1 } }\nconsole.log(obj2) //{ a: 1, b: { c: 1 }\n```\n为什么改变属性a不是指向同一个引用，而b.c指向了同一个引用?因为b不是简单地数据类型，Object.assign拷贝的时候是浅拷贝，只复制了{ c: 0 }的引用变量b,而a:1是简单类型，拷贝的时候拷贝的是值，所以当obj2.b.c改变的时候，因为obj1.b和obj2.b指向的是同一个内存地址，所以obj1.b.c的值也发生了改变。\n如果是深拷贝obj1.b.c的值就不会因为obj2.b.c改变而改变\n\n### 解决方案（创建不可变数据）\n\n ##### 使用ES6当中的解构赋值(浅拷贝，而不是深拷贝)\n```javascript\nconst changeStudent = (student, newName, newBday) => {\n    return {\n        ...student, // 使用解构\n        name: newName, // 覆盖name属性\n        birthdate: newBday // 覆盖birthdate属性\n    }\n}\n\nconst student2 = changeStudent(student1, 'YAN Haijing', '1990-11-10');\n\n// both students will have the name properties\nconsole.log(student1, student2);\n// Object {school: \"Baidu\", name: \"HOU Ce\", birthdate: \"1995-12-15\"} \n// Object {school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"}\n```\n ##### Objects.assign(浅拷贝，而不是深拷贝)\n```javascript\nconst changeStudent = (student, newName, newBday) => Object.assign({}, student, {name: newName, birthdate: newBday})\n\nconst student2 = changeStudent(student1, 'YAN Haijing', '1990-11-10');\n\nconsole.log(student1, student2);\n```\n ##### 使用第三方库\n \n 比如lodash中的merge函数\n\n\n注意：对于数组来说，它里面的 .map, .filter或者.reduce函数不会改变原数组，而是产生并返回一个新数组。这和纯函数的思想不谋而合。\n\n\n原文连接：https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9","source":"_posts/js对象引用赋值引发数据可变的解决方案.md","raw":"---\ntitle: js对象引用赋值引发数据可变的解决方案\ndate: 2018-03-01 10:28:56\ntags: [引用赋值]\ncategory: [javascript]\n---\n\n### js赋值（引用赋值）\n```javascript\nconst student1 = {\n    school: 'Baidu',\n    name: 'HOU Ce',\n    birthdate: '1995-12-15',\n}\n\nconst changeStudent = (student, newName, newBday) => {\n    const newStudent = student;\n    newStudent.name = newName;\n    newStudent.birthdate = newBday;\n    return newStudent;\n}\n\nconst student2 = changeStudent(student1, 'YAN Haijing', '1990-11-10');\n\n// both students will have the name properties\nconsole.log(student1, student2);\n// Object {school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"} \n// Object {school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"}\n```\n创建了一个新的对象student2，但是老的对象student1也被改动了\n\n### 深拷贝与浅拷贝的区别\n以Object.assign(浅拷贝)为列：\n```javascript\nvar obj1 = { a: 0, b: { c: 0 } }\nvar obj2 = Object.assign({}, obj1)\nobj2.a = 1\nobj2.b.c = 1\nconsole.log(obj1) //{ a: 0, b: { c: 1 } }\nconsole.log(obj2) //{ a: 1, b: { c: 1 }\n```\n为什么改变属性a不是指向同一个引用，而b.c指向了同一个引用?因为b不是简单地数据类型，Object.assign拷贝的时候是浅拷贝，只复制了{ c: 0 }的引用变量b,而a:1是简单类型，拷贝的时候拷贝的是值，所以当obj2.b.c改变的时候，因为obj1.b和obj2.b指向的是同一个内存地址，所以obj1.b.c的值也发生了改变。\n如果是深拷贝obj1.b.c的值就不会因为obj2.b.c改变而改变\n\n### 解决方案（创建不可变数据）\n\n ##### 使用ES6当中的解构赋值(浅拷贝，而不是深拷贝)\n```javascript\nconst changeStudent = (student, newName, newBday) => {\n    return {\n        ...student, // 使用解构\n        name: newName, // 覆盖name属性\n        birthdate: newBday // 覆盖birthdate属性\n    }\n}\n\nconst student2 = changeStudent(student1, 'YAN Haijing', '1990-11-10');\n\n// both students will have the name properties\nconsole.log(student1, student2);\n// Object {school: \"Baidu\", name: \"HOU Ce\", birthdate: \"1995-12-15\"} \n// Object {school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"}\n```\n ##### Objects.assign(浅拷贝，而不是深拷贝)\n```javascript\nconst changeStudent = (student, newName, newBday) => Object.assign({}, student, {name: newName, birthdate: newBday})\n\nconst student2 = changeStudent(student1, 'YAN Haijing', '1990-11-10');\n\nconsole.log(student1, student2);\n```\n ##### 使用第三方库\n \n 比如lodash中的merge函数\n\n\n注意：对于数组来说，它里面的 .map, .filter或者.reduce函数不会改变原数组，而是产生并返回一个新数组。这和纯函数的思想不谋而合。\n\n\n原文连接：https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9","slug":"js对象引用赋值引发数据可变的解决方案","published":1,"updated":"2018-04-07T06:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirliot000h0i6tcpxv7fup","content":"<h3 id=\"js赋值（引用赋值）\"><a href=\"#js赋值（引用赋值）\" class=\"headerlink\" title=\"js赋值（引用赋值）\"></a>js赋值（引用赋值）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student1 = &#123;</span><br><span class=\"line\">    school: <span class=\"string\">'Baidu'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'HOU Ce'</span>,</span><br><span class=\"line\">    birthdate: <span class=\"string\">'1995-12-15'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> changeStudent = <span class=\"function\">(<span class=\"params\">student, newName, newBday</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newStudent = student;</span><br><span class=\"line\">    newStudent.name = newName;</span><br><span class=\"line\">    newStudent.birthdate = newBday;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newStudent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student2 = changeStudent(student1, <span class=\"string\">'YAN Haijing'</span>, <span class=\"string\">'1990-11-10'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// both students will have the name properties</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(student1, student2);</span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"&#125;</span></span><br></pre></td></tr></table></figure>\n<p>创建了一个新的对象student2，但是老的对象student1也被改动了</p>\n<h3 id=\"深拷贝与浅拷贝的区别\"><a href=\"#深拷贝与浅拷贝的区别\" class=\"headerlink\" title=\"深拷贝与浅拷贝的区别\"></a>深拷贝与浅拷贝的区别</h3><p>以Object.assign(浅拷贝)为列：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">0</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">0</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class=\"line\">obj2.a = <span class=\"number\">1</span></span><br><span class=\"line\">obj2.b.c = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1) <span class=\"comment\">//&#123; a: 0, b: &#123; c: 1 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2) <span class=\"comment\">//&#123; a: 1, b: &#123; c: 1 &#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>为什么改变属性a不是指向同一个引用，而b.c指向了同一个引用?因为b不是简单地数据类型，Object.assign拷贝的时候是浅拷贝，只复制了{ c: 0 }的引用变量b,而a:1是简单类型，拷贝的时候拷贝的是值，所以当obj2.b.c改变的时候，因为obj1.b和obj2.b指向的是同一个内存地址，所以obj1.b.c的值也发生了改变。<br>如果是深拷贝obj1.b.c的值就不会因为obj2.b.c改变而改变</p>\n<h3 id=\"解决方案（创建不可变数据）\"><a href=\"#解决方案（创建不可变数据）\" class=\"headerlink\" title=\"解决方案（创建不可变数据）\"></a>解决方案（创建不可变数据）</h3><h5 id=\"使用ES6当中的解构赋值-浅拷贝，而不是深拷贝\"><a href=\"#使用ES6当中的解构赋值-浅拷贝，而不是深拷贝\" class=\"headerlink\" title=\"使用ES6当中的解构赋值(浅拷贝，而不是深拷贝)\"></a>使用ES6当中的解构赋值(浅拷贝，而不是深拷贝)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> changeStudent = <span class=\"function\">(<span class=\"params\">student, newName, newBday</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...student, <span class=\"comment\">// 使用解构</span></span><br><span class=\"line\">        name: newName, <span class=\"comment\">// 覆盖name属性</span></span><br><span class=\"line\">        birthdate: newBday <span class=\"comment\">// 覆盖birthdate属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student2 = changeStudent(student1, <span class=\"string\">'YAN Haijing'</span>, <span class=\"string\">'1990-11-10'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// both students will have the name properties</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(student1, student2);</span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"HOU Ce\", birthdate: \"1995-12-15\"&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"&#125;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Objects-assign-浅拷贝，而不是深拷贝\"><a href=\"#Objects-assign-浅拷贝，而不是深拷贝\" class=\"headerlink\" title=\"Objects.assign(浅拷贝，而不是深拷贝)\"></a>Objects.assign(浅拷贝，而不是深拷贝)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> changeStudent = <span class=\"function\">(<span class=\"params\">student, newName, newBday</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, student, &#123;<span class=\"attr\">name</span>: newName, <span class=\"attr\">birthdate</span>: newBday&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student2 = changeStudent(student1, <span class=\"string\">'YAN Haijing'</span>, <span class=\"string\">'1990-11-10'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(student1, student2);</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用第三方库\"><a href=\"#使用第三方库\" class=\"headerlink\" title=\"使用第三方库\"></a>使用第三方库</h5><p> 比如lodash中的merge函数</p>\n<p>注意：对于数组来说，它里面的 .map, .filter或者.reduce函数不会改变原数组，而是产生并返回一个新数组。这和纯函数的思想不谋而合。</p>\n<p>原文连接：<a href=\"https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9</a></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h3 id=\"js赋值（引用赋值）\"><a href=\"#js赋值（引用赋值）\" class=\"headerlink\" title=\"js赋值（引用赋值）\"></a>js赋值（引用赋值）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student1 = &#123;</span><br><span class=\"line\">    school: <span class=\"string\">'Baidu'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'HOU Ce'</span>,</span><br><span class=\"line\">    birthdate: <span class=\"string\">'1995-12-15'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> changeStudent = <span class=\"function\">(<span class=\"params\">student, newName, newBday</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newStudent = student;</span><br><span class=\"line\">    newStudent.name = newName;</span><br><span class=\"line\">    newStudent.birthdate = newBday;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newStudent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student2 = changeStudent(student1, <span class=\"string\">'YAN Haijing'</span>, <span class=\"string\">'1990-11-10'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// both students will have the name properties</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(student1, student2);</span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"&#125;</span></span><br></pre></td></tr></table></figure>\n<p>创建了一个新的对象student2，但是老的对象student1也被改动了</p>\n<h3 id=\"深拷贝与浅拷贝的区别\"><a href=\"#深拷贝与浅拷贝的区别\" class=\"headerlink\" title=\"深拷贝与浅拷贝的区别\"></a>深拷贝与浅拷贝的区别</h3><p>以Object.assign(浅拷贝)为列：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">0</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">0</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class=\"line\">obj2.a = <span class=\"number\">1</span></span><br><span class=\"line\">obj2.b.c = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1) <span class=\"comment\">//&#123; a: 0, b: &#123; c: 1 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2) <span class=\"comment\">//&#123; a: 1, b: &#123; c: 1 &#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>为什么改变属性a不是指向同一个引用，而b.c指向了同一个引用?因为b不是简单地数据类型，Object.assign拷贝的时候是浅拷贝，只复制了{ c: 0 }的引用变量b,而a:1是简单类型，拷贝的时候拷贝的是值，所以当obj2.b.c改变的时候，因为obj1.b和obj2.b指向的是同一个内存地址，所以obj1.b.c的值也发生了改变。<br>如果是深拷贝obj1.b.c的值就不会因为obj2.b.c改变而改变</p>\n<h3 id=\"解决方案（创建不可变数据）\"><a href=\"#解决方案（创建不可变数据）\" class=\"headerlink\" title=\"解决方案（创建不可变数据）\"></a>解决方案（创建不可变数据）</h3><h5 id=\"使用ES6当中的解构赋值-浅拷贝，而不是深拷贝\"><a href=\"#使用ES6当中的解构赋值-浅拷贝，而不是深拷贝\" class=\"headerlink\" title=\"使用ES6当中的解构赋值(浅拷贝，而不是深拷贝)\"></a>使用ES6当中的解构赋值(浅拷贝，而不是深拷贝)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> changeStudent = <span class=\"function\">(<span class=\"params\">student, newName, newBday</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...student, <span class=\"comment\">// 使用解构</span></span><br><span class=\"line\">        name: newName, <span class=\"comment\">// 覆盖name属性</span></span><br><span class=\"line\">        birthdate: newBday <span class=\"comment\">// 覆盖birthdate属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student2 = changeStudent(student1, <span class=\"string\">'YAN Haijing'</span>, <span class=\"string\">'1990-11-10'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// both students will have the name properties</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(student1, student2);</span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"HOU Ce\", birthdate: \"1995-12-15\"&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"&#125;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Objects-assign-浅拷贝，而不是深拷贝\"><a href=\"#Objects-assign-浅拷贝，而不是深拷贝\" class=\"headerlink\" title=\"Objects.assign(浅拷贝，而不是深拷贝)\"></a>Objects.assign(浅拷贝，而不是深拷贝)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> changeStudent = <span class=\"function\">(<span class=\"params\">student, newName, newBday</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, student, &#123;<span class=\"attr\">name</span>: newName, <span class=\"attr\">birthdate</span>: newBday&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student2 = changeStudent(student1, <span class=\"string\">'YAN Haijing'</span>, <span class=\"string\">'1990-11-10'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(student1, student2);</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用第三方库\"><a href=\"#使用第三方库\" class=\"headerlink\" title=\"使用第三方库\"></a>使用第三方库</h5><p> 比如lodash中的merge函数</p>\n<p>注意：对于数组来说，它里面的 .map, .filter或者.reduce函数不会改变原数组，而是产生并返回一个新数组。这和纯函数的思想不谋而合。</p>\n<p>原文连接：<a href=\"https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9</a></p>\n"},{"title":"js实现插入排序算法","date":"2018-03-22T08:58:40.000Z","_content":"\n原理：从下标1开始，current=array[i],对数组的前i-1项进行检查，如果存在大于current值，将此值往后移，赋值给下一项\n\n以下是js代码的实现：\n```javascript\nfunction sort(arr) {\n    for (let i = 1; i < arr.length; i++){\n        let current = arr[i]\n        var index = i;//记录要被插入的下标\n        for (let j = i-1; j >= 0; j--){\n            if (current < arr[j]) { \n                arr[j + 1] = arr[j]\n                index = j\n            }\n        }\n        arr[index] = current\n    }\n    return arr\n}\nlet arr = [34,8,64,51,32,21]\nconsole.log(sort(arr))\n```\n","source":"_posts/js实现插入排序算法.md","raw":"---\ntitle: js实现插入排序算法\ndate: 2018-03-22 16:58:40\ntags: [插入排序]\ncategory: [算法]\n---\n\n原理：从下标1开始，current=array[i],对数组的前i-1项进行检查，如果存在大于current值，将此值往后移，赋值给下一项\n\n以下是js代码的实现：\n```javascript\nfunction sort(arr) {\n    for (let i = 1; i < arr.length; i++){\n        let current = arr[i]\n        var index = i;//记录要被插入的下标\n        for (let j = i-1; j >= 0; j--){\n            if (current < arr[j]) { \n                arr[j + 1] = arr[j]\n                index = j\n            }\n        }\n        arr[index] = current\n    }\n    return arr\n}\nlet arr = [34,8,64,51,32,21]\nconsole.log(sort(arr))\n```\n","slug":"js实现插入排序算法","published":1,"updated":"2018-04-07T06:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirliov000j0i6t12d8ajad","content":"<p>原理：从下标1开始，current=array[i],对数组的前i-1项进行检查，如果存在大于current值，将此值往后移，赋值给下一项</p>\n<p>以下是js代码的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> current = arr[i]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index = i;<span class=\"comment\">//记录要被插入的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i<span class=\"number\">-1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current &lt; arr[j]) &#123; </span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j]</span><br><span class=\"line\">                index = j</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[index] = current</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">34</span>,<span class=\"number\">8</span>,<span class=\"number\">64</span>,<span class=\"number\">51</span>,<span class=\"number\">32</span>,<span class=\"number\">21</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sort(arr))</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>原理：从下标1开始，current=array[i],对数组的前i-1项进行检查，如果存在大于current值，将此值往后移，赋值给下一项</p>\n<p>以下是js代码的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> current = arr[i]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index = i;<span class=\"comment\">//记录要被插入的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i<span class=\"number\">-1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current &lt; arr[j]) &#123; </span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j]</span><br><span class=\"line\">                index = j</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[index] = current</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">34</span>,<span class=\"number\">8</span>,<span class=\"number\">64</span>,<span class=\"number\">51</span>,<span class=\"number\">32</span>,<span class=\"number\">21</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sort(arr))</span><br></pre></td></tr></table></figure></p>\n"},{"title":"linux命令学习笔记","date":"2018-04-10T06:21:42.000Z","_content":"\n","source":"_posts/linux命令学习笔记.md","raw":"---\ntitle: linux命令学习笔记\ndate: 2018-04-10 14:21:42\ntags: [linux,常用命令]\ncategory: [linux]\n---\n\n","slug":"linux命令学习笔记","published":1,"updated":"2018-04-10T06:22:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirlioy000o0i6tlxvy3a8y","content":"","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":""},{"title":"linux系统分类","date":"2018-02-27T08:07:34.000Z","_content":"一般来说著名的linux系统基本上分两大类：\n* RedHat系列：Redhat、Centos、Fedora等\n* Debian系列：Debian、Ubuntu等\n\n#### RedHat系列 \n\n常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数” \n\n包管理工具 yum \n\n```\nyum的配置文件：/etc/yum.conf \nyum install gcc  [centos] \n更新：yum update \n安装：yum install xxx \n移除：yum remove xxx \n清除已经安装过的档案（/var/cache/yum/）：yum clean all \n搜寻：yum search xxx \n列出所有档案：yum list \n查询档案讯息：yum info xxx \n```\n支持tar包\n\n#### Debian系列 \n\n常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数” \n\n包管理工具 apt-get \n\n```\n更新软件包：apt-get update\n安装：apt-get install xxx\n移除：apt-get remove xxx\n更新安装过的包：apt-get upgrade xxx\n```\n支持tar包\n","source":"_posts/linux系统分类.md","raw":"---\ntitle: linux系统分类\ndate: 2018-02-27 16:07:34\ntags: [linux,操作系统]\ncategory: [linux]\n---\n一般来说著名的linux系统基本上分两大类：\n* RedHat系列：Redhat、Centos、Fedora等\n* Debian系列：Debian、Ubuntu等\n\n#### RedHat系列 \n\n常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数” \n\n包管理工具 yum \n\n```\nyum的配置文件：/etc/yum.conf \nyum install gcc  [centos] \n更新：yum update \n安装：yum install xxx \n移除：yum remove xxx \n清除已经安装过的档案（/var/cache/yum/）：yum clean all \n搜寻：yum search xxx \n列出所有档案：yum list \n查询档案讯息：yum info xxx \n```\n支持tar包\n\n#### Debian系列 \n\n常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数” \n\n包管理工具 apt-get \n\n```\n更新软件包：apt-get update\n安装：apt-get install xxx\n移除：apt-get remove xxx\n更新安装过的包：apt-get upgrade xxx\n```\n支持tar包\n","slug":"linux系统分类","published":1,"updated":"2018-04-07T06:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirlioz000q0i6t5leqnuo8","content":"<p>一般来说著名的linux系统基本上分两大类：</p>\n<ul>\n<li>RedHat系列：Redhat、Centos、Fedora等</li>\n<li>Debian系列：Debian、Ubuntu等</li>\n</ul>\n<h4 id=\"RedHat系列\"><a href=\"#RedHat系列\" class=\"headerlink\" title=\"RedHat系列\"></a>RedHat系列</h4><p>常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数” </p>\n<p>包管理工具 yum </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum的配置文件：/etc/yum.conf </span><br><span class=\"line\">yum install gcc  [centos] </span><br><span class=\"line\">更新：yum update </span><br><span class=\"line\">安装：yum install xxx </span><br><span class=\"line\">移除：yum remove xxx </span><br><span class=\"line\">清除已经安装过的档案（/var/cache/yum/）：yum clean all </span><br><span class=\"line\">搜寻：yum search xxx </span><br><span class=\"line\">列出所有档案：yum list </span><br><span class=\"line\">查询档案讯息：yum info xxx</span><br></pre></td></tr></table></figure>\n<p>支持tar包</p>\n<h4 id=\"Debian系列\"><a href=\"#Debian系列\" class=\"headerlink\" title=\"Debian系列\"></a>Debian系列</h4><p>常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数” </p>\n<p>包管理工具 apt-get </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">更新软件包：apt-get update</span><br><span class=\"line\">安装：apt-get install xxx</span><br><span class=\"line\">移除：apt-get remove xxx</span><br><span class=\"line\">更新安装过的包：apt-get upgrade xxx</span><br></pre></td></tr></table></figure>\n<p>支持tar包</p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>一般来说著名的linux系统基本上分两大类：</p>\n<ul>\n<li>RedHat系列：Redhat、Centos、Fedora等</li>\n<li>Debian系列：Debian、Ubuntu等</li>\n</ul>\n<h4 id=\"RedHat系列\"><a href=\"#RedHat系列\" class=\"headerlink\" title=\"RedHat系列\"></a>RedHat系列</h4><p>常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数” </p>\n<p>包管理工具 yum </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum的配置文件：/etc/yum.conf </span><br><span class=\"line\">yum install gcc  [centos] </span><br><span class=\"line\">更新：yum update </span><br><span class=\"line\">安装：yum install xxx </span><br><span class=\"line\">移除：yum remove xxx </span><br><span class=\"line\">清除已经安装过的档案（/var/cache/yum/）：yum clean all </span><br><span class=\"line\">搜寻：yum search xxx </span><br><span class=\"line\">列出所有档案：yum list </span><br><span class=\"line\">查询档案讯息：yum info xxx</span><br></pre></td></tr></table></figure>\n<p>支持tar包</p>\n<h4 id=\"Debian系列\"><a href=\"#Debian系列\" class=\"headerlink\" title=\"Debian系列\"></a>Debian系列</h4><p>常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数” </p>\n<p>包管理工具 apt-get </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">更新软件包：apt-get update</span><br><span class=\"line\">安装：apt-get install xxx</span><br><span class=\"line\">移除：apt-get remove xxx</span><br><span class=\"line\">更新安装过的包：apt-get upgrade xxx</span><br></pre></td></tr></table></figure>\n<p>支持tar包</p>\n"},{"title":"mac下使用tree命令","date":"2018-02-10T05:06:56.000Z","_content":"\nmac下默认是没有 tree命令的，不过我们可以使用find命令模拟出tree命令的效果\n\n如显示当前目录的 tree 的命令\n```\nfind . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\n```\n\n使用alias 指定别名，将它变成一个命令\n\n.bash_profile文件增加以下代码：\n\n```\nalias tree=\"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\"\n```\n","source":"_posts/mac下使用tree命令.md","raw":"---\ntitle: mac下使用tree命令\ndate: 2018-02-10 13:06:56\ncategory: [mac]\ntags: [mac,shell]\n---\n\nmac下默认是没有 tree命令的，不过我们可以使用find命令模拟出tree命令的效果\n\n如显示当前目录的 tree 的命令\n```\nfind . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\n```\n\n使用alias 指定别名，将它变成一个命令\n\n.bash_profile文件增加以下代码：\n\n```\nalias tree=\"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\"\n```\n","slug":"mac下使用tree命令","published":1,"updated":"2018-04-07T06:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirlip1000u0i6tqarll5io","content":"<p>mac下默认是没有 tree命令的，不过我们可以使用find命令模拟出tree命令的效果</p>\n<p>如显示当前目录的 tree 的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;</span><br></pre></td></tr></table></figure></p>\n<p>使用alias 指定别名，将它变成一个命令</p>\n<p>.bash_profile文件增加以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>mac下默认是没有 tree命令的，不过我们可以使用find命令模拟出tree命令的效果</p>\n<p>如显示当前目录的 tree 的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;</span><br></pre></td></tr></table></figure></p>\n<p>使用alias 指定别名，将它变成一个命令</p>\n<p>.bash_profile文件增加以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":"js实现冒泡排序算法","date":"2018-03-22T07:18:59.000Z","_content":"\n原理：将前后两个数进行比较，较大或者较小的往后放\n例如：let numbers={ 1,5,3,6,4,9,8,0,7,2}\n第一轮比较：\n第一次比较：1，5，3，6，4，9，8，0，7，2第一个数不大于第二个数，不调换位置\n\n第二次比较：1，3，5，6，4，9，8，0，7，2第二个数大于第三个数，调换位置\n\n第三次比较：1，3，5，6，4，9，8，0，7，2 第三个数不大于第四个数，不调换位置\n\n第四次比较：1，3，5，4，6，9，8，0，7，2 第四个数大于第五个数，调换位置\n.\n.\n.\n以此类推 第九次比较：1，3，5，4，6，8，0，7，2，9第九个数大于第十个数，调换位置\n\n第二轮比较：\n比较次数8次\n\n第三轮比较：\n比较次数7次\n.\n.\n.\n以此类推 第九轮比较1次\n从上面的分析我们可以看出我们排10个数需要比较九轮，每一轮比较由9次递减到1次\n\n以下是js代码的实现：\n```javascript\nvar arr = [2, 10, 3, 4, 1, 7, 5, 6, 9, 8]\nfunction sort(arr) {\n    for (let i = 0; i < arr.length-1; i++){\n        for (let j = 0; j < arr.length-1-i; j++){\n            let temp = arr[j]\n            if (arr[j] > arr[j + 1]) {\n                arr[j] = arr[j + 1]\n                arr[j+1] = temp\n            }\n        }\n    }\n}\nsort(arr)\nconsole.log(arr)\n```\n","source":"_posts/js实现冒泡排序算法.md","raw":"---\ntitle: js实现冒泡排序算法\ndate: 2018-03-22 15:18:59\ntags: [冒泡排序]\ncategory: [算法]\n---\n\n原理：将前后两个数进行比较，较大或者较小的往后放\n例如：let numbers={ 1,5,3,6,4,9,8,0,7,2}\n第一轮比较：\n第一次比较：1，5，3，6，4，9，8，0，7，2第一个数不大于第二个数，不调换位置\n\n第二次比较：1，3，5，6，4，9，8，0，7，2第二个数大于第三个数，调换位置\n\n第三次比较：1，3，5，6，4，9，8，0，7，2 第三个数不大于第四个数，不调换位置\n\n第四次比较：1，3，5，4，6，9，8，0，7，2 第四个数大于第五个数，调换位置\n.\n.\n.\n以此类推 第九次比较：1，3，5，4，6，8，0，7，2，9第九个数大于第十个数，调换位置\n\n第二轮比较：\n比较次数8次\n\n第三轮比较：\n比较次数7次\n.\n.\n.\n以此类推 第九轮比较1次\n从上面的分析我们可以看出我们排10个数需要比较九轮，每一轮比较由9次递减到1次\n\n以下是js代码的实现：\n```javascript\nvar arr = [2, 10, 3, 4, 1, 7, 5, 6, 9, 8]\nfunction sort(arr) {\n    for (let i = 0; i < arr.length-1; i++){\n        for (let j = 0; j < arr.length-1-i; j++){\n            let temp = arr[j]\n            if (arr[j] > arr[j + 1]) {\n                arr[j] = arr[j + 1]\n                arr[j+1] = temp\n            }\n        }\n    }\n}\nsort(arr)\nconsole.log(arr)\n```\n","slug":"js实现冒泡排序算法","published":1,"updated":"2018-04-07T06:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirlip2000w0i6tiazzeskb","content":"<p>原理：将前后两个数进行比较，较大或者较小的往后放<br>例如：let numbers={ 1,5,3,6,4,9,8,0,7,2}<br>第一轮比较：<br>第一次比较：1，5，3，6，4，9，8，0，7，2第一个数不大于第二个数，不调换位置</p>\n<p>第二次比较：1，3，5，6，4，9，8，0，7，2第二个数大于第三个数，调换位置</p>\n<p>第三次比较：1，3，5，6，4，9，8，0，7，2 第三个数不大于第四个数，不调换位置</p>\n<p>第四次比较：1，3，5，4，6，9，8，0，7，2 第四个数大于第五个数，调换位置<br>.<br>.<br>.<br>以此类推 第九次比较：1，3，5，4，6，8，0，7，2，9第九个数大于第十个数，调换位置</p>\n<p>第二轮比较：<br>比较次数8次</p>\n<p>第三轮比较：<br>比较次数7次<br>.<br>.<br>.<br>以此类推 第九轮比较1次<br>从上面的分析我们可以看出我们排10个数需要比较九轮，每一轮比较由9次递减到1次</p>\n<p>以下是js代码的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length<span class=\"number\">-1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr.length<span class=\"number\">-1</span>-i; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = arr[j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = temp</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sort(arr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>原理：将前后两个数进行比较，较大或者较小的往后放<br>例如：let numbers={ 1,5,3,6,4,9,8,0,7,2}<br>第一轮比较：<br>第一次比较：1，5，3，6，4，9，8，0，7，2第一个数不大于第二个数，不调换位置</p>\n<p>第二次比较：1，3，5，6，4，9，8，0，7，2第二个数大于第三个数，调换位置</p>\n<p>第三次比较：1，3，5，6，4，9，8，0，7，2 第三个数不大于第四个数，不调换位置</p>\n<p>第四次比较：1，3，5，4，6，9，8，0，7，2 第四个数大于第五个数，调换位置<br>.<br>.<br>.<br>以此类推 第九次比较：1，3，5，4，6，8，0，7，2，9第九个数大于第十个数，调换位置</p>\n<p>第二轮比较：<br>比较次数8次</p>\n<p>第三轮比较：<br>比较次数7次<br>.<br>.<br>.<br>以此类推 第九轮比较1次<br>从上面的分析我们可以看出我们排10个数需要比较九轮，每一轮比较由9次递减到1次</p>\n<p>以下是js代码的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length<span class=\"number\">-1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr.length<span class=\"number\">-1</span>-i; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = arr[j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = temp</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sort(arr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"promise深入理解","date":"2018-02-12T06:01:37.000Z","_content":"#### promise是什么\npromise 是一个构造函数，自己身上有all、reject、resolve这些方法，原型上有then、catch这些方法，用Promise new出来的对象肯定就有then、catch方法。\n```javascript\nvar p = new Promise(function(resolve, reject){\n    //做一些异步操作\n    setTimeout(function(){\n        console.log('执行完成');\n        resolve('随便什么数据');\n    }, 2000);\n});\n```\n\n*注意，这里知识new了一个Promise对象，并没有去调用它，但是传进去的函数已经之行了，所以在使用Promise的时候一般是包在一个函数中，使用的时候再去调用函数。\n\n#### promise链式操作调用\n\n```javascript\nfunction runAsync1(){\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync1执行完成');\n            resolve('runAsync1随便什么数据');\n        }, 2000);\n    });\n}\nfunction runAsync2(){\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync2执行完成');\n            resolve('runAsync2随便什么数据');\n        }, 2000);\n    });\n}\nfunction runAsync3(){\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync3执行完成');\n            resolve('runAsync3随便什么数据');\n        }, 2000);\n    });\n}\n\nrunAsync1().then(data => {\n    console.log(data)//runAsync1函数的resolve结果\n    return runAsync2()\n}).then(data => {\n    console.log(data)//runAsync2函数的resolve结果\n    return runAsync3()\n}).then(data => {\n    console.log(data) //runAsync3函数的resolve结果  \n})\n\n//如果当前函数执行不依赖于上一个函数的返回值，也可以这样写:\nrunAsync1().then(runAsync2).then(runAsync3).then(data => {\n    console.log(data) //这里只能拿到runAsync3函数的resolve结果 \n})\n\n//当然这种方式也可以手动在每一个函数内部获取上一个函数的返回值，例如runAsync2想要使用runAsync1的返回值，runAsync2就得这样写：\n\nfunction runAsync2(data){\n    console.log(data)//data为runAsync1函数的resolve结果\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync2执行完成');\n            resolve('runAsync2随便什么数据');\n        }, 2000);\n    });\n}\n```\n#### 异常处理\n使用catch处理异常\nthen方法有两个参数，第一个是处理resolve的回调，第二个是处理reject的回调，catch和then的第二个参数一样也是指定reject回调的。\n以上面的列子说明：\n1. 可以在then的第二个参数里面处理error\n```javascript\nrunAsync1().then(data => {\n    console.log(data)//runAsync1函数的resolve结果\n    return runAsync2()\n}).then(data => {\n    console.log(data)//runAsync2函数的resolve结果\n    return runAsync3()\n}).then(data => {\n    console.log(data) //runAsync3函数的resolve结果  \n},err=>{\n    console.log(err)\n})\n\n```\n2. 也可以放在then方法的外面使用catch处理，效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中\n```javascript\nrunAsync1().then(data => {\n    console.log(data)\n    return runAsync2()\n}).then(data => {\n    console.log(data)\n    return runAsync3()\n}).then(data => {\n    console.log(data)    \n}).catch(err => { \n    console.log(err)\n})\n\n```\n*注意，不管runAsync1、runAsync2、runAsync3出现异常，都会走到catch中，如果runAsync1出现异常，runAsync2、runAsync3都不会执行。\n#### Promise.all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\n并行执行一组异步操作，并且返回值是所有异步操作返回值的数组\n```javascript\nPromise\n    .all([runAsync1(), runAsync2(), runAsync3()])\n    .then(function(results){\n        console.log(results);\n});\n```\n#### Promise.race（谁执行的快以谁为准执行回调）\n使用场景：可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作\n```javascript\nPromise\n.race([runAsync1(), runAsync2(), runAsync3()])\n.then(function(results){\n    console.log(results);\n});\n```\n###### 示例代码：\n```javascript\n//10秒之后执行\nfunction timeout10(){\n    var p = new Promise(function(resolve, reject){\n        setTimeout(function(){\n            resolve('success');\n        }, 4000);\n    });\n    return p;\n}\n\n//延时函数，用于给请求计时\nfunction timeout5(){\n    var p = new Promise(function(resolve, reject){\n        setTimeout(function(){\n            reject('请求超时');\n        }, 5000);\n    });\n    return p;\n}\n\nPromise\n.race([timeout10(), timeout5()])\n.then(function(results){\n    console.log(results);\n})\n.catch(function(reason){\n    console.log(reason);\n});\n```\n\n参考帖子：http://www.cnblogs.com/lvdabao/p/es6-promise-1.html\n","source":"_posts/promise深入理解.md","raw":"---\ntitle: promise深入理解\ndate: 2018-02-12 14:01:37\ntags: [js,promise]\ncategory: [node]\n---\n#### promise是什么\npromise 是一个构造函数，自己身上有all、reject、resolve这些方法，原型上有then、catch这些方法，用Promise new出来的对象肯定就有then、catch方法。\n```javascript\nvar p = new Promise(function(resolve, reject){\n    //做一些异步操作\n    setTimeout(function(){\n        console.log('执行完成');\n        resolve('随便什么数据');\n    }, 2000);\n});\n```\n\n*注意，这里知识new了一个Promise对象，并没有去调用它，但是传进去的函数已经之行了，所以在使用Promise的时候一般是包在一个函数中，使用的时候再去调用函数。\n\n#### promise链式操作调用\n\n```javascript\nfunction runAsync1(){\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync1执行完成');\n            resolve('runAsync1随便什么数据');\n        }, 2000);\n    });\n}\nfunction runAsync2(){\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync2执行完成');\n            resolve('runAsync2随便什么数据');\n        }, 2000);\n    });\n}\nfunction runAsync3(){\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync3执行完成');\n            resolve('runAsync3随便什么数据');\n        }, 2000);\n    });\n}\n\nrunAsync1().then(data => {\n    console.log(data)//runAsync1函数的resolve结果\n    return runAsync2()\n}).then(data => {\n    console.log(data)//runAsync2函数的resolve结果\n    return runAsync3()\n}).then(data => {\n    console.log(data) //runAsync3函数的resolve结果  \n})\n\n//如果当前函数执行不依赖于上一个函数的返回值，也可以这样写:\nrunAsync1().then(runAsync2).then(runAsync3).then(data => {\n    console.log(data) //这里只能拿到runAsync3函数的resolve结果 \n})\n\n//当然这种方式也可以手动在每一个函数内部获取上一个函数的返回值，例如runAsync2想要使用runAsync1的返回值，runAsync2就得这样写：\n\nfunction runAsync2(data){\n    console.log(data)//data为runAsync1函数的resolve结果\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync2执行完成');\n            resolve('runAsync2随便什么数据');\n        }, 2000);\n    });\n}\n```\n#### 异常处理\n使用catch处理异常\nthen方法有两个参数，第一个是处理resolve的回调，第二个是处理reject的回调，catch和then的第二个参数一样也是指定reject回调的。\n以上面的列子说明：\n1. 可以在then的第二个参数里面处理error\n```javascript\nrunAsync1().then(data => {\n    console.log(data)//runAsync1函数的resolve结果\n    return runAsync2()\n}).then(data => {\n    console.log(data)//runAsync2函数的resolve结果\n    return runAsync3()\n}).then(data => {\n    console.log(data) //runAsync3函数的resolve结果  \n},err=>{\n    console.log(err)\n})\n\n```\n2. 也可以放在then方法的外面使用catch处理，效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中\n```javascript\nrunAsync1().then(data => {\n    console.log(data)\n    return runAsync2()\n}).then(data => {\n    console.log(data)\n    return runAsync3()\n}).then(data => {\n    console.log(data)    \n}).catch(err => { \n    console.log(err)\n})\n\n```\n*注意，不管runAsync1、runAsync2、runAsync3出现异常，都会走到catch中，如果runAsync1出现异常，runAsync2、runAsync3都不会执行。\n#### Promise.all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\n并行执行一组异步操作，并且返回值是所有异步操作返回值的数组\n```javascript\nPromise\n    .all([runAsync1(), runAsync2(), runAsync3()])\n    .then(function(results){\n        console.log(results);\n});\n```\n#### Promise.race（谁执行的快以谁为准执行回调）\n使用场景：可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作\n```javascript\nPromise\n.race([runAsync1(), runAsync2(), runAsync3()])\n.then(function(results){\n    console.log(results);\n});\n```\n###### 示例代码：\n```javascript\n//10秒之后执行\nfunction timeout10(){\n    var p = new Promise(function(resolve, reject){\n        setTimeout(function(){\n            resolve('success');\n        }, 4000);\n    });\n    return p;\n}\n\n//延时函数，用于给请求计时\nfunction timeout5(){\n    var p = new Promise(function(resolve, reject){\n        setTimeout(function(){\n            reject('请求超时');\n        }, 5000);\n    });\n    return p;\n}\n\nPromise\n.race([timeout10(), timeout5()])\n.then(function(results){\n    console.log(results);\n})\n.catch(function(reason){\n    console.log(reason);\n});\n```\n\n参考帖子：http://www.cnblogs.com/lvdabao/p/es6-promise-1.html\n","slug":"promise深入理解","published":1,"updated":"2018-04-07T06:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirlip3000z0i6tf1vjvp75","content":"<h4 id=\"promise是什么\"><a href=\"#promise是什么\" class=\"headerlink\" title=\"promise是什么\"></a>promise是什么</h4><p>promise 是一个构造函数，自己身上有all、reject、resolve这些方法，原型上有then、catch这些方法，用Promise new出来的对象肯定就有then、catch方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行完成'</span>);</span><br><span class=\"line\">        resolve(<span class=\"string\">'随便什么数据'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>*注意，这里知识new了一个Promise对象，并没有去调用它，但是传进去的函数已经之行了，所以在使用Promise的时候一般是包在一个函数中，使用的时候再去调用函数。</p>\n<h4 id=\"promise链式操作调用\"><a href=\"#promise链式操作调用\" class=\"headerlink\" title=\"promise链式操作调用\"></a>promise链式操作调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync1执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync1随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync2执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync2随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync3执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync3随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">runAsync1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync1函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync2()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync2函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync3()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">//runAsync3函数的resolve结果  </span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果当前函数执行不依赖于上一个函数的返回值，也可以这样写:</span></span><br><span class=\"line\">runAsync1().then(runAsync2).then(runAsync3).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">//这里只能拿到runAsync3函数的resolve结果 </span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当然这种方式也可以手动在每一个函数内部获取上一个函数的返回值，例如runAsync2想要使用runAsync1的返回值，runAsync2就得这样写：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync2</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//data为runAsync1函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync2执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync2随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><p>使用catch处理异常<br>then方法有两个参数，第一个是处理resolve的回调，第二个是处理reject的回调，catch和then的第二个参数一样也是指定reject回调的。<br>以上面的列子说明：</p>\n<ol>\n<li><p>可以在then的第二个参数里面处理error</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runAsync1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync1函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync2()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync2函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync3()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">//runAsync3函数的resolve结果  </span></span><br><span class=\"line\">&#125;,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>也可以放在then方法的外面使用catch处理，效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runAsync1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync2()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync3()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)    </span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>*注意，不管runAsync1、runAsync2、runAsync3出现异常，都会走到catch中，如果runAsync1出现异常，runAsync2、runAsync3都不会执行。</p>\n<h4 id=\"Promise-all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\"><a href=\"#Promise-all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\" class=\"headerlink\" title=\"Promise.all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\"></a>Promise.all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）</h4><p>并行执行一组异步操作，并且返回值是所有异步操作返回值的数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">    .all([runAsync1(), runAsync2(), runAsync3()])</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Promise-race（谁执行的快以谁为准执行回调）\"><a href=\"#Promise-race（谁执行的快以谁为准执行回调）\" class=\"headerlink\" title=\"Promise.race（谁执行的快以谁为准执行回调）\"></a>Promise.race（谁执行的快以谁为准执行回调）</h4><p>使用场景：可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">.race([runAsync1(), runAsync2(), runAsync3()])</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"示例代码：\"><a href=\"#示例代码：\" class=\"headerlink\" title=\"示例代码：\"></a>示例代码：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//10秒之后执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout10</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">4000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//延时函数，用于给请求计时</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout5</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'请求超时'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">5000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">.race([timeout10(), timeout5()])</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>参考帖子：<a href=\"http://www.cnblogs.com/lvdabao/p/es6-promise-1.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/lvdabao/p/es6-promise-1.html</a></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h4 id=\"promise是什么\"><a href=\"#promise是什么\" class=\"headerlink\" title=\"promise是什么\"></a>promise是什么</h4><p>promise 是一个构造函数，自己身上有all、reject、resolve这些方法，原型上有then、catch这些方法，用Promise new出来的对象肯定就有then、catch方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行完成'</span>);</span><br><span class=\"line\">        resolve(<span class=\"string\">'随便什么数据'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>*注意，这里知识new了一个Promise对象，并没有去调用它，但是传进去的函数已经之行了，所以在使用Promise的时候一般是包在一个函数中，使用的时候再去调用函数。</p>\n<h4 id=\"promise链式操作调用\"><a href=\"#promise链式操作调用\" class=\"headerlink\" title=\"promise链式操作调用\"></a>promise链式操作调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync1执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync1随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync2执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync2随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync3执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync3随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">runAsync1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync1函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync2()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync2函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync3()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">//runAsync3函数的resolve结果  </span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果当前函数执行不依赖于上一个函数的返回值，也可以这样写:</span></span><br><span class=\"line\">runAsync1().then(runAsync2).then(runAsync3).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">//这里只能拿到runAsync3函数的resolve结果 </span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当然这种方式也可以手动在每一个函数内部获取上一个函数的返回值，例如runAsync2想要使用runAsync1的返回值，runAsync2就得这样写：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync2</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//data为runAsync1函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync2执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync2随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><p>使用catch处理异常<br>then方法有两个参数，第一个是处理resolve的回调，第二个是处理reject的回调，catch和then的第二个参数一样也是指定reject回调的。<br>以上面的列子说明：</p>\n<ol>\n<li><p>可以在then的第二个参数里面处理error</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runAsync1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync1函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync2()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync2函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync3()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">//runAsync3函数的resolve结果  </span></span><br><span class=\"line\">&#125;,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>也可以放在then方法的外面使用catch处理，效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runAsync1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync2()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync3()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)    </span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>*注意，不管runAsync1、runAsync2、runAsync3出现异常，都会走到catch中，如果runAsync1出现异常，runAsync2、runAsync3都不会执行。</p>\n<h4 id=\"Promise-all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\"><a href=\"#Promise-all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\" class=\"headerlink\" title=\"Promise.all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\"></a>Promise.all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）</h4><p>并行执行一组异步操作，并且返回值是所有异步操作返回值的数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">    .all([runAsync1(), runAsync2(), runAsync3()])</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Promise-race（谁执行的快以谁为准执行回调）\"><a href=\"#Promise-race（谁执行的快以谁为准执行回调）\" class=\"headerlink\" title=\"Promise.race（谁执行的快以谁为准执行回调）\"></a>Promise.race（谁执行的快以谁为准执行回调）</h4><p>使用场景：可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">.race([runAsync1(), runAsync2(), runAsync3()])</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"示例代码：\"><a href=\"#示例代码：\" class=\"headerlink\" title=\"示例代码：\"></a>示例代码：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//10秒之后执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout10</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">4000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//延时函数，用于给请求计时</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout5</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'请求超时'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">5000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">.race([timeout10(), timeout5()])</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>参考帖子：<a href=\"http://www.cnblogs.com/lvdabao/p/es6-promise-1.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/lvdabao/p/es6-promise-1.html</a></p>\n"},{"title":"输出1-100之间的素数","date":"2018-02-28T02:55:39.000Z","_content":"\n素数：除了1和它本身外没有其他因数，即，除了1和它本身外不能被其他数整除\n1---不是素数\n2---最小的素数\n3---2（判断是否能被2整除）\n4---2，3（判断是否能被2,3整除）\n5---2，3，4（判断是否能被2,3,4整除）\n6---2，3，4，5（判断是否能被2,3,4,5整除）\n...\n\n以下是js代码的实现：\n```javascript\nfor(let i=2;i<=100;i++){\n    let flag = true;\n    for(let j=2;j<i;j++){\n        if(i%j==0){\n            flag = false;\n            break;\n        }\n    }\n    if(flag){\n        console.log(i)\n    }  \n}\n```\n","source":"_posts/输出1-100之间的素数.md","raw":"---\ntitle: 输出1-100之间的素数\ndate: 2018-02-28 10:55:39\ntags: [素数]\ncategory: [算法]\n---\n\n素数：除了1和它本身外没有其他因数，即，除了1和它本身外不能被其他数整除\n1---不是素数\n2---最小的素数\n3---2（判断是否能被2整除）\n4---2，3（判断是否能被2,3整除）\n5---2，3，4（判断是否能被2,3,4整除）\n6---2，3，4，5（判断是否能被2,3,4,5整除）\n...\n\n以下是js代码的实现：\n```javascript\nfor(let i=2;i<=100;i++){\n    let flag = true;\n    for(let j=2;j<i;j++){\n        if(i%j==0){\n            flag = false;\n            break;\n        }\n    }\n    if(flag){\n        console.log(i)\n    }  \n}\n```\n","slug":"输出1-100之间的素数","published":1,"updated":"2018-04-07T06:44:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirlip500130i6trmeue3xp","content":"<p>素数：除了1和它本身外没有其他因数，即，除了1和它本身外不能被其他数整除<br>1—不是素数<br>2—最小的素数<br>3—2（判断是否能被2整除）<br>4—2，3（判断是否能被2,3整除）<br>5—2，3，4（判断是否能被2,3,4整除）<br>6—2，3，4，5（判断是否能被2,3,4,5整除）<br>…</p>\n<p>以下是js代码的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j=<span class=\"number\">2</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i%j==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>素数：除了1和它本身外没有其他因数，即，除了1和它本身外不能被其他数整除<br>1—不是素数<br>2—最小的素数<br>3—2（判断是否能被2整除）<br>4—2，3（判断是否能被2,3整除）<br>5—2，3，4（判断是否能被2,3,4整除）<br>6—2，3，4，5（判断是否能被2,3,4,5整除）<br>…</p>\n<p>以下是js代码的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j=<span class=\"number\">2</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i%j==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"深入理解node的Event Loop","date":"2018-05-06T08:50:45.000Z","_content":"### Event Loop 的六个阶段\n#### timers   \n> 调用setTimeout(),setInterval()的回调\n\nTimers的回调函数在他指定的时间之后运行，因为他必须等待同步代码执行完毕，并且时间循环可能会被阻塞到poll阶段\n另外系统的调度和其他回调的执行也有可能延迟他的执行\n\n#### pending callbacks   \n> 调用系统的错误回调\n\n#### idle, prepare     \n> 只在内部使用，不考虑\n\n#### poll      \n> 取新的I/O事件   \n> 执行I/O相关的回调（除关闭回调、定时器的回调、setImmediate()的回调）\n\n如果event loop进入了poll阶段，并且没有定时器，将会出现一下两种情况\n- 如果poll队列不为空，event loop将遍历poll队列里面的所有回调函数以同步方式去执行，知道队列耗尽，或者达到系统的限制   \n- 如果poll队列为空，将会出现两种情况\n   - 执行脚本中存在setImmediate(),event loop将结束poll阶段，到下一个check阶段去执行setImmediate()的回调\n   - 如果脚本中没有setImmediate() event loop将一直等待\b回调被添加到poll队列，并且立即去执行他\n\n一旦poll阶段为空，event loop 将会去检查已经到时间的定时器，如果有准备好的\b定时器，event loop将会返回到timers阶段去执行定时器的回调   \nevent loop将在此阶段等待传入的链接，请求等\n\n\n#### check      \n> 调用setImmediate()回调\n\nsetImmediate()是一个特殊的定时器，处在event loop的一个单独阶段，poll阶段完成之后立即执行\n\n\n#### close callbacks      \n> 一些关闭回调，比如 socket.on('close', ...)\n\n\n### Node四个定时器\n为了协调异步任务，Node 提供了四个定时器，让任务可以在指定的时间运行。\n* setTimeout()\n* setInterval()\n* setImmediate()\n* process.nextTick()\n\n猜测一下以下代码的运行结果\n```javascript\nsetTimeout(() => console.log(1));\nsetImmediate(() => console.log(2));\nprocess.nextTick(() => console.log(3));\nPromise.resolve().then(() => console.log(4));\n(() => console.log(5))();\n```\n运行结果如下。\n```javascript\n5\n3\n4\n1\n2\n```\n同步代码先于异步代码执行\n\n异步任务分为：\n* 追加在本轮循环的异步代码\n* 追加在次轮循环的异步代码\n\n```javascript\n// 下面两行，次轮循环执行 等待时间相同的情况下setTimeout先于setInterval执行\nsetTimeout(() => console.log(1));\nsetInterval(() => console.log(1));\nsetImmediate(() => console.log(2));\n// 下面两行，本轮循环执行\nprocess.nextTick(() => console.log(3));\nPromise.resolve().then(() => console.log(4));\n```\n\n#### setTimeout()\n次轮循环中执行\n\nsetTimeout()在timers阶段执行，只是将事件插入了\"任务队列\"，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。\n#### setImmediate()\n次轮循环中执行\n\nsetImmediate()在check阶段执行，主线程和事件队列的函数执行完成之后立即执行setImmediate指定的回调函数，和setTimeout(fn,0)的效果差不多   \n当setImmediate()与setTimeout()在同一个主模块中运行\b而不是一个I/O循环中的时候，受到进程性能的影响，他们的执行顺序是不定的，如下\b例：\n```javascript\n\n// timeout_vs_immediate.js\nsetTimeout(() => {\n  console.log('timeout');\n}, 0);\n\nsetImmediate(() => {\n  console.log('immediate');\n});\n\n$ node timeout_vs_immediate.js\ntimeout\nimmediate\n\n$ node timeout_vs_immediate.js\nimmediate\ntimeout\n```\n如果他们处在一个I/O循环里面，则总是setImmediate()先执行，如下例：\n```javascript \n// timeout_vs_immediate.js\nconst fs = require('fs');\n\nfs.readFile(__filename, () => {\n  setTimeout(() => {\n    console.log('timeout');\n  }, 0);\n  //总是setImmediate()先执行\n  setImmediate(() => {\n    console.log('immediate');\n  });\n});\n\n```\n#### process.nextTick()\n本轮循环中执行   \n不在event loop中，不属于任何一个阶段   \n同步代码执行完之后立即执行，所有异步里面最快的   \n\nprocess.nextTick()方法可以在当前\"执行栈\"的尾部-->下一次Event Loop（主线程读取\"任务队列\"）之前-->触发process指定的回调函数。也就是说，它指定的任务总是发生在所有异步任务之前，当前主线程的末尾。（nextTick虽然也会异步执行，但是不会给其他io事件执行的任何机会）\n \n**_最后process.maxTickDepth()的缺省值是1000，如果超过会报exceed callback stack。官方认为在递归中用process.nextTick会造成饥饿event loop，因为nextTick没有给其他异步事件执行的机会，递归中推荐用setImmediate_**\n### Promise的执行\n\nPromise的执行时在一个微任务队列中，process.nextTick()执行之后立即执行\n","source":"_posts/深入理解node的Event Loop.md","raw":"---\ntitle: 深入理解node的Event Loop\ndate: 2018-05-06 16:50:45\ntags: [node,setTimeout]\ncategory: [node]\n---\n### Event Loop 的六个阶段\n#### timers   \n> 调用setTimeout(),setInterval()的回调\n\nTimers的回调函数在他指定的时间之后运行，因为他必须等待同步代码执行完毕，并且时间循环可能会被阻塞到poll阶段\n另外系统的调度和其他回调的执行也有可能延迟他的执行\n\n#### pending callbacks   \n> 调用系统的错误回调\n\n#### idle, prepare     \n> 只在内部使用，不考虑\n\n#### poll      \n> 取新的I/O事件   \n> 执行I/O相关的回调（除关闭回调、定时器的回调、setImmediate()的回调）\n\n如果event loop进入了poll阶段，并且没有定时器，将会出现一下两种情况\n- 如果poll队列不为空，event loop将遍历poll队列里面的所有回调函数以同步方式去执行，知道队列耗尽，或者达到系统的限制   \n- 如果poll队列为空，将会出现两种情况\n   - 执行脚本中存在setImmediate(),event loop将结束poll阶段，到下一个check阶段去执行setImmediate()的回调\n   - 如果脚本中没有setImmediate() event loop将一直等待\b回调被添加到poll队列，并且立即去执行他\n\n一旦poll阶段为空，event loop 将会去检查已经到时间的定时器，如果有准备好的\b定时器，event loop将会返回到timers阶段去执行定时器的回调   \nevent loop将在此阶段等待传入的链接，请求等\n\n\n#### check      \n> 调用setImmediate()回调\n\nsetImmediate()是一个特殊的定时器，处在event loop的一个单独阶段，poll阶段完成之后立即执行\n\n\n#### close callbacks      \n> 一些关闭回调，比如 socket.on('close', ...)\n\n\n### Node四个定时器\n为了协调异步任务，Node 提供了四个定时器，让任务可以在指定的时间运行。\n* setTimeout()\n* setInterval()\n* setImmediate()\n* process.nextTick()\n\n猜测一下以下代码的运行结果\n```javascript\nsetTimeout(() => console.log(1));\nsetImmediate(() => console.log(2));\nprocess.nextTick(() => console.log(3));\nPromise.resolve().then(() => console.log(4));\n(() => console.log(5))();\n```\n运行结果如下。\n```javascript\n5\n3\n4\n1\n2\n```\n同步代码先于异步代码执行\n\n异步任务分为：\n* 追加在本轮循环的异步代码\n* 追加在次轮循环的异步代码\n\n```javascript\n// 下面两行，次轮循环执行 等待时间相同的情况下setTimeout先于setInterval执行\nsetTimeout(() => console.log(1));\nsetInterval(() => console.log(1));\nsetImmediate(() => console.log(2));\n// 下面两行，本轮循环执行\nprocess.nextTick(() => console.log(3));\nPromise.resolve().then(() => console.log(4));\n```\n\n#### setTimeout()\n次轮循环中执行\n\nsetTimeout()在timers阶段执行，只是将事件插入了\"任务队列\"，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。\n#### setImmediate()\n次轮循环中执行\n\nsetImmediate()在check阶段执行，主线程和事件队列的函数执行完成之后立即执行setImmediate指定的回调函数，和setTimeout(fn,0)的效果差不多   \n当setImmediate()与setTimeout()在同一个主模块中运行\b而不是一个I/O循环中的时候，受到进程性能的影响，他们的执行顺序是不定的，如下\b例：\n```javascript\n\n// timeout_vs_immediate.js\nsetTimeout(() => {\n  console.log('timeout');\n}, 0);\n\nsetImmediate(() => {\n  console.log('immediate');\n});\n\n$ node timeout_vs_immediate.js\ntimeout\nimmediate\n\n$ node timeout_vs_immediate.js\nimmediate\ntimeout\n```\n如果他们处在一个I/O循环里面，则总是setImmediate()先执行，如下例：\n```javascript \n// timeout_vs_immediate.js\nconst fs = require('fs');\n\nfs.readFile(__filename, () => {\n  setTimeout(() => {\n    console.log('timeout');\n  }, 0);\n  //总是setImmediate()先执行\n  setImmediate(() => {\n    console.log('immediate');\n  });\n});\n\n```\n#### process.nextTick()\n本轮循环中执行   \n不在event loop中，不属于任何一个阶段   \n同步代码执行完之后立即执行，所有异步里面最快的   \n\nprocess.nextTick()方法可以在当前\"执行栈\"的尾部-->下一次Event Loop（主线程读取\"任务队列\"）之前-->触发process指定的回调函数。也就是说，它指定的任务总是发生在所有异步任务之前，当前主线程的末尾。（nextTick虽然也会异步执行，但是不会给其他io事件执行的任何机会）\n \n**_最后process.maxTickDepth()的缺省值是1000，如果超过会报exceed callback stack。官方认为在递归中用process.nextTick会造成饥饿event loop，因为nextTick没有给其他异步事件执行的机会，递归中推荐用setImmediate_**\n### Promise的执行\n\nPromise的执行时在一个微任务队列中，process.nextTick()执行之后立即执行\n","slug":"深入理解node的Event Loop","published":1,"updated":"2018-05-06T11:31:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirlip600160i6tmcjhufyn","content":"<h3 id=\"Event-Loop-的六个阶段\"><a href=\"#Event-Loop-的六个阶段\" class=\"headerlink\" title=\"Event Loop 的六个阶段\"></a>Event Loop 的六个阶段</h3><h4 id=\"timers\"><a href=\"#timers\" class=\"headerlink\" title=\"timers\"></a>timers</h4><blockquote>\n<p>调用setTimeout(),setInterval()的回调</p>\n</blockquote>\n<p>Timers的回调函数在他指定的时间之后运行，因为他必须等待同步代码执行完毕，并且时间循环可能会被阻塞到poll阶段<br>另外系统的调度和其他回调的执行也有可能延迟他的执行</p>\n<h4 id=\"pending-callbacks\"><a href=\"#pending-callbacks\" class=\"headerlink\" title=\"pending callbacks\"></a>pending callbacks</h4><blockquote>\n<p>调用系统的错误回调</p>\n</blockquote>\n<h4 id=\"idle-prepare\"><a href=\"#idle-prepare\" class=\"headerlink\" title=\"idle, prepare\"></a>idle, prepare</h4><blockquote>\n<p>只在内部使用，不考虑</p>\n</blockquote>\n<h4 id=\"poll\"><a href=\"#poll\" class=\"headerlink\" title=\"poll\"></a>poll</h4><blockquote>\n<p>取新的I/O事件<br>执行I/O相关的回调（除关闭回调、定时器的回调、setImmediate()的回调）</p>\n</blockquote>\n<p>如果event loop进入了poll阶段，并且没有定时器，将会出现一下两种情况</p>\n<ul>\n<li>如果poll队列不为空，event loop将遍历poll队列里面的所有回调函数以同步方式去执行，知道队列耗尽，或者达到系统的限制   </li>\n<li>如果poll队列为空，将会出现两种情况<ul>\n<li>执行脚本中存在setImmediate(),event loop将结束poll阶段，到下一个check阶段去执行setImmediate()的回调</li>\n<li>如果脚本中没有setImmediate() event loop将一直等待\b回调被添加到poll队列，并且立即去执行他</li>\n</ul>\n</li>\n</ul>\n<p>一旦poll阶段为空，event loop 将会去检查已经到时间的定时器，如果有准备好的\b定时器，event loop将会返回到timers阶段去执行定时器的回调<br>event loop将在此阶段等待传入的链接，请求等</p>\n<h4 id=\"check\"><a href=\"#check\" class=\"headerlink\" title=\"check\"></a>check</h4><blockquote>\n<p>调用setImmediate()回调</p>\n</blockquote>\n<p>setImmediate()是一个特殊的定时器，处在event loop的一个单独阶段，poll阶段完成之后立即执行</p>\n<h4 id=\"close-callbacks\"><a href=\"#close-callbacks\" class=\"headerlink\" title=\"close callbacks\"></a>close callbacks</h4><blockquote>\n<p>一些关闭回调，比如 socket.on(‘close’, …)</p>\n</blockquote>\n<h3 id=\"Node四个定时器\"><a href=\"#Node四个定时器\" class=\"headerlink\" title=\"Node四个定时器\"></a>Node四个定时器</h3><p>为了协调异步任务，Node 提供了四个定时器，让任务可以在指定的时间运行。</p>\n<ul>\n<li>setTimeout()</li>\n<li>setInterval()</li>\n<li>setImmediate()</li>\n<li>process.nextTick()</li>\n</ul>\n<p>猜测一下以下代码的运行结果<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>));</span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>));</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>));</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>))();</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p>同步代码先于异步代码执行</p>\n<p>异步任务分为：</p>\n<ul>\n<li>追加在本轮循环的异步代码</li>\n<li>追加在次轮循环的异步代码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面两行，次轮循环执行 等待时间相同的情况下setTimeout先于setInterval执行</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>));</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>));</span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 下面两行，本轮循环执行</span></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout()\"></a>setTimeout()</h4><p>次轮循环中执行</p>\n<p>setTimeout()在timers阶段执行，只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</p>\n<h4 id=\"setImmediate\"><a href=\"#setImmediate\" class=\"headerlink\" title=\"setImmediate()\"></a>setImmediate()</h4><p>次轮循环中执行</p>\n<p>setImmediate()在check阶段执行，主线程和事件队列的函数执行完成之后立即执行setImmediate指定的回调函数，和setTimeout(fn,0)的效果差不多<br>当setImmediate()与setTimeout()在同一个主模块中运行\b而不是一个I/O循环中的时候，受到进程性能的影响，他们的执行顺序是不定的，如下\b例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// timeout_vs_immediate.js</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$ node timeout_vs_immediate.js</span><br><span class=\"line\">timeout</span><br><span class=\"line\">immediate</span><br><span class=\"line\"></span><br><span class=\"line\">$ node timeout_vs_immediate.js</span><br><span class=\"line\">immediate</span><br><span class=\"line\">timeout</span><br></pre></td></tr></table></figure></p>\n<p>如果他们处在一个I/O循环里面，则总是setImmediate()先执行，如下例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// timeout_vs_immediate.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(__filename, () =&gt; &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"comment\">//总是setImmediate()先执行</span></span><br><span class=\"line\">  setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"process-nextTick\"><a href=\"#process-nextTick\" class=\"headerlink\" title=\"process.nextTick()\"></a>process.nextTick()</h4><p>本轮循环中执行<br>不在event loop中，不属于任何一个阶段<br>同步代码执行完之后立即执行，所有异步里面最快的   </p>\n<p>process.nextTick()方法可以在当前”执行栈”的尾部–&gt;下一次Event Loop（主线程读取”任务队列”）之前–&gt;触发process指定的回调函数。也就是说，它指定的任务总是发生在所有异步任务之前，当前主线程的末尾。（nextTick虽然也会异步执行，但是不会给其他io事件执行的任何机会）</p>\n<p><strong><em>最后process.maxTickDepth()的缺省值是1000，如果超过会报exceed callback stack。官方认为在递归中用process.nextTick会造成饥饿event loop，因为nextTick没有给其他异步事件执行的机会，递归中推荐用setImmediate</em></strong></p>\n<h3 id=\"Promise的执行\"><a href=\"#Promise的执行\" class=\"headerlink\" title=\"Promise的执行\"></a>Promise的执行</h3><p>Promise的执行时在一个微任务队列中，process.nextTick()执行之后立即执行</p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h3 id=\"Event-Loop-的六个阶段\"><a href=\"#Event-Loop-的六个阶段\" class=\"headerlink\" title=\"Event Loop 的六个阶段\"></a>Event Loop 的六个阶段</h3><h4 id=\"timers\"><a href=\"#timers\" class=\"headerlink\" title=\"timers\"></a>timers</h4><blockquote>\n<p>调用setTimeout(),setInterval()的回调</p>\n</blockquote>\n<p>Timers的回调函数在他指定的时间之后运行，因为他必须等待同步代码执行完毕，并且时间循环可能会被阻塞到poll阶段<br>另外系统的调度和其他回调的执行也有可能延迟他的执行</p>\n<h4 id=\"pending-callbacks\"><a href=\"#pending-callbacks\" class=\"headerlink\" title=\"pending callbacks\"></a>pending callbacks</h4><blockquote>\n<p>调用系统的错误回调</p>\n</blockquote>\n<h4 id=\"idle-prepare\"><a href=\"#idle-prepare\" class=\"headerlink\" title=\"idle, prepare\"></a>idle, prepare</h4><blockquote>\n<p>只在内部使用，不考虑</p>\n</blockquote>\n<h4 id=\"poll\"><a href=\"#poll\" class=\"headerlink\" title=\"poll\"></a>poll</h4><blockquote>\n<p>取新的I/O事件<br>执行I/O相关的回调（除关闭回调、定时器的回调、setImmediate()的回调）</p>\n</blockquote>\n<p>如果event loop进入了poll阶段，并且没有定时器，将会出现一下两种情况</p>\n<ul>\n<li>如果poll队列不为空，event loop将遍历poll队列里面的所有回调函数以同步方式去执行，知道队列耗尽，或者达到系统的限制   </li>\n<li>如果poll队列为空，将会出现两种情况<ul>\n<li>执行脚本中存在setImmediate(),event loop将结束poll阶段，到下一个check阶段去执行setImmediate()的回调</li>\n<li>如果脚本中没有setImmediate() event loop将一直等待\b回调被添加到poll队列，并且立即去执行他</li>\n</ul>\n</li>\n</ul>\n<p>一旦poll阶段为空，event loop 将会去检查已经到时间的定时器，如果有准备好的\b定时器，event loop将会返回到timers阶段去执行定时器的回调<br>event loop将在此阶段等待传入的链接，请求等</p>\n<h4 id=\"check\"><a href=\"#check\" class=\"headerlink\" title=\"check\"></a>check</h4><blockquote>\n<p>调用setImmediate()回调</p>\n</blockquote>\n<p>setImmediate()是一个特殊的定时器，处在event loop的一个单独阶段，poll阶段完成之后立即执行</p>\n<h4 id=\"close-callbacks\"><a href=\"#close-callbacks\" class=\"headerlink\" title=\"close callbacks\"></a>close callbacks</h4><blockquote>\n<p>一些关闭回调，比如 socket.on(‘close’, …)</p>\n</blockquote>\n<h3 id=\"Node四个定时器\"><a href=\"#Node四个定时器\" class=\"headerlink\" title=\"Node四个定时器\"></a>Node四个定时器</h3><p>为了协调异步任务，Node 提供了四个定时器，让任务可以在指定的时间运行。</p>\n<ul>\n<li>setTimeout()</li>\n<li>setInterval()</li>\n<li>setImmediate()</li>\n<li>process.nextTick()</li>\n</ul>\n<p>猜测一下以下代码的运行结果<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>));</span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>));</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>));</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>))();</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p>同步代码先于异步代码执行</p>\n<p>异步任务分为：</p>\n<ul>\n<li>追加在本轮循环的异步代码</li>\n<li>追加在次轮循环的异步代码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面两行，次轮循环执行 等待时间相同的情况下setTimeout先于setInterval执行</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>));</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>));</span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 下面两行，本轮循环执行</span></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout()\"></a>setTimeout()</h4><p>次轮循环中执行</p>\n<p>setTimeout()在timers阶段执行，只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</p>\n<h4 id=\"setImmediate\"><a href=\"#setImmediate\" class=\"headerlink\" title=\"setImmediate()\"></a>setImmediate()</h4><p>次轮循环中执行</p>\n<p>setImmediate()在check阶段执行，主线程和事件队列的函数执行完成之后立即执行setImmediate指定的回调函数，和setTimeout(fn,0)的效果差不多<br>当setImmediate()与setTimeout()在同一个主模块中运行\b而不是一个I/O循环中的时候，受到进程性能的影响，他们的执行顺序是不定的，如下\b例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// timeout_vs_immediate.js</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$ node timeout_vs_immediate.js</span><br><span class=\"line\">timeout</span><br><span class=\"line\">immediate</span><br><span class=\"line\"></span><br><span class=\"line\">$ node timeout_vs_immediate.js</span><br><span class=\"line\">immediate</span><br><span class=\"line\">timeout</span><br></pre></td></tr></table></figure></p>\n<p>如果他们处在一个I/O循环里面，则总是setImmediate()先执行，如下例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// timeout_vs_immediate.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(__filename, () =&gt; &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'timeout'</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"comment\">//总是setImmediate()先执行</span></span><br><span class=\"line\">  setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'immediate'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"process-nextTick\"><a href=\"#process-nextTick\" class=\"headerlink\" title=\"process.nextTick()\"></a>process.nextTick()</h4><p>本轮循环中执行<br>不在event loop中，不属于任何一个阶段<br>同步代码执行完之后立即执行，所有异步里面最快的   </p>\n<p>process.nextTick()方法可以在当前”执行栈”的尾部–&gt;下一次Event Loop（主线程读取”任务队列”）之前–&gt;触发process指定的回调函数。也就是说，它指定的任务总是发生在所有异步任务之前，当前主线程的末尾。（nextTick虽然也会异步执行，但是不会给其他io事件执行的任何机会）</p>\n<p><strong><em>最后process.maxTickDepth()的缺省值是1000，如果超过会报exceed callback stack。官方认为在递归中用process.nextTick会造成饥饿event loop，因为nextTick没有给其他异步事件执行的机会，递归中推荐用setImmediate</em></strong></p>\n<h3 id=\"Promise的执行\"><a href=\"#Promise的执行\" class=\"headerlink\" title=\"Promise的执行\"></a>Promise的执行</h3><p>Promise的执行时在一个微任务队列中，process.nextTick()执行之后立即执行</p>\n"},{"title":"搭建node的GraphQL服务端","date":"2018-04-15T06:50:06.000Z","_content":"GraphQL和传统的REST API相比查询更加灵活，GraphQL 简单来说就是：取哪些数据是由client来决定，GraphQL 中，client 直接对 server说想要什么数据，server负责精确的返回目标数据，\n以nodejs为例搭建一个简单地服务端。 \n#### GraphQL工作的大致流程\n- 描述你的数据\n```javascript\ntype Project {\n  name: String\n  tagline: String\n  contributors: [User]\n}\n```\n- 请求你所要的数据\n```\n{\n  project(name: \"GraphQL\") {\n    tagline\n  }\n}\n```\n- 得到可预测的结果\n```\n{\n  \"project\": {\n    \"tagline\": \"A query language for APIs\"\n  }\n}\n```\n#### 需求分析设计 \n用户可以发表作品，可以对其他用户发表的作品投票\n#### 使用apollo-server-express初始化一个服务\n创建目录初始化项目\n```\nmkdir graphql_node_demo\ncd graphql_node_demo\nnpm init\n```\n\n安装依赖\n```\nnpm i express body-parser apollo-server-express graphql graphql-tools --save\n```\n在根目录下创建启动文件index.js\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst { graphqlExpress, graphiqlExpress } = require('apollo-server-express');\nconst { createServer } = require('http');\nconst PORT = process.env.PORT || 3000;\nconst NODE_ENV = process.env.NODE_ENV || 'development'\n\nconst start = async () => {\n  var app = express();\n\n  const buildOptions = async (req, res) => {\n    return {\n      context: {}\n    };\n  };\n  app.use('/graphql', bodyParser.json(), graphqlExpress(buildOptions));\n\n\n  app.use('/graphiql', graphiqlExpress({\n    endpointURL: '/graphql',\n  }));\n\n  const server = createServer(app);\n  server.listen(PORT, () => {\n    console.log(`fmlp.${NODE_ENV} GraphQL server running on port ${PORT}`)\n  });\n};\n\nstart();\n```\n现在可以启动服务尝试一下\n```\nnode index.js\n```\n在浏览器访问http://localhost:3000/graphiql 可以看到会报错，是因为还没有添加schema\n#### 增加schema\n创建一个schema文件夹，并在文件夹里面抽\b创建两个文件，index.js、resolvers.js\nindex.js里面定义我们的type，也就是描述数据，resolvers.js定义对返回数据的解析函数\n```\nmkdir schema\ncd schema\ntouch index.js\ntouch resolvers.js\n```\nschema/index.js文件中我们定义三个type\n```javascript\nconst {makeExecutableSchema} = require('graphql-tools');\nconst resolvers = require('./resolvers');\n// 在这里定义所有的类型\nconst typeDefs = `\n  type Link {\n    id: ID!\n    url: String!\n    description: String!\n    postedById:String!\n    postedBy: User\n  }\n  type Query {\n    allLinks: [Link!]! //定义了Query类型的查询，里面有一个查询所有Links,他的返回值是一个Link类型的数组\n  }\n  type User {\n    id: ID!\n    name: String!\n    email: String\n  }\n`;\n\n```\nschema/resolvers.js文件中去执行查询并且返回客户端\n```javascript\n\nlet links = [\n    {\n        id: 1,\n        url: \"http://url1\",\n        description: \"link1\",\n        postedById:\"userid1\"\n    }\n]\nmodule.exports = {\n    Query: {\n        allLinks: (_, data) => {\n            return links\n        },\n    }\n};\n```\nok 启动服务，刷新浏览器成功\n输入我们想要的查询\n\n```\n//此处需要哪些字段写哪些字段\n{\n  allLinks {\n    id\n    url\n    description\n    postedById\n  }\n}\n```\n就可以返回\n```json\n{\n  \"data\": {\n    \"allLinks\": [\n      {\n        \"id\": \"1\",\n        \"url\": \"http://url1\",\n        \"description\": \"link1\",\n        \"postedById\": \"userid1\"\n      }\n    ]\n  }\n}\n```\n这就是一个简单的graphql查询     \n另外Link中有一个字段postedBy是一个User类型，我们可以在resolvers.js中增加对Link中的User字段的解析，使Link列表可以返回每个Link是哪个用户发表的，这样\b实现了原始的关联查询   \n在resolvers.js中增加以下代码：\n```javascript\nLink: {\n        postedBy: ({ postedById }, data) => {\n            //此处需要根绝postedById查询数据库返回对用的user\n            return {\n                id: postedById,\n                name: \"zhangsan\",\n                email: \"zhangsan@11.com\"\n            }\n        }\n    },\n```\n由于我们没有对接真实的数据库，所以此处省略数据库查询的过程   \n刷新浏览器   \n现在的查询就可以是这样的\n```\n{\n  allLinks {\n    id\n    url\n    description\n    postedById\n    postedBy{\n      id\n      name\n      email\n    }\n  }\n}\n```\n返回值也变化了\n```json\n{\n  \"data\": {\n    \"allLinks\": [\n      {\n        \"id\": \"1\",\n        \"url\": \"http://url1\",\n        \"description\": \"link1\",\n        \"postedById\": \"userid1\",\n        \"postedBy\": {\n          \"id\": \"userid1\",\n          \"name\": \"zhangsan\",\n          \"email\": \"zhangsan@11.com\"\n        }\n      }\n    ]\n  }\n}\n```\n这里只是实现了简单地查询操作，另外还有一些创建编辑删除的操作是需要用到Mutation类型来实现，具体不写出来，直接看github源码\nhttps://github.com/danwbj/graphql-server-apollo.git\n\n\n\n\n","source":"_posts/搭建node的GraphQL服务端.md","raw":"---\ntitle: 搭建node的GraphQL服务端\ndate: 2018-04-15 14:50:06\ntags: [GraphQL]\ncategory: [node]\n---\nGraphQL和传统的REST API相比查询更加灵活，GraphQL 简单来说就是：取哪些数据是由client来决定，GraphQL 中，client 直接对 server说想要什么数据，server负责精确的返回目标数据，\n以nodejs为例搭建一个简单地服务端。 \n#### GraphQL工作的大致流程\n- 描述你的数据\n```javascript\ntype Project {\n  name: String\n  tagline: String\n  contributors: [User]\n}\n```\n- 请求你所要的数据\n```\n{\n  project(name: \"GraphQL\") {\n    tagline\n  }\n}\n```\n- 得到可预测的结果\n```\n{\n  \"project\": {\n    \"tagline\": \"A query language for APIs\"\n  }\n}\n```\n#### 需求分析设计 \n用户可以发表作品，可以对其他用户发表的作品投票\n#### 使用apollo-server-express初始化一个服务\n创建目录初始化项目\n```\nmkdir graphql_node_demo\ncd graphql_node_demo\nnpm init\n```\n\n安装依赖\n```\nnpm i express body-parser apollo-server-express graphql graphql-tools --save\n```\n在根目录下创建启动文件index.js\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst { graphqlExpress, graphiqlExpress } = require('apollo-server-express');\nconst { createServer } = require('http');\nconst PORT = process.env.PORT || 3000;\nconst NODE_ENV = process.env.NODE_ENV || 'development'\n\nconst start = async () => {\n  var app = express();\n\n  const buildOptions = async (req, res) => {\n    return {\n      context: {}\n    };\n  };\n  app.use('/graphql', bodyParser.json(), graphqlExpress(buildOptions));\n\n\n  app.use('/graphiql', graphiqlExpress({\n    endpointURL: '/graphql',\n  }));\n\n  const server = createServer(app);\n  server.listen(PORT, () => {\n    console.log(`fmlp.${NODE_ENV} GraphQL server running on port ${PORT}`)\n  });\n};\n\nstart();\n```\n现在可以启动服务尝试一下\n```\nnode index.js\n```\n在浏览器访问http://localhost:3000/graphiql 可以看到会报错，是因为还没有添加schema\n#### 增加schema\n创建一个schema文件夹，并在文件夹里面抽\b创建两个文件，index.js、resolvers.js\nindex.js里面定义我们的type，也就是描述数据，resolvers.js定义对返回数据的解析函数\n```\nmkdir schema\ncd schema\ntouch index.js\ntouch resolvers.js\n```\nschema/index.js文件中我们定义三个type\n```javascript\nconst {makeExecutableSchema} = require('graphql-tools');\nconst resolvers = require('./resolvers');\n// 在这里定义所有的类型\nconst typeDefs = `\n  type Link {\n    id: ID!\n    url: String!\n    description: String!\n    postedById:String!\n    postedBy: User\n  }\n  type Query {\n    allLinks: [Link!]! //定义了Query类型的查询，里面有一个查询所有Links,他的返回值是一个Link类型的数组\n  }\n  type User {\n    id: ID!\n    name: String!\n    email: String\n  }\n`;\n\n```\nschema/resolvers.js文件中去执行查询并且返回客户端\n```javascript\n\nlet links = [\n    {\n        id: 1,\n        url: \"http://url1\",\n        description: \"link1\",\n        postedById:\"userid1\"\n    }\n]\nmodule.exports = {\n    Query: {\n        allLinks: (_, data) => {\n            return links\n        },\n    }\n};\n```\nok 启动服务，刷新浏览器成功\n输入我们想要的查询\n\n```\n//此处需要哪些字段写哪些字段\n{\n  allLinks {\n    id\n    url\n    description\n    postedById\n  }\n}\n```\n就可以返回\n```json\n{\n  \"data\": {\n    \"allLinks\": [\n      {\n        \"id\": \"1\",\n        \"url\": \"http://url1\",\n        \"description\": \"link1\",\n        \"postedById\": \"userid1\"\n      }\n    ]\n  }\n}\n```\n这就是一个简单的graphql查询     \n另外Link中有一个字段postedBy是一个User类型，我们可以在resolvers.js中增加对Link中的User字段的解析，使Link列表可以返回每个Link是哪个用户发表的，这样\b实现了原始的关联查询   \n在resolvers.js中增加以下代码：\n```javascript\nLink: {\n        postedBy: ({ postedById }, data) => {\n            //此处需要根绝postedById查询数据库返回对用的user\n            return {\n                id: postedById,\n                name: \"zhangsan\",\n                email: \"zhangsan@11.com\"\n            }\n        }\n    },\n```\n由于我们没有对接真实的数据库，所以此处省略数据库查询的过程   \n刷新浏览器   \n现在的查询就可以是这样的\n```\n{\n  allLinks {\n    id\n    url\n    description\n    postedById\n    postedBy{\n      id\n      name\n      email\n    }\n  }\n}\n```\n返回值也变化了\n```json\n{\n  \"data\": {\n    \"allLinks\": [\n      {\n        \"id\": \"1\",\n        \"url\": \"http://url1\",\n        \"description\": \"link1\",\n        \"postedById\": \"userid1\",\n        \"postedBy\": {\n          \"id\": \"userid1\",\n          \"name\": \"zhangsan\",\n          \"email\": \"zhangsan@11.com\"\n        }\n      }\n    ]\n  }\n}\n```\n这里只是实现了简单地查询操作，另外还有一些创建编辑删除的操作是需要用到Mutation类型来实现，具体不写出来，直接看github源码\nhttps://github.com/danwbj/graphql-server-apollo.git\n\n\n\n\n","slug":"搭建node的GraphQL服务端","published":1,"updated":"2018-04-14T03:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirlip8001b0i6tjlob3yoj","content":"<p>GraphQL和传统的REST API相比查询更加灵活，GraphQL 简单来说就是：取哪些数据是由client来决定，GraphQL 中，client 直接对 server说想要什么数据，server负责精确的返回目标数据，<br>以nodejs为例搭建一个简单地服务端。 </p>\n<h4 id=\"GraphQL工作的大致流程\"><a href=\"#GraphQL工作的大致流程\" class=\"headerlink\" title=\"GraphQL工作的大致流程\"></a>GraphQL工作的大致流程</h4><ul>\n<li><p>描述你的数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Project &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span></span><br><span class=\"line\">  tagline: <span class=\"built_in\">String</span></span><br><span class=\"line\">  contributors: [User]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>请求你所要的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  project(name: &quot;GraphQL&quot;) &#123;</span><br><span class=\"line\">    tagline</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>得到可预测的结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;project&quot;: &#123;</span><br><span class=\"line\">    &quot;tagline&quot;: &quot;A query language for APIs&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"需求分析设计\"><a href=\"#需求分析设计\" class=\"headerlink\" title=\"需求分析设计\"></a>需求分析设计</h4><p>用户可以发表作品，可以对其他用户发表的作品投票</p>\n<h4 id=\"使用apollo-server-express初始化一个服务\"><a href=\"#使用apollo-server-express初始化一个服务\" class=\"headerlink\" title=\"使用apollo-server-express初始化一个服务\"></a>使用apollo-server-express初始化一个服务</h4><p>创建目录初始化项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir graphql_node_demo</span><br><span class=\"line\">cd graphql_node_demo</span><br><span class=\"line\">npm init</span><br></pre></td></tr></table></figure></p>\n<p>安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i express body-parser apollo-server-express graphql graphql-tools --save</span><br></pre></td></tr></table></figure></p>\n<p>在根目录下创建启动文件index.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; graphqlExpress, graphiqlExpress &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'apollo-server-express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; createServer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> PORT = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> NODE_ENV = process.env.NODE_ENV || <span class=\"string\">'development'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> start = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> buildOptions = <span class=\"keyword\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      context: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  app.use(<span class=\"string\">'/graphql'</span>, bodyParser.json(), graphqlExpress(buildOptions));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  app.use(<span class=\"string\">'/graphiql'</span>, graphiqlExpress(&#123;</span><br><span class=\"line\">    endpointURL: <span class=\"string\">'/graphql'</span>,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> server = createServer(app);</span><br><span class=\"line\">  server.listen(PORT, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`fmlp.<span class=\"subst\">$&#123;NODE_ENV&#125;</span> GraphQL server running on port <span class=\"subst\">$&#123;PORT&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">start();</span><br></pre></td></tr></table></figure></p>\n<p>现在可以启动服务尝试一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node index.js</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器访问<a href=\"http://localhost:3000/graphiql\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/graphiql</a> 可以看到会报错，是因为还没有添加schema</p>\n<h4 id=\"增加schema\"><a href=\"#增加schema\" class=\"headerlink\" title=\"增加schema\"></a>增加schema</h4><p>创建一个schema文件夹，并在文件夹里面抽\b创建两个文件，index.js、resolvers.js<br>index.js里面定义我们的type，也就是描述数据，resolvers.js定义对返回数据的解析函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir schema</span><br><span class=\"line\">cd schema</span><br><span class=\"line\">touch index.js</span><br><span class=\"line\">touch resolvers.js</span><br></pre></td></tr></table></figure></p>\n<p>schema/index.js文件中我们定义三个type<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;makeExecutableSchema&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'graphql-tools'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> resolvers = <span class=\"built_in\">require</span>(<span class=\"string\">'./resolvers'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 在这里定义所有的类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> typeDefs = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  type Link &#123;</span></span><br><span class=\"line\"><span class=\"string\">    id: ID!</span></span><br><span class=\"line\"><span class=\"string\">    url: String!</span></span><br><span class=\"line\"><span class=\"string\">    description: String!</span></span><br><span class=\"line\"><span class=\"string\">    postedById:String!</span></span><br><span class=\"line\"><span class=\"string\">    postedBy: User</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">    allLinks: [Link!]! //定义了Query类型的查询，里面有一个查询所有Links,他的返回值是一个Link类型的数组</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  type User &#123;</span></span><br><span class=\"line\"><span class=\"string\">    id: ID!</span></span><br><span class=\"line\"><span class=\"string\">    name: String!</span></span><br><span class=\"line\"><span class=\"string\">    email: String</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br></pre></td></tr></table></figure></p>\n<p>schema/resolvers.js文件中去执行查询并且返回客户端<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> links = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        url: <span class=\"string\">\"http://url1\"</span>,</span><br><span class=\"line\">        description: <span class=\"string\">\"link1\"</span>,</span><br><span class=\"line\">        postedById:<span class=\"string\">\"userid1\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">        allLinks: <span class=\"function\">(<span class=\"params\">_, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> links</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>ok 启动服务，刷新浏览器成功<br>输入我们想要的查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//此处需要哪些字段写哪些字段</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  allLinks &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">    url</span><br><span class=\"line\">    description</span><br><span class=\"line\">    postedById</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就可以返回<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"allLinks\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://url1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"link1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"postedById\"</span>: <span class=\"string\">\"userid1\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这就是一个简单的graphql查询<br>另外Link中有一个字段postedBy是一个User类型，我们可以在resolvers.js中增加对Link中的User字段的解析，使Link列表可以返回每个Link是哪个用户发表的，这样\b实现了原始的关联查询<br>在resolvers.js中增加以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Link: &#123;</span><br><span class=\"line\">        postedBy: <span class=\"function\">(<span class=\"params\">&#123; postedById &#125;, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此处需要根绝postedById查询数据库返回对用的user</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                id: postedById,</span><br><span class=\"line\">                name: <span class=\"string\">\"zhangsan\"</span>,</span><br><span class=\"line\">                email: <span class=\"string\">\"zhangsan@11.com\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure></p>\n<p>由于我们没有对接真实的数据库，所以此处省略数据库查询的过程<br>刷新浏览器<br>现在的查询就可以是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  allLinks &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">    url</span><br><span class=\"line\">    description</span><br><span class=\"line\">    postedById</span><br><span class=\"line\">    postedBy&#123;</span><br><span class=\"line\">      id</span><br><span class=\"line\">      name</span><br><span class=\"line\">      email</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>返回值也变化了<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"allLinks\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://url1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"link1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"postedById\"</span>: <span class=\"string\">\"userid1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"postedBy\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"userid1\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"zhangsan\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"zhangsan@11.com\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里只是实现了简单地查询操作，另外还有一些创建编辑删除的操作是需要用到Mutation类型来实现，具体不写出来，直接看github源码<br><a href=\"https://github.com/danwbj/graphql-server-apollo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/danwbj/graphql-server-apollo.git</a></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>GraphQL和传统的REST API相比查询更加灵活，GraphQL 简单来说就是：取哪些数据是由client来决定，GraphQL 中，client 直接对 server说想要什么数据，server负责精确的返回目标数据，<br>以nodejs为例搭建一个简单地服务端。 </p>\n<h4 id=\"GraphQL工作的大致流程\"><a href=\"#GraphQL工作的大致流程\" class=\"headerlink\" title=\"GraphQL工作的大致流程\"></a>GraphQL工作的大致流程</h4><ul>\n<li><p>描述你的数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Project &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span></span><br><span class=\"line\">  tagline: <span class=\"built_in\">String</span></span><br><span class=\"line\">  contributors: [User]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>请求你所要的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  project(name: &quot;GraphQL&quot;) &#123;</span><br><span class=\"line\">    tagline</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>得到可预测的结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;project&quot;: &#123;</span><br><span class=\"line\">    &quot;tagline&quot;: &quot;A query language for APIs&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"需求分析设计\"><a href=\"#需求分析设计\" class=\"headerlink\" title=\"需求分析设计\"></a>需求分析设计</h4><p>用户可以发表作品，可以对其他用户发表的作品投票</p>\n<h4 id=\"使用apollo-server-express初始化一个服务\"><a href=\"#使用apollo-server-express初始化一个服务\" class=\"headerlink\" title=\"使用apollo-server-express初始化一个服务\"></a>使用apollo-server-express初始化一个服务</h4><p>创建目录初始化项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir graphql_node_demo</span><br><span class=\"line\">cd graphql_node_demo</span><br><span class=\"line\">npm init</span><br></pre></td></tr></table></figure></p>\n<p>安装依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i express body-parser apollo-server-express graphql graphql-tools --save</span><br></pre></td></tr></table></figure></p>\n<p>在根目录下创建启动文件index.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; graphqlExpress, graphiqlExpress &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'apollo-server-express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; createServer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> PORT = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> NODE_ENV = process.env.NODE_ENV || <span class=\"string\">'development'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> start = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> buildOptions = <span class=\"keyword\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      context: &#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  app.use(<span class=\"string\">'/graphql'</span>, bodyParser.json(), graphqlExpress(buildOptions));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  app.use(<span class=\"string\">'/graphiql'</span>, graphiqlExpress(&#123;</span><br><span class=\"line\">    endpointURL: <span class=\"string\">'/graphql'</span>,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> server = createServer(app);</span><br><span class=\"line\">  server.listen(PORT, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`fmlp.<span class=\"subst\">$&#123;NODE_ENV&#125;</span> GraphQL server running on port <span class=\"subst\">$&#123;PORT&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">start();</span><br></pre></td></tr></table></figure></p>\n<p>现在可以启动服务尝试一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node index.js</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器访问<a href=\"http://localhost:3000/graphiql\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/graphiql</a> 可以看到会报错，是因为还没有添加schema</p>\n<h4 id=\"增加schema\"><a href=\"#增加schema\" class=\"headerlink\" title=\"增加schema\"></a>增加schema</h4><p>创建一个schema文件夹，并在文件夹里面抽\b创建两个文件，index.js、resolvers.js<br>index.js里面定义我们的type，也就是描述数据，resolvers.js定义对返回数据的解析函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir schema</span><br><span class=\"line\">cd schema</span><br><span class=\"line\">touch index.js</span><br><span class=\"line\">touch resolvers.js</span><br></pre></td></tr></table></figure></p>\n<p>schema/index.js文件中我们定义三个type<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;makeExecutableSchema&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'graphql-tools'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> resolvers = <span class=\"built_in\">require</span>(<span class=\"string\">'./resolvers'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 在这里定义所有的类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> typeDefs = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  type Link &#123;</span></span><br><span class=\"line\"><span class=\"string\">    id: ID!</span></span><br><span class=\"line\"><span class=\"string\">    url: String!</span></span><br><span class=\"line\"><span class=\"string\">    description: String!</span></span><br><span class=\"line\"><span class=\"string\">    postedById:String!</span></span><br><span class=\"line\"><span class=\"string\">    postedBy: User</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">    allLinks: [Link!]! //定义了Query类型的查询，里面有一个查询所有Links,他的返回值是一个Link类型的数组</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">  type User &#123;</span></span><br><span class=\"line\"><span class=\"string\">    id: ID!</span></span><br><span class=\"line\"><span class=\"string\">    name: String!</span></span><br><span class=\"line\"><span class=\"string\">    email: String</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br></pre></td></tr></table></figure></p>\n<p>schema/resolvers.js文件中去执行查询并且返回客户端<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> links = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: <span class=\"number\">1</span>,</span><br><span class=\"line\">        url: <span class=\"string\">\"http://url1\"</span>,</span><br><span class=\"line\">        description: <span class=\"string\">\"link1\"</span>,</span><br><span class=\"line\">        postedById:<span class=\"string\">\"userid1\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    Query: &#123;</span><br><span class=\"line\">        allLinks: <span class=\"function\">(<span class=\"params\">_, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> links</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>ok 启动服务，刷新浏览器成功<br>输入我们想要的查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//此处需要哪些字段写哪些字段</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  allLinks &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">    url</span><br><span class=\"line\">    description</span><br><span class=\"line\">    postedById</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就可以返回<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"allLinks\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://url1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"link1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"postedById\"</span>: <span class=\"string\">\"userid1\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这就是一个简单的graphql查询<br>另外Link中有一个字段postedBy是一个User类型，我们可以在resolvers.js中增加对Link中的User字段的解析，使Link列表可以返回每个Link是哪个用户发表的，这样\b实现了原始的关联查询<br>在resolvers.js中增加以下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Link: &#123;</span><br><span class=\"line\">        postedBy: <span class=\"function\">(<span class=\"params\">&#123; postedById &#125;, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//此处需要根绝postedById查询数据库返回对用的user</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                id: postedById,</span><br><span class=\"line\">                name: <span class=\"string\">\"zhangsan\"</span>,</span><br><span class=\"line\">                email: <span class=\"string\">\"zhangsan@11.com\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure></p>\n<p>由于我们没有对接真实的数据库，所以此处省略数据库查询的过程<br>刷新浏览器<br>现在的查询就可以是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  allLinks &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">    url</span><br><span class=\"line\">    description</span><br><span class=\"line\">    postedById</span><br><span class=\"line\">    postedBy&#123;</span><br><span class=\"line\">      id</span><br><span class=\"line\">      name</span><br><span class=\"line\">      email</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>返回值也变化了<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"allLinks\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://url1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"link1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"postedById\"</span>: <span class=\"string\">\"userid1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"postedBy\"</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"userid1\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"zhangsan\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"zhangsan@11.com\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里只是实现了简单地查询操作，另外还有一些创建编辑删除的操作是需要用到Mutation类型来实现，具体不写出来，直接看github源码<br><a href=\"https://github.com/danwbj/graphql-server-apollo.git\" target=\"_blank\" rel=\"noopener\">https://github.com/danwbj/graphql-server-apollo.git</a></p>\n"},{"title":"docker常用命令整理","date":"2018-03-16T06:15:35.000Z","_content":"#### docker信息\n```bash\n# 查看docker版本\n$ docker version\n\n# 查看docker系统信息\n$ docker info\n```\n#### 镜像\n```bash\n# 查看镜像列表\n$ docker images\n\n# 删除镜像\n$ docker rmi name/id\n\n# 基于Dockerfile文件build镜像\n$ docker  build [options] 镜像名 .  \n注意： .代表Dockerfile文件在当前路径\n    -t 为容器重新分配一个伪终端\n\n# 创建一个新的容器并跑一个镜像\ndocker run [options]  image \n    -i 以交互模式运行\n    -t 为容器重新分配一个伪终端\n    -d 运行到后台\n    -p 80:80\t端口映射\n    --name xxx 为容器指定一个名称\n    --restart=always 当容器退出时重新启动,默认为\"no\"\n\n# 保存images为一个tar文件\n$ docker save image_name -o name.tar\n或者\n$ docker save image_name > name.tar\n\n#从一个tar文件加载images\n$ docker load < name.tar\n\n```\n \n#### 容器\n```bash\n# 显示正在运行的容器\n$ docker ps\n    -a 显示所有容器，包含不是运行中的容器\n\n# 停止运行中的容器\n$ docker stop 容器name/id\n\n#删除容器\n$ docker rm 容器name/id\n\n#进入到某个容器中\n$ docker exec -it 容器name/id /bin/bash\t\n\n#通过差异性创建一个新的image\n$ docker commit 容器id 新的镜像名\neg: docker commit bf2eff778794 dandanwu/testimage:v2\t\n\n```\n\n#### Dockerfile编写\nDockerFile分为四部分组成：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令\n```bash\n#第一行必须指令基于的基础镜像\nFROM ubutu\n\n#维护者信息\nMAINTAINER docker_user  docker_user@mail.com\n\n#使用哪个用户跑container \nUSER\n\n#将文件<src>拷贝到container的文件系统对应的路径<dest>\nCOPY file.js /home/file.js\n\n#将文件<src>拷贝到container的文件系统对应的路径<dest>\nADD file.js /home/file.js\n\n#在终端中执行命令\nRUN apt-get update && apt-get install -y ngnix \nRUN echo \"\\ndaemon off;\">>/etc/ngnix/nignix.conf\n\n#container内部服务开启的端口，主机上要用还得在启动container时，做host-container的端口映射\nEXPOSE 8017\n\n#设置环境变量\nENV\n\n#切换目录用，可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效\nWORKDIR ../\n\n#可以将本地文件夹或者其他container的文件夹挂载到container中。\nVOLUME\n\n#容器启动时执行指令\n#一个Dockerfile中只能有一条CMD命令，多条则只执行最后一条CMD\n#可替换性：当docker run command的命令匹配到CMD command时，会替换CMD执行的命令。\nCMD /usr/sbin/ngnix\n\n#需要执行多条命令的时候可以像下边这样写\nCMD [ \"cmd1\", \"cmd2\", \"cmd3\" ]\n\n#container启动时执行的命令，但是一个Dockerfile中只能有一条ENTRYPOINT命令，如果多条，则只执行最后一条\n#ENTRYPOINT没有CMD的可替换特性\nENTRYPOINT /usr/sbin/ngnix\n\n```\n\n","source":"_posts/docker常用命令整理.md","raw":"---\ntitle: docker常用命令整理\ndate: 2018-03-16 14:15:35\ntags: [docker ]\ncategory: [docker]\n---\n#### docker信息\n```bash\n# 查看docker版本\n$ docker version\n\n# 查看docker系统信息\n$ docker info\n```\n#### 镜像\n```bash\n# 查看镜像列表\n$ docker images\n\n# 删除镜像\n$ docker rmi name/id\n\n# 基于Dockerfile文件build镜像\n$ docker  build [options] 镜像名 .  \n注意： .代表Dockerfile文件在当前路径\n    -t 为容器重新分配一个伪终端\n\n# 创建一个新的容器并跑一个镜像\ndocker run [options]  image \n    -i 以交互模式运行\n    -t 为容器重新分配一个伪终端\n    -d 运行到后台\n    -p 80:80\t端口映射\n    --name xxx 为容器指定一个名称\n    --restart=always 当容器退出时重新启动,默认为\"no\"\n\n# 保存images为一个tar文件\n$ docker save image_name -o name.tar\n或者\n$ docker save image_name > name.tar\n\n#从一个tar文件加载images\n$ docker load < name.tar\n\n```\n \n#### 容器\n```bash\n# 显示正在运行的容器\n$ docker ps\n    -a 显示所有容器，包含不是运行中的容器\n\n# 停止运行中的容器\n$ docker stop 容器name/id\n\n#删除容器\n$ docker rm 容器name/id\n\n#进入到某个容器中\n$ docker exec -it 容器name/id /bin/bash\t\n\n#通过差异性创建一个新的image\n$ docker commit 容器id 新的镜像名\neg: docker commit bf2eff778794 dandanwu/testimage:v2\t\n\n```\n\n#### Dockerfile编写\nDockerFile分为四部分组成：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令\n```bash\n#第一行必须指令基于的基础镜像\nFROM ubutu\n\n#维护者信息\nMAINTAINER docker_user  docker_user@mail.com\n\n#使用哪个用户跑container \nUSER\n\n#将文件<src>拷贝到container的文件系统对应的路径<dest>\nCOPY file.js /home/file.js\n\n#将文件<src>拷贝到container的文件系统对应的路径<dest>\nADD file.js /home/file.js\n\n#在终端中执行命令\nRUN apt-get update && apt-get install -y ngnix \nRUN echo \"\\ndaemon off;\">>/etc/ngnix/nignix.conf\n\n#container内部服务开启的端口，主机上要用还得在启动container时，做host-container的端口映射\nEXPOSE 8017\n\n#设置环境变量\nENV\n\n#切换目录用，可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效\nWORKDIR ../\n\n#可以将本地文件夹或者其他container的文件夹挂载到container中。\nVOLUME\n\n#容器启动时执行指令\n#一个Dockerfile中只能有一条CMD命令，多条则只执行最后一条CMD\n#可替换性：当docker run command的命令匹配到CMD command时，会替换CMD执行的命令。\nCMD /usr/sbin/ngnix\n\n#需要执行多条命令的时候可以像下边这样写\nCMD [ \"cmd1\", \"cmd2\", \"cmd3\" ]\n\n#container启动时执行的命令，但是一个Dockerfile中只能有一条ENTRYPOINT命令，如果多条，则只执行最后一条\n#ENTRYPOINT没有CMD的可替换特性\nENTRYPOINT /usr/sbin/ngnix\n\n```\n\n","slug":"docker常用命令整理","published":1,"updated":"2018-04-16T03:38:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiirlip9001d0i6tbs3tqrse","content":"<h4 id=\"docker信息\"><a href=\"#docker信息\" class=\"headerlink\" title=\"docker信息\"></a>docker信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker版本</span></span><br><span class=\"line\">$ docker version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看docker系统信息</span></span><br><span class=\"line\">$ docker info</span><br></pre></td></tr></table></figure>\n<h4 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看镜像列表</span></span><br><span class=\"line\">$ docker images</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除镜像</span></span><br><span class=\"line\">$ docker rmi name/id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基于Dockerfile文件build镜像</span></span><br><span class=\"line\">$ docker  build [options] 镜像名 .  </span><br><span class=\"line\">注意： .代表Dockerfile文件在当前路径</span><br><span class=\"line\">    -t 为容器重新分配一个伪终端</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个新的容器并跑一个镜像</span></span><br><span class=\"line\">docker run [options]  image </span><br><span class=\"line\">    -i 以交互模式运行</span><br><span class=\"line\">    -t 为容器重新分配一个伪终端</span><br><span class=\"line\">    -d 运行到后台</span><br><span class=\"line\">    -p 80:80\t端口映射</span><br><span class=\"line\">    --name xxx 为容器指定一个名称</span><br><span class=\"line\">    --restart=always 当容器退出时重新启动,默认为<span class=\"string\">\"no\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存images为一个tar文件</span></span><br><span class=\"line\">$ docker save image_name -o name.tar</span><br><span class=\"line\">或者</span><br><span class=\"line\">$ docker save image_name &gt; name.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从一个tar文件加载images</span></span><br><span class=\"line\">$ docker load &lt; name.tar</span><br></pre></td></tr></table></figure>\n<h4 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示正在运行的容器</span></span><br><span class=\"line\">$ docker ps</span><br><span class=\"line\">    -a 显示所有容器，包含不是运行中的容器</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止运行中的容器</span></span><br><span class=\"line\">$ docker stop 容器name/id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除容器</span></span><br><span class=\"line\">$ docker rm 容器name/id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进入到某个容器中</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it 容器name/id /bin/bash\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#通过差异性创建一个新的image</span></span><br><span class=\"line\">$ docker commit 容器id 新的镜像名</span><br><span class=\"line\">eg: docker commit bf2eff778794 dandanwu/testimage:v2</span><br></pre></td></tr></table></figure>\n<h4 id=\"Dockerfile编写\"><a href=\"#Dockerfile编写\" class=\"headerlink\" title=\"Dockerfile编写\"></a>Dockerfile编写</h4><p>DockerFile分为四部分组成：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#第一行必须指令基于的基础镜像</span></span><br><span class=\"line\">FROM ubutu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#维护者信息</span></span><br><span class=\"line\">MAINTAINER docker_user  docker_user@mail.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用哪个用户跑container </span></span><br><span class=\"line\">USER</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将文件&lt;src&gt;拷贝到container的文件系统对应的路径&lt;dest&gt;</span></span><br><span class=\"line\">COPY file.js /home/file.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将文件&lt;src&gt;拷贝到container的文件系统对应的路径&lt;dest&gt;</span></span><br><span class=\"line\">ADD file.js /home/file.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在终端中执行命令</span></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y ngnix </span><br><span class=\"line\">RUN <span class=\"built_in\">echo</span> <span class=\"string\">\"\\ndaemon off;\"</span>&gt;&gt;/etc/ngnix/nignix.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#container内部服务开启的端口，主机上要用还得在启动container时，做host-container的端口映射</span></span><br><span class=\"line\">EXPOSE 8017</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置环境变量</span></span><br><span class=\"line\">ENV</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#切换目录用，可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效</span></span><br><span class=\"line\">WORKDIR ../</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#可以将本地文件夹或者其他container的文件夹挂载到container中。</span></span><br><span class=\"line\">VOLUME</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#容器启动时执行指令</span></span><br><span class=\"line\"><span class=\"comment\">#一个Dockerfile中只能有一条CMD命令，多条则只执行最后一条CMD</span></span><br><span class=\"line\"><span class=\"comment\">#可替换性：当docker run command的命令匹配到CMD command时，会替换CMD执行的命令。</span></span><br><span class=\"line\">CMD /usr/sbin/ngnix</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#需要执行多条命令的时候可以像下边这样写</span></span><br><span class=\"line\">CMD [ <span class=\"string\">\"cmd1\"</span>, <span class=\"string\">\"cmd2\"</span>, <span class=\"string\">\"cmd3\"</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#container启动时执行的命令，但是一个Dockerfile中只能有一条ENTRYPOINT命令，如果多条，则只执行最后一条</span></span><br><span class=\"line\"><span class=\"comment\">#ENTRYPOINT没有CMD的可替换特性</span></span><br><span class=\"line\">ENTRYPOINT /usr/sbin/ngnix</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h4 id=\"docker信息\"><a href=\"#docker信息\" class=\"headerlink\" title=\"docker信息\"></a>docker信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker版本</span></span><br><span class=\"line\">$ docker version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看docker系统信息</span></span><br><span class=\"line\">$ docker info</span><br></pre></td></tr></table></figure>\n<h4 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看镜像列表</span></span><br><span class=\"line\">$ docker images</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除镜像</span></span><br><span class=\"line\">$ docker rmi name/id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基于Dockerfile文件build镜像</span></span><br><span class=\"line\">$ docker  build [options] 镜像名 .  </span><br><span class=\"line\">注意： .代表Dockerfile文件在当前路径</span><br><span class=\"line\">    -t 为容器重新分配一个伪终端</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个新的容器并跑一个镜像</span></span><br><span class=\"line\">docker run [options]  image </span><br><span class=\"line\">    -i 以交互模式运行</span><br><span class=\"line\">    -t 为容器重新分配一个伪终端</span><br><span class=\"line\">    -d 运行到后台</span><br><span class=\"line\">    -p 80:80\t端口映射</span><br><span class=\"line\">    --name xxx 为容器指定一个名称</span><br><span class=\"line\">    --restart=always 当容器退出时重新启动,默认为<span class=\"string\">\"no\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存images为一个tar文件</span></span><br><span class=\"line\">$ docker save image_name -o name.tar</span><br><span class=\"line\">或者</span><br><span class=\"line\">$ docker save image_name &gt; name.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从一个tar文件加载images</span></span><br><span class=\"line\">$ docker load &lt; name.tar</span><br></pre></td></tr></table></figure>\n<h4 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示正在运行的容器</span></span><br><span class=\"line\">$ docker ps</span><br><span class=\"line\">    -a 显示所有容器，包含不是运行中的容器</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止运行中的容器</span></span><br><span class=\"line\">$ docker stop 容器name/id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除容器</span></span><br><span class=\"line\">$ docker rm 容器name/id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进入到某个容器中</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it 容器name/id /bin/bash\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#通过差异性创建一个新的image</span></span><br><span class=\"line\">$ docker commit 容器id 新的镜像名</span><br><span class=\"line\">eg: docker commit bf2eff778794 dandanwu/testimage:v2</span><br></pre></td></tr></table></figure>\n<h4 id=\"Dockerfile编写\"><a href=\"#Dockerfile编写\" class=\"headerlink\" title=\"Dockerfile编写\"></a>Dockerfile编写</h4><p>DockerFile分为四部分组成：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#第一行必须指令基于的基础镜像</span></span><br><span class=\"line\">FROM ubutu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#维护者信息</span></span><br><span class=\"line\">MAINTAINER docker_user  docker_user@mail.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用哪个用户跑container </span></span><br><span class=\"line\">USER</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将文件&lt;src&gt;拷贝到container的文件系统对应的路径&lt;dest&gt;</span></span><br><span class=\"line\">COPY file.js /home/file.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将文件&lt;src&gt;拷贝到container的文件系统对应的路径&lt;dest&gt;</span></span><br><span class=\"line\">ADD file.js /home/file.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在终端中执行命令</span></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y ngnix </span><br><span class=\"line\">RUN <span class=\"built_in\">echo</span> <span class=\"string\">\"\\ndaemon off;\"</span>&gt;&gt;/etc/ngnix/nignix.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#container内部服务开启的端口，主机上要用还得在启动container时，做host-container的端口映射</span></span><br><span class=\"line\">EXPOSE 8017</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置环境变量</span></span><br><span class=\"line\">ENV</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#切换目录用，可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效</span></span><br><span class=\"line\">WORKDIR ../</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#可以将本地文件夹或者其他container的文件夹挂载到container中。</span></span><br><span class=\"line\">VOLUME</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#容器启动时执行指令</span></span><br><span class=\"line\"><span class=\"comment\">#一个Dockerfile中只能有一条CMD命令，多条则只执行最后一条CMD</span></span><br><span class=\"line\"><span class=\"comment\">#可替换性：当docker run command的命令匹配到CMD command时，会替换CMD执行的命令。</span></span><br><span class=\"line\">CMD /usr/sbin/ngnix</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#需要执行多条命令的时候可以像下边这样写</span></span><br><span class=\"line\">CMD [ <span class=\"string\">\"cmd1\"</span>, <span class=\"string\">\"cmd2\"</span>, <span class=\"string\">\"cmd3\"</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#container启动时执行的命令，但是一个Dockerfile中只能有一条ENTRYPOINT命令，如果多条，则只执行最后一条</span></span><br><span class=\"line\"><span class=\"comment\">#ENTRYPOINT没有CMD的可替换特性</span></span><br><span class=\"line\">ENTRYPOINT /usr/sbin/ngnix</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjiirlinz00000i6tfjxy8mc8","category_id":"cjiirlio900040i6tj0xegroi","_id":"cjiirlios000e0i6ti6pfo53j"},{"post_id":"cjiirliop000c0i6tb5ae7jm5","category_id":"cjiirlioo000a0i6txu6czo4q","_id":"cjiirliow000k0i6t2stvlid5"},{"post_id":"cjiirlioe00060i6tmyiw8nvj","category_id":"cjiirlioo000a0i6txu6czo4q","_id":"cjiirlioy000p0i6t3cnlkovh"},{"post_id":"cjiirlior000d0i6taiq6eway","category_id":"cjiirlioo000a0i6txu6czo4q","_id":"cjiirlip0000r0i6tktp0pg9i"},{"post_id":"cjiirliot000h0i6tcpxv7fup","category_id":"cjiirlioo000a0i6txu6czo4q","_id":"cjiirlip1000v0i6tw3frywhi"},{"post_id":"cjiirliol00080i6t5v3e24ri","category_id":"cjiirlios000f0i6tjuk8xxg8","_id":"cjiirlip3000x0i6ty84hsx3s"},{"post_id":"cjiirliom00090i6tgncnz2bl","category_id":"cjiirlioo000a0i6txu6czo4q","_id":"cjiirlip400100i6tm140l52e"},{"post_id":"cjiirliov000j0i6t12d8ajad","category_id":"cjiirlip0000s0i6tamt4p9j5","_id":"cjiirlip600140i6tt30j7z64"},{"post_id":"cjiirlip2000w0i6tiazzeskb","category_id":"cjiirlip0000s0i6tamt4p9j5","_id":"cjiirlip800190i6t4ajfbumv"},{"post_id":"cjiirlip3000z0i6tf1vjvp75","category_id":"cjiirlios000f0i6tjuk8xxg8","_id":"cjiirlip9001c0i6tup79157n"},{"post_id":"cjiirlip500130i6trmeue3xp","category_id":"cjiirlip0000s0i6tamt4p9j5","_id":"cjiirlipb001g0i6thelo8sby"},{"post_id":"cjiirlioy000o0i6tlxvy3a8y","category_id":"cjiirlip3000y0i6t21q9g4xt","_id":"cjiirlipb001h0i6tahr4plwa"},{"post_id":"cjiirlip600160i6tmcjhufyn","category_id":"cjiirlios000f0i6tjuk8xxg8","_id":"cjiirlipb001j0i6tk5an1v09"},{"post_id":"cjiirlip8001b0i6tjlob3yoj","category_id":"cjiirlios000f0i6tjuk8xxg8","_id":"cjiirlipc001m0i6t2nt18cep"},{"post_id":"cjiirlioz000q0i6t5leqnuo8","category_id":"cjiirlip3000y0i6t21q9g4xt","_id":"cjiirlipc001o0i6tchltgxaf"},{"post_id":"cjiirlip1000u0i6tqarll5io","category_id":"cjiirlipa001e0i6tx6pao1p6","_id":"cjiirlipd001r0i6tx6vl4nej"},{"post_id":"cjiirlip9001d0i6tbs3tqrse","category_id":"cjiirlipb001i0i6tqmjgkidr","_id":"cjiirlipd001s0i6tan2mf8gw"}],"PostTag":[{"post_id":"cjiirlinz00000i6tfjxy8mc8","tag_id":"cjiirliod00050i6t2y21nzt0","_id":"cjiirliou000i0i6t4rhae64u"},{"post_id":"cjiirlinz00000i6tfjxy8mc8","tag_id":"cjiirlioo000b0i6tl8lmutvt","_id":"cjiirliow000l0i6tytefg55p"},{"post_id":"cjiirlio500020i6t217r5x3h","tag_id":"cjiirlios000g0i6tiz5kvskf","_id":"cjiirlip500120i6tshmjq18b"},{"post_id":"cjiirlio500020i6t217r5x3h","tag_id":"cjiirliow000n0i6to2t7nzsl","_id":"cjiirlip600150i6tf8xxjb5j"},{"post_id":"cjiirlio500020i6t217r5x3h","tag_id":"cjiirlip0000t0i6tvbddxi06","_id":"cjiirlip8001a0i6tq7mwj94s"},{"post_id":"cjiirlioe00060i6tmyiw8nvj","tag_id":"cjiirlip400110i6twu5ta04r","_id":"cjiirlipc001l0i6t43grrq6s"},{"post_id":"cjiirlioe00060i6tmyiw8nvj","tag_id":"cjiirlip800180i6tj3cjwz7v","_id":"cjiirlipc001n0i6t34ea00sb"},{"post_id":"cjiirlioe00060i6tmyiw8nvj","tag_id":"cjiirlipa001f0i6to6j2hgy6","_id":"cjiirlipd001q0i6th104ymjv"},{"post_id":"cjiirliol00080i6t5v3e24ri","tag_id":"cjiirlipb001k0i6t4ay87vgq","_id":"cjiirlipe001u0i6twzo4v6nt"},{"post_id":"cjiirliol00080i6t5v3e24ri","tag_id":"cjiirliow000n0i6to2t7nzsl","_id":"cjiirlipe001v0i6t4z0wa76k"},{"post_id":"cjiirliom00090i6tgncnz2bl","tag_id":"cjiirlipd001t0i6t17ye34a1","_id":"cjiirlipg001x0i6t8b266ncy"},{"post_id":"cjiirliop000c0i6tb5ae7jm5","tag_id":"cjiirlipf001w0i6txyuuz5ym","_id":"cjiirliph001z0i6taxl8d7zz"},{"post_id":"cjiirlior000d0i6taiq6eway","tag_id":"cjiirlipg001y0i6txjxedxm5","_id":"cjiirlipi00210i6tu5l1boll"},{"post_id":"cjiirliot000h0i6tcpxv7fup","tag_id":"cjiirlipi00200i6toc9sc6r0","_id":"cjiirlipj00230i6tjho2frju"},{"post_id":"cjiirliov000j0i6t12d8ajad","tag_id":"cjiirlipi00220i6tztix4pul","_id":"cjiirlipj00250i6tlpxk8s8k"},{"post_id":"cjiirlioy000o0i6tlxvy3a8y","tag_id":"cjiirliow000n0i6to2t7nzsl","_id":"cjiirlipk00270i6t07cwcr5c"},{"post_id":"cjiirlioy000o0i6tlxvy3a8y","tag_id":"cjiirlipj00240i6tn2ou1s1z","_id":"cjiirlipk00280i6te7liozzr"},{"post_id":"cjiirlioz000q0i6t5leqnuo8","tag_id":"cjiirliow000n0i6to2t7nzsl","_id":"cjiirlipk002a0i6t4lmm73nt"},{"post_id":"cjiirlioz000q0i6t5leqnuo8","tag_id":"cjiirlipk00260i6tn5o5tzxk","_id":"cjiirlipl002b0i6th0k7w499"},{"post_id":"cjiirlip1000u0i6tqarll5io","tag_id":"cjiirlipk00290i6tpt3yp9di","_id":"cjiirlipl002e0i6ttkfz6ppp"},{"post_id":"cjiirlip1000u0i6tqarll5io","tag_id":"cjiirlipl002c0i6to4fp84ds","_id":"cjiirlipm002f0i6t56bymm1m"},{"post_id":"cjiirlip2000w0i6tiazzeskb","tag_id":"cjiirlipl002d0i6t7zy6tb2t","_id":"cjiirlipm002h0i6t3mex9gjz"},{"post_id":"cjiirlip3000z0i6tf1vjvp75","tag_id":"cjiirlipm002g0i6t4t0p68be","_id":"cjiirlipn002k0i6t8o07hojq"},{"post_id":"cjiirlip3000z0i6tf1vjvp75","tag_id":"cjiirlipm002i0i6t5cg1d24u","_id":"cjiirlipo002l0i6tqizd1ldl"},{"post_id":"cjiirlip500130i6trmeue3xp","tag_id":"cjiirlipn002j0i6t398s1a4k","_id":"cjiirlipo002n0i6tjpjpwh3z"},{"post_id":"cjiirlip600160i6tmcjhufyn","tag_id":"cjiirlipb001k0i6t4ay87vgq","_id":"cjiirlipq002q0i6tdtpuhswq"},{"post_id":"cjiirlip600160i6tmcjhufyn","tag_id":"cjiirlipp002o0i6tlo3my9qr","_id":"cjiirlipq002r0i6tchdxohkd"},{"post_id":"cjiirlip8001b0i6tjlob3yoj","tag_id":"cjiirlipq002p0i6tl4dlae3v","_id":"cjiirlipr002t0i6tyl3sy872"},{"post_id":"cjiirlip9001d0i6tbs3tqrse","tag_id":"cjiirlipr002s0i6tt8wvjveu","_id":"cjiirlips002u0i6tm43lis5e"}],"Tag":[{"name":"nomad","_id":"cjiirliod00050i6t2y21nzt0"},{"name":"分布式，微服务","_id":"cjiirlioo000b0i6tl8lmutvt"},{"name":"nginx","_id":"cjiirlios000g0i6tiz5kvskf"},{"name":"linux","_id":"cjiirliow000n0i6to2t7nzsl"},{"name":"CentOS7","_id":"cjiirlip0000t0i6tvbddxi06"},{"name":"call()","_id":"cjiirlip400110i6twu5ta04r"},{"name":"apply()","_id":"cjiirlip800180i6tj3cjwz7v"},{"name":"bind()","_id":"cjiirlipa001f0i6to6j2hgy6"},{"name":"node","_id":"cjiirlipb001k0i6t4ay87vgq"},{"name":"es6","_id":"cjiirlipd001t0i6t17ye34a1"},{"name":"垃圾回收","_id":"cjiirlipf001w0i6txyuuz5ym"},{"name":"变量函数提升","_id":"cjiirlipg001y0i6txjxedxm5"},{"name":"引用赋值","_id":"cjiirlipi00200i6toc9sc6r0"},{"name":"插入排序","_id":"cjiirlipi00220i6tztix4pul"},{"name":"常用命令","_id":"cjiirlipj00240i6tn2ou1s1z"},{"name":"操作系统","_id":"cjiirlipk00260i6tn5o5tzxk"},{"name":"mac","_id":"cjiirlipk00290i6tpt3yp9di"},{"name":"shell","_id":"cjiirlipl002c0i6to4fp84ds"},{"name":"冒泡排序","_id":"cjiirlipl002d0i6t7zy6tb2t"},{"name":"js","_id":"cjiirlipm002g0i6t4t0p68be"},{"name":"promise","_id":"cjiirlipm002i0i6t5cg1d24u"},{"name":"素数","_id":"cjiirlipn002j0i6t398s1a4k"},{"name":"setTimeout","_id":"cjiirlipp002o0i6tlo3my9qr"},{"name":"GraphQL","_id":"cjiirlipq002p0i6tl4dlae3v"},{"name":"docker","_id":"cjiirlipr002s0i6tt8wvjveu"}]}}