{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/wechatpay.png","path":"images/wechatpay.png","modified":1,"renderable":0},{"_id":"source/images/alipay.png","path":"images/alipay.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"afabf032b4ee112a211833e03681ae9fd5d89550","modified":1517897245000},{"_id":"source/CNAME","hash":"875f9203b30316e1fc1843faf704063faf22c328","modified":1517841122000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1517834513000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1517834513000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1517834513000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1517834513000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1517834513000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1517834513000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1517834513000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1517834513000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1517834513000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1517834513000},{"_id":"themes/next/README.cn.md","hash":"5d8af3d8de8d3926126a738519e97c8442b0effe","modified":1517834513000},{"_id":"themes/next/README.md","hash":"44b28d995681a7c48bfe3d0577d6203812d07e59","modified":1517834513000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1517834513000},{"_id":"themes/next/_config.yml","hash":"529118e9ea5977e97f5f018ebcae8dd8a5f0c36e","modified":1517895587000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1517834513000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1517834513000},{"_id":"source/_posts/Node四个定时器.md","hash":"aaa7f84a9c67976d25e19afd6fcc098d1605ae8e","modified":1519898249000},{"_id":"source/_data/next.yml","hash":"81d93b2aee69e0d16c145530f5e38eeaaf00cc96","modified":1519893080000},{"_id":"source/_posts/call()、apply()、bind()区别.md","hash":"0bf4b1ef8609a94322f79fbd4e27d7f54d1c8043","modified":1519898129000},{"_id":"source/_posts/docker常用命令整理.md","hash":"b4563899bf327cb9ab7590290db358f61ed57eb7","modified":1521189264000},{"_id":"source/_posts/es6基础.md","hash":"bc1bc9229590718d4006ffc7030af30fb1782a98","modified":1519615953000},{"_id":"source/_posts/javascript的GC理解.md","hash":"4ce7b203ea29786d9ae024ddcb775d0840b6dff3","modified":1519460410000},{"_id":"source/_posts/hello-world.md","hash":"8fcbf5ea11d82c8677aace74eea0a38133fd8b3b","modified":1517823507000},{"_id":"source/_posts/javascript的变量函数提升总结.md","hash":"4c4695c9b1235b8341f8a1980fa86698f13bd92b","modified":1519895269000},{"_id":"source/_posts/js对象引用赋值引发数据可变的解决方案.md","hash":"721d5994af5a2765c890065e6b2370ae37549711","modified":1519895267000},{"_id":"source/_posts/js实现插入排序算法.md","hash":"4e31a4c535c5c6a2678a391196ff253c5415e7b9","modified":1521709416000},{"_id":"source/_posts/linux系统分类.md","hash":"abdcb74cec9fbbd2acd8e5fcc2aa33e2d75806b6","modified":1519898230000},{"_id":"source/_posts/js实现冒泡排序算法.md","hash":"3595a51cd05832f37c0bdc0bcc71950d397a953b","modified":1521703793000},{"_id":"source/_posts/mac下使用tree命令.md","hash":"878d067836e048a7f2212ab3a1013880fbcf936b","modified":1519898239000},{"_id":"source/_posts/输出1-100之间的素数.md","hash":"53b8c4eeb2898fd185020f6cd6d89a1944d3a0cd","modified":1519898293000},{"_id":"source/_posts/promise深入理解.md","hash":"2588df5452a40cc7b942ba228fc1db5a85b8cf43","modified":1519898255000},{"_id":"source/about/index.md","hash":"15c9fafcbd8a38ad404a7f5bbacce2e40cf313bb","modified":1517836429000},{"_id":"source/images/avatar.jpg","hash":"16cce08fca9435292fceaa42e1ada24ab5934cff","modified":1517838910000},{"_id":"source/categories/index.md","hash":"4dd6812379e8c924a3832725fa4d8c08faaef32b","modified":1517836162000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517897257000},{"_id":"source/tags/index.md","hash":"c062528cfcac091b9b95576967fb5993fc9eb998","modified":1517836316000},{"_id":"themes/next/.git/FETCH_HEAD","hash":"d67b7cbcc31216dec8e0329efb4eed8c0eec4cdb","modified":1519891819000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1517834513000},{"_id":"themes/next/.git/ORIG_HEAD","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1519891819000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1517834513000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1517834269000},{"_id":"themes/next/.git/index","hash":"e831e92022e27988e5a6dc5cd56c0e97358589c6","modified":1517882351000},{"_id":"themes/next/.git/packed-refs","hash":"339779e225d913a344c5e6210617badd049c4434","modified":1517834513000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1517834513000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1517834513000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1517834513000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1517834513000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1517834513000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1517834513000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1517834513000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1517834513000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1517834513000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1517834513000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1517834513000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1517834513000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1517834513000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1517834513000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1517834513000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1517834513000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1517834513000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1517834513000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1517834513000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1517834513000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1517834513000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1517834513000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1517834513000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1517834513000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1517834513000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1517834513000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1517834513000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1517834513000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1517834513000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1517834513000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1517834513000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1517834513000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1517834513000},{"_id":"source/images/wechatpay.png","hash":"bf675265b129fbbf8ab50771fc550eecd8c28226","modified":1517886278000},{"_id":"source/images/alipay.png","hash":"cd2a08d895a2ac18670235e96cc90e846efb8b01","modified":1517886407000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1517834269000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1517834269000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1517834269000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1517834269000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1517834269000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1517834269000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1517834269000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1517834269000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1517834269000},{"_id":"themes/next/.git/logs/HEAD","hash":"22ce2b7d62ed5c0d2c9048b4ec1cc2022a8f0bfe","modified":1517834513000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1517834269000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1517834513000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1517834513000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1517834513000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1517834513000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1517834513000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1517834513000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1517834513000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1517834513000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1517834513000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1517834513000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1517834513000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1517834513000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1517834513000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1517834513000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1517834513000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1517834513000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1517834513000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1517834513000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1517834513000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1517834513000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1517834513000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1517834513000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1517834513000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1517834513000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1517834513000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1517834513000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1517834513000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1517834513000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1517834513000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1517834513000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1517834513000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1517834513000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1517834513000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1517834513000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1517834513000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1517834513000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1517834513000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1517834513000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1517834513000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1517834513000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1517834513000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1517834513000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1517834513000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1517834513000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1517834513000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1517834513000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1517834513000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517834513000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517834513000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1517834513000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1517834513000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1517834513000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1517834513000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1517834513000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1517834513000},{"_id":"themes/next/.git/refs/heads/master","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1517834513000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1517834513000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1517834513000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1517834513000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1517834513000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1517834513000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1517834513000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1517834513000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1517834513000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1517834513000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1517834513000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1517834513000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1517834513000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1517834513000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1517834513000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1517834513000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1517834513000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1517834513000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1517834513000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1517834513000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1517834513000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1517834513000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1517834513000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1517834513000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1517834513000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1517834513000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1517834513000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1517834513000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1517834513000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1517834513000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1517834513000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1517834513000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1517834513000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1517834513000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1517834513000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1517834513000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1517834513000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1517834513000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1517834513000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1517834513000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1517834513000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1517834513000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1517834513000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1517834513000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1517834513000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1517834513000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1517834513000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1517834513000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1517834513000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1517834513000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1517834513000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1517834513000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1517834513000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1517834513000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1517834513000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1517834513000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1517834513000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1517834513000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1517834513000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1517834513000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1517834513000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1517834513000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1517834513000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1517834513000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1517834513000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"22ce2b7d62ed5c0d2c9048b4ec1cc2022a8f0bfe","modified":1517834513000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1517834513000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1517834513000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1517834513000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1517834513000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1517834513000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1517834513000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1517834513000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1517834513000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1517834513000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1517834513000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1517834513000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1517834513000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1517834513000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1517834513000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1517834513000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"22ce2b7d62ed5c0d2c9048b4ec1cc2022a8f0bfe","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1517834513000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1517834513000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1517834513000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1517834513000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1517834513000},{"_id":"themes/next/.git/objects/pack/pack-421922bcd2e1de0531ed466f8cf62ea1cc93866e.idx","hash":"f98580a787b0832e2edac748c643af96810e672b","modified":1517834513000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1517834513000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1517834513000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1517834513000},{"_id":"themes/next/.git/objects/pack/pack-421922bcd2e1de0531ed466f8cf62ea1cc93866e.pack","hash":"d8a37b6f3ce99643f288332bf82cc6dc204d6839","modified":1517834513000}],"Category":[{"name":"node","_id":"cjf3dozl800047oms8w3wss4i"},{"name":"javascript","_id":"cjf3dozlm00097omsj96fpo63"},{"name":"docker","_id":"cjf3dozlt000e7omsbl5b6xxl"},{"name":"linux","_id":"cjf3dozmk000w7omsud60abu3"},{"name":"算法","_id":"cjf3dozmp00127omsxaon4syw"},{"name":"mac","_id":"cjf3dozmv001g7omsn0nfvlzy"}],"Data":[{"_id":"next","data":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}],"Page":[{"title":"about","date":"2018-02-05T13:13:37.000Z","about":"/about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-02-05 21:13:37\nabout: /about\n---\n","updated":"2018-02-05T13:13:49.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjf3dozkt00017omsxwza6y9i","content":"","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":""},{"title":"categories","date":"2018-02-05T13:08:44.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-02-05 21:08:44\ntype: \"categories\"\n---\n","updated":"2018-02-05T13:09:22.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjf3dozl100037omsz1a98o0f","content":"","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":""},{"title":"tags","date":"2018-02-05T13:11:39.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-02-05 21:11:39\ntype: \"tags\"\n---\n","updated":"2018-02-05T13:11:56.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjf3dozsj00257oms6ev6plp2","content":"","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":""}],"Post":[{"title":"Node四个定时器","date":"2018-02-09T05:50:45.000Z","_content":"为了协调异步任务，Node 提供了四个定时器，让任务可以在指定的时间运行。\n* setTimeout()\n* setInterval()\n* setImmediate()\n* process.nextTick()\n\n猜测一下以下代码的运行结果\n```javascript\nsetTimeout(() => console.log(1));\nsetImmediate(() => console.log(2));\nprocess.nextTick(() => console.log(3));\nPromise.resolve().then(() => console.log(4));\n(() => console.log(5))();\n```\n运行结果如下。\n```javascript\n5\n3\n4\n1\n2\n```\n同步代码先于异步代码执行\n\n异步任务分为：\n* 追加在本轮循环的异步代码\n* 追加在次轮循环的异步代码\n\n```javascript\n// 下面两行，次轮循环执行 等待时间相同的情况下setTimeout先于setInterval执行\nsetTimeout(() => console.log(1));\nsetInterval(() => console.log(1));\nsetImmediate(() => console.log(2));\n// 下面两行，本轮循环执行\nprocess.nextTick(() => console.log(3));\nPromise.resolve().then(() => console.log(4));\n```\n\n### setTimeout\n次轮循环中执行\n\nsetTimeout()只是将事件插入了\"任务队列\"，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。\n### setImmediate\n次轮循环中执行\n\nsetImmediate()是将事件插入到事件队列尾部，主线程和事件队列的函数执行完成之后立即执行setImmediate指定的回调函数，和setTimeout(fn,0)的效果差不多，但是当他们同时在同一个事件循环中时，**_执行顺序是不定的_**。\n### process.nextTick\n本轮循环中执行\n\n同步代码执行完之后立即执行，所有异步里面最快的\n\nprocess.nextTick()方法可以在当前\"执行栈\"的尾部-->下一次Event Loop（主线程读取\"任务队列\"）之前-->触发process指定的回调函数。也就是说，它指定的任务总是发生在所有异步任务之前，当前主线程的末尾。（nextTick虽然也会异步执行，但是不会给其他io事件执行的任何机会）\n \n**_最后process.maxTickDepth()的缺省值是1000，如果超过会报exceed callback stack。官方认为在递归中用process.nextTick会造成饥饿event loop，因为nextTick没有给其他异步事件执行的机会，递归中推荐用setImmediate_**","source":"_posts/Node四个定时器.md","raw":"---\ntitle: Node四个定时器\ndate: 2018-02-09 13:50:45\ntags: [node,setTimeout]\ncategory: [node]\n---\n为了协调异步任务，Node 提供了四个定时器，让任务可以在指定的时间运行。\n* setTimeout()\n* setInterval()\n* setImmediate()\n* process.nextTick()\n\n猜测一下以下代码的运行结果\n```javascript\nsetTimeout(() => console.log(1));\nsetImmediate(() => console.log(2));\nprocess.nextTick(() => console.log(3));\nPromise.resolve().then(() => console.log(4));\n(() => console.log(5))();\n```\n运行结果如下。\n```javascript\n5\n3\n4\n1\n2\n```\n同步代码先于异步代码执行\n\n异步任务分为：\n* 追加在本轮循环的异步代码\n* 追加在次轮循环的异步代码\n\n```javascript\n// 下面两行，次轮循环执行 等待时间相同的情况下setTimeout先于setInterval执行\nsetTimeout(() => console.log(1));\nsetInterval(() => console.log(1));\nsetImmediate(() => console.log(2));\n// 下面两行，本轮循环执行\nprocess.nextTick(() => console.log(3));\nPromise.resolve().then(() => console.log(4));\n```\n\n### setTimeout\n次轮循环中执行\n\nsetTimeout()只是将事件插入了\"任务队列\"，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。\n### setImmediate\n次轮循环中执行\n\nsetImmediate()是将事件插入到事件队列尾部，主线程和事件队列的函数执行完成之后立即执行setImmediate指定的回调函数，和setTimeout(fn,0)的效果差不多，但是当他们同时在同一个事件循环中时，**_执行顺序是不定的_**。\n### process.nextTick\n本轮循环中执行\n\n同步代码执行完之后立即执行，所有异步里面最快的\n\nprocess.nextTick()方法可以在当前\"执行栈\"的尾部-->下一次Event Loop（主线程读取\"任务队列\"）之前-->触发process指定的回调函数。也就是说，它指定的任务总是发生在所有异步任务之前，当前主线程的末尾。（nextTick虽然也会异步执行，但是不会给其他io事件执行的任何机会）\n \n**_最后process.maxTickDepth()的缺省值是1000，如果超过会报exceed callback stack。官方认为在递归中用process.nextTick会造成饥饿event loop，因为nextTick没有给其他异步事件执行的机会，递归中推荐用setImmediate_**","slug":"Node四个定时器","published":1,"updated":"2018-03-01T09:57:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozkm00007omsmwbbc7aq","content":"<p>为了协调异步任务，Node 提供了四个定时器，让任务可以在指定的时间运行。</p>\n<ul>\n<li>setTimeout()</li>\n<li>setInterval()</li>\n<li>setImmediate()</li>\n<li>process.nextTick()</li>\n</ul>\n<p>猜测一下以下代码的运行结果<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>));</span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>));</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>));</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>))();</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p>同步代码先于异步代码执行</p>\n<p>异步任务分为：</p>\n<ul>\n<li>追加在本轮循环的异步代码</li>\n<li>追加在次轮循环的异步代码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面两行，次轮循环执行 等待时间相同的情况下setTimeout先于setInterval执行</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>));</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>));</span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 下面两行，本轮循环执行</span></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a>setTimeout</h3><p>次轮循环中执行</p>\n<p>setTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</p>\n<h3 id=\"setImmediate\"><a href=\"#setImmediate\" class=\"headerlink\" title=\"setImmediate\"></a>setImmediate</h3><p>次轮循环中执行</p>\n<p>setImmediate()是将事件插入到事件队列尾部，主线程和事件队列的函数执行完成之后立即执行setImmediate指定的回调函数，和setTimeout(fn,0)的效果差不多，但是当他们同时在同一个事件循环中时，<strong><em>执行顺序是不定的</em></strong>。</p>\n<h3 id=\"process-nextTick\"><a href=\"#process-nextTick\" class=\"headerlink\" title=\"process.nextTick\"></a>process.nextTick</h3><p>本轮循环中执行</p>\n<p>同步代码执行完之后立即执行，所有异步里面最快的</p>\n<p>process.nextTick()方法可以在当前”执行栈”的尾部–&gt;下一次Event Loop（主线程读取”任务队列”）之前–&gt;触发process指定的回调函数。也就是说，它指定的任务总是发生在所有异步任务之前，当前主线程的末尾。（nextTick虽然也会异步执行，但是不会给其他io事件执行的任何机会）</p>\n<p><strong><em>最后process.maxTickDepth()的缺省值是1000，如果超过会报exceed callback stack。官方认为在递归中用process.nextTick会造成饥饿event loop，因为nextTick没有给其他异步事件执行的机会，递归中推荐用setImmediate</em></strong></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>为了协调异步任务，Node 提供了四个定时器，让任务可以在指定的时间运行。</p>\n<ul>\n<li>setTimeout()</li>\n<li>setInterval()</li>\n<li>setImmediate()</li>\n<li>process.nextTick()</li>\n</ul>\n<p>猜测一下以下代码的运行结果<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>));</span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>));</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>));</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>))();</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<p>同步代码先于异步代码执行</p>\n<p>异步任务分为：</p>\n<ul>\n<li>追加在本轮循环的异步代码</li>\n<li>追加在次轮循环的异步代码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面两行，次轮循环执行 等待时间相同的情况下setTimeout先于setInterval执行</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>));</span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>));</span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">// 下面两行，本轮循环执行</span></span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a>setTimeout</h3><p>次轮循环中执行</p>\n<p>setTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</p>\n<h3 id=\"setImmediate\"><a href=\"#setImmediate\" class=\"headerlink\" title=\"setImmediate\"></a>setImmediate</h3><p>次轮循环中执行</p>\n<p>setImmediate()是将事件插入到事件队列尾部，主线程和事件队列的函数执行完成之后立即执行setImmediate指定的回调函数，和setTimeout(fn,0)的效果差不多，但是当他们同时在同一个事件循环中时，<strong><em>执行顺序是不定的</em></strong>。</p>\n<h3 id=\"process-nextTick\"><a href=\"#process-nextTick\" class=\"headerlink\" title=\"process.nextTick\"></a>process.nextTick</h3><p>本轮循环中执行</p>\n<p>同步代码执行完之后立即执行，所有异步里面最快的</p>\n<p>process.nextTick()方法可以在当前”执行栈”的尾部–&gt;下一次Event Loop（主线程读取”任务队列”）之前–&gt;触发process指定的回调函数。也就是说，它指定的任务总是发生在所有异步任务之前，当前主线程的末尾。（nextTick虽然也会异步执行，但是不会给其他io事件执行的任何机会）</p>\n<p><strong><em>最后process.maxTickDepth()的缺省值是1000，如果超过会报exceed callback stack。官方认为在递归中用process.nextTick会造成饥饿event loop，因为nextTick没有给其他异步事件执行的机会，递归中推荐用setImmediate</em></strong></p>\n"},{"title":"call()、apply()、bind()区别","date":"2018-02-24T07:22:35.000Z","_content":"#### 执行的环境this\nthis指向：this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的   \n\napply(),call(),bind()都是改变函数执行的环境（this）的，apply(),call()改变函数的this之后会立即执行函数，而bind()返回的是被修改this之后的新函数，在需要调用的时候去调用这个新函数，并且可以在执行的执行的时候去传递参数。\n\n\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb() //undefined\n```\n上面的代码之所以返回undefined是因为b在调用的时候是window.b(),this指向的是window，如果直接执行a.fn就会返回a里面的user\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\na.fn()  //danw\n```\n虽然这种方式可以正确的返回，但是有时间我们不得不将对象赋值给另一个变量，这时候就需要使用以下三种方法来改变this指向：\n#### call()\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.call(a)   //danw\n```\n通过call方法将b添加到a执行环境中去执行，所有this就会指向a   \ncall方法还可以传递多个参数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (p1,p2){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.call(a,1,2)   //danw\n```\n#### apply()\napply和call方法的效果一样，唯一不同的是在传递参数的时候是按照数组传递的。\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (p1,p2){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.apply(a,[1,2])   //danw\n```\n#### bind()\nbind()方法和apply(),call()方法一样会改变this指向，但是bind()方法不会立即去执行函数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.bind(a)\n```\n执行上面代码发现并没有打印出结果，是因为b.bind(a)会返回一个新的函数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nvar c = b.bind(a)   //返回新的函数c\nc() //danw      执行函数c,会返回danw\n```\n所以谁bind()可以让对应的函数想什么时候执行就什么时候执行   \nbind()也可以传递参数,并且可以在执行的时候再次追加参数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (p1,p2,p3){\n        console.log(p1,p2,p3)   //1,2,3\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nvar c = b.bind(a,1)   //返回新的函数c\nc(2,3) //danw      执行函数c,会返回danw\n```\n","source":"_posts/call()、apply()、bind()区别.md","raw":"---\ntitle: call()、apply()、bind()区别\ndate: 2018-02-24 15:22:35\ntags: [call(), apply(), bind()]\ncategory: [javascript]\n---\n#### 执行的环境this\nthis指向：this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的   \n\napply(),call(),bind()都是改变函数执行的环境（this）的，apply(),call()改变函数的this之后会立即执行函数，而bind()返回的是被修改this之后的新函数，在需要调用的时候去调用这个新函数，并且可以在执行的执行的时候去传递参数。\n\n\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb() //undefined\n```\n上面的代码之所以返回undefined是因为b在调用的时候是window.b(),this指向的是window，如果直接执行a.fn就会返回a里面的user\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\na.fn()  //danw\n```\n虽然这种方式可以正确的返回，但是有时间我们不得不将对象赋值给另一个变量，这时候就需要使用以下三种方法来改变this指向：\n#### call()\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.call(a)   //danw\n```\n通过call方法将b添加到a执行环境中去执行，所有this就会指向a   \ncall方法还可以传递多个参数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (p1,p2){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.call(a,1,2)   //danw\n```\n#### apply()\napply和call方法的效果一样，唯一不同的是在传递参数的时候是按照数组传递的。\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (p1,p2){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.apply(a,[1,2])   //danw\n```\n#### bind()\nbind()方法和apply(),call()方法一样会改变this指向，但是bind()方法不会立即去执行函数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nb.bind(a)\n```\n执行上面代码发现并没有打印出结果，是因为b.bind(a)会返回一个新的函数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (){\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nvar c = b.bind(a)   //返回新的函数c\nc() //danw      执行函数c,会返回danw\n```\n所以谁bind()可以让对应的函数想什么时候执行就什么时候执行   \nbind()也可以传递参数,并且可以在执行的时候再次追加参数\n```javascript\nvar a = {\n    user:\"danw\",\n    fn:function (p1,p2,p3){\n        console.log(p1,p2,p3)   //1,2,3\n        console.log(this.user)\n    }\n}\nvar b = a.fn\nvar c = b.bind(a,1)   //返回新的函数c\nc(2,3) //danw      执行函数c,会返回danw\n```\n","slug":"call()、apply()、bind()区别","published":1,"updated":"2018-03-01T09:55:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozkx00027omsuvcrsrps","content":"<h4 id=\"执行的环境this\"><a href=\"#执行的环境this\" class=\"headerlink\" title=\"执行的环境this\"></a>执行的环境this</h4><p>this指向：this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的   </p>\n<p>apply(),call(),bind()都是改变函数执行的环境（this）的，apply(),call()改变函数的this之后会立即执行函数，而bind()返回的是被修改this之后的新函数，在需要调用的时候去调用这个新函数，并且可以在执行的执行的时候去传递参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b() <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码之所以返回undefined是因为b在调用的时候是window.b(),this指向的是window，如果直接执行a.fn就会返回a里面的user<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.fn()  <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure></p>\n<p>虽然这种方式可以正确的返回，但是有时间我们不得不将对象赋值给另一个变量，这时候就需要使用以下三种方法来改变this指向：</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.call(a)   <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure>\n<p>通过call方法将b添加到a执行环境中去执行，所有this就会指向a<br>call方法还可以传递多个参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1,p2</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.call(a,<span class=\"number\">1</span>,<span class=\"number\">2</span>)   <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h4><p>apply和call方法的效果一样，唯一不同的是在传递参数的时候是按照数组传递的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1,p2</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.apply(a,[<span class=\"number\">1</span>,<span class=\"number\">2</span>])   <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h4><p>bind()方法和apply(),call()方法一样会改变this指向，但是bind()方法不会立即去执行函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.bind(a)</span><br></pre></td></tr></table></figure></p>\n<p>执行上面代码发现并没有打印出结果，是因为b.bind(a)会返回一个新的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = b.bind(a)   <span class=\"comment\">//返回新的函数c</span></span><br><span class=\"line\">c() <span class=\"comment\">//danw      执行函数c,会返回danw</span></span><br></pre></td></tr></table></figure></p>\n<p>所以谁bind()可以让对应的函数想什么时候执行就什么时候执行<br>bind()也可以传递参数,并且可以在执行的时候再次追加参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1,p2,p3</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(p1,p2,p3)   <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = b.bind(a,<span class=\"number\">1</span>)   <span class=\"comment\">//返回新的函数c</span></span><br><span class=\"line\">c(<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">//danw      执行函数c,会返回danw</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h4 id=\"执行的环境this\"><a href=\"#执行的环境this\" class=\"headerlink\" title=\"执行的环境this\"></a>执行的环境this</h4><p>this指向：this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的   </p>\n<p>apply(),call(),bind()都是改变函数执行的环境（this）的，apply(),call()改变函数的this之后会立即执行函数，而bind()返回的是被修改this之后的新函数，在需要调用的时候去调用这个新函数，并且可以在执行的执行的时候去传递参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b() <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码之所以返回undefined是因为b在调用的时候是window.b(),this指向的是window，如果直接执行a.fn就会返回a里面的user<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.fn()  <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure></p>\n<p>虽然这种方式可以正确的返回，但是有时间我们不得不将对象赋值给另一个变量，这时候就需要使用以下三种方法来改变this指向：</p>\n<h4 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call()\"></a>call()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.call(a)   <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure>\n<p>通过call方法将b添加到a执行环境中去执行，所有this就会指向a<br>call方法还可以传递多个参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1,p2</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.call(a,<span class=\"number\">1</span>,<span class=\"number\">2</span>)   <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply()\"></a>apply()</h4><p>apply和call方法的效果一样，唯一不同的是在传递参数的时候是按照数组传递的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1,p2</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.apply(a,[<span class=\"number\">1</span>,<span class=\"number\">2</span>])   <span class=\"comment\">//danw</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h4><p>bind()方法和apply(),call()方法一样会改变this指向，但是bind()方法不会立即去执行函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\">b.bind(a)</span><br></pre></td></tr></table></figure></p>\n<p>执行上面代码发现并没有打印出结果，是因为b.bind(a)会返回一个新的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = b.bind(a)   <span class=\"comment\">//返回新的函数c</span></span><br><span class=\"line\">c() <span class=\"comment\">//danw      执行函数c,会返回danw</span></span><br></pre></td></tr></table></figure></p>\n<p>所以谁bind()可以让对应的函数想什么时候执行就什么时候执行<br>bind()也可以传递参数,并且可以在执行的时候再次追加参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    user:<span class=\"string\">\"danw\"</span>,</span><br><span class=\"line\">    fn:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p1,p2,p3</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(p1,p2,p3)   <span class=\"comment\">//1,2,3</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.fn</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = b.bind(a,<span class=\"number\">1</span>)   <span class=\"comment\">//返回新的函数c</span></span><br><span class=\"line\">c(<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">//danw      执行函数c,会返回danw</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"docker常用命令整理","date":"2018-03-16T06:15:35.000Z","_content":"#### docker信息\n```bash\n# 查看docker版本\n$ docker version\n\n# 查看docker系统信息\n$ docker info\n```\n#### 镜像\n```bash\n# 查看镜像列表\n$ docker images\n\n# 删除镜像\n$ docker rmi name/id\n\n# 基于Dockerfile文件build镜像\n$ docker  build [options] 镜像名 .  \n注意： .代表Dockerfile文件在当前路径\n    -t 为容器重新分配一个伪终端\n\n# 创建一个新的容器并跑一个镜像\ndocker run [options]  image \n    -i 以交互模式运行\n    -t 为容器重新分配一个伪终端\n    -d 运行到后台\n    -p 80:80\t端口映射\n    --name xxx 为容器指定一个名称\n\n# 保存images为一个tar文件\n$ docker save image_name -o name.tar\n或者\n$ docker save image_name > name.tar\n\n#从一个tar文件加载images\n$ docker load < name.tar\n\n```\n \n#### 容器\n```bash\n# 显示正在运行的容器\n$ docker ps\n    -a 显示所有容器，包含不是运行中的容器\n\n# 停止运行中的容器\n$ docker stop 容器name/id\n\n#删除容器\n$ docker rm 容器name/id\n\n#进入到某个容器中\n$ docker exec -it 容器name/id /bin/bash\t\n\n#通过差异性创建一个新的image\n$ docker commit 容器id 新的镜像名\neg: docker commit bf2eff778794 dandanwu/testimage:v2\t\n\n```\n\n#### Dockerfile编写\nDockerFile分为四部分组成：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令\n```bash\n#第一行必须指令基于的基础镜像\nFROM ubutu\n\n#维护者信息\nMAINTAINER docker_user  docker_user@mail.com\n\n#使用哪个用户跑container \nUSER\n\n#将文件<src>拷贝到container的文件系统对应的路径<dest>\nCOPY file.js /home/file.js\n\n#将文件<src>拷贝到container的文件系统对应的路径<dest>\nADD file.js /home/file.js\n\n#在终端中执行命令\nRUN apt-get update && apt-get install -y ngnix \nRUN echo \"\\ndaemon off;\">>/etc/ngnix/nignix.conf\n\n#container内部服务开启的端口，主机上要用还得在启动container时，做host-container的端口映射\nEXPOSE 8017\n\n#设置环境变量\nENV\n\n#切换目录用，可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效\nWORKDIR ../\n\n#可以将本地文件夹或者其他container的文件夹挂载到container中。\nVOLUME\n\n#容器启动时执行指令\n#一个Dockerfile中只能有一条CMD命令，多条则只执行最后一条CMD\n#可替换性：当docker run command的命令匹配到CMD command时，会替换CMD执行的命令。\nCMD /usr/sbin/ngnix\n\n#需要执行多条命令的时候可以像下边这样写\nCMD [ \"cmd1\", \"cmd2\", \"cmd3\" ]\n\n#container启动时执行的命令，但是一个Dockerfile中只能有一条ENTRYPOINT命令，如果多条，则只执行最后一条\n#ENTRYPOINT没有CMD的可替换特性\nENTRYPOINT /usr/sbin/ngnix\n\n```\n\n","source":"_posts/docker常用命令整理.md","raw":"---\ntitle: docker常用命令整理\ndate: 2018-03-16 14:15:35\ntags: [docker ]\ncategory: [docker]\n---\n#### docker信息\n```bash\n# 查看docker版本\n$ docker version\n\n# 查看docker系统信息\n$ docker info\n```\n#### 镜像\n```bash\n# 查看镜像列表\n$ docker images\n\n# 删除镜像\n$ docker rmi name/id\n\n# 基于Dockerfile文件build镜像\n$ docker  build [options] 镜像名 .  \n注意： .代表Dockerfile文件在当前路径\n    -t 为容器重新分配一个伪终端\n\n# 创建一个新的容器并跑一个镜像\ndocker run [options]  image \n    -i 以交互模式运行\n    -t 为容器重新分配一个伪终端\n    -d 运行到后台\n    -p 80:80\t端口映射\n    --name xxx 为容器指定一个名称\n\n# 保存images为一个tar文件\n$ docker save image_name -o name.tar\n或者\n$ docker save image_name > name.tar\n\n#从一个tar文件加载images\n$ docker load < name.tar\n\n```\n \n#### 容器\n```bash\n# 显示正在运行的容器\n$ docker ps\n    -a 显示所有容器，包含不是运行中的容器\n\n# 停止运行中的容器\n$ docker stop 容器name/id\n\n#删除容器\n$ docker rm 容器name/id\n\n#进入到某个容器中\n$ docker exec -it 容器name/id /bin/bash\t\n\n#通过差异性创建一个新的image\n$ docker commit 容器id 新的镜像名\neg: docker commit bf2eff778794 dandanwu/testimage:v2\t\n\n```\n\n#### Dockerfile编写\nDockerFile分为四部分组成：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令\n```bash\n#第一行必须指令基于的基础镜像\nFROM ubutu\n\n#维护者信息\nMAINTAINER docker_user  docker_user@mail.com\n\n#使用哪个用户跑container \nUSER\n\n#将文件<src>拷贝到container的文件系统对应的路径<dest>\nCOPY file.js /home/file.js\n\n#将文件<src>拷贝到container的文件系统对应的路径<dest>\nADD file.js /home/file.js\n\n#在终端中执行命令\nRUN apt-get update && apt-get install -y ngnix \nRUN echo \"\\ndaemon off;\">>/etc/ngnix/nignix.conf\n\n#container内部服务开启的端口，主机上要用还得在启动container时，做host-container的端口映射\nEXPOSE 8017\n\n#设置环境变量\nENV\n\n#切换目录用，可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效\nWORKDIR ../\n\n#可以将本地文件夹或者其他container的文件夹挂载到container中。\nVOLUME\n\n#容器启动时执行指令\n#一个Dockerfile中只能有一条CMD命令，多条则只执行最后一条CMD\n#可替换性：当docker run command的命令匹配到CMD command时，会替换CMD执行的命令。\nCMD /usr/sbin/ngnix\n\n#需要执行多条命令的时候可以像下边这样写\nCMD [ \"cmd1\", \"cmd2\", \"cmd3\" ]\n\n#container启动时执行的命令，但是一个Dockerfile中只能有一条ENTRYPOINT命令，如果多条，则只执行最后一条\n#ENTRYPOINT没有CMD的可替换特性\nENTRYPOINT /usr/sbin/ngnix\n\n```\n\n","slug":"docker常用命令整理","published":1,"updated":"2018-03-16T08:34:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozlc00067oms1bry9ocq","content":"<h4 id=\"docker信息\"><a href=\"#docker信息\" class=\"headerlink\" title=\"docker信息\"></a>docker信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker版本</span></span><br><span class=\"line\">$ docker version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看docker系统信息</span></span><br><span class=\"line\">$ docker info</span><br></pre></td></tr></table></figure>\n<h4 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看镜像列表</span></span><br><span class=\"line\">$ docker images</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除镜像</span></span><br><span class=\"line\">$ docker rmi name/id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基于Dockerfile文件build镜像</span></span><br><span class=\"line\">$ docker  build [options] 镜像名 .  </span><br><span class=\"line\">注意： .代表Dockerfile文件在当前路径</span><br><span class=\"line\">    -t 为容器重新分配一个伪终端</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个新的容器并跑一个镜像</span></span><br><span class=\"line\">docker run [options]  image </span><br><span class=\"line\">    -i 以交互模式运行</span><br><span class=\"line\">    -t 为容器重新分配一个伪终端</span><br><span class=\"line\">    -d 运行到后台</span><br><span class=\"line\">    -p 80:80\t端口映射</span><br><span class=\"line\">    --name xxx 为容器指定一个名称</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存images为一个tar文件</span></span><br><span class=\"line\">$ docker save image_name -o name.tar</span><br><span class=\"line\">或者</span><br><span class=\"line\">$ docker save image_name &gt; name.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从一个tar文件加载images</span></span><br><span class=\"line\">$ docker load &lt; name.tar</span><br></pre></td></tr></table></figure>\n<h4 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示正在运行的容器</span></span><br><span class=\"line\">$ docker ps</span><br><span class=\"line\">    -a 显示所有容器，包含不是运行中的容器</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止运行中的容器</span></span><br><span class=\"line\">$ docker stop 容器name/id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除容器</span></span><br><span class=\"line\">$ docker rm 容器name/id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进入到某个容器中</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it 容器name/id /bin/bash\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#通过差异性创建一个新的image</span></span><br><span class=\"line\">$ docker commit 容器id 新的镜像名</span><br><span class=\"line\">eg: docker commit bf2eff778794 dandanwu/testimage:v2</span><br></pre></td></tr></table></figure>\n<h4 id=\"Dockerfile编写\"><a href=\"#Dockerfile编写\" class=\"headerlink\" title=\"Dockerfile编写\"></a>Dockerfile编写</h4><p>DockerFile分为四部分组成：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#第一行必须指令基于的基础镜像</span></span><br><span class=\"line\">FROM ubutu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#维护者信息</span></span><br><span class=\"line\">MAINTAINER docker_user  docker_user@mail.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用哪个用户跑container </span></span><br><span class=\"line\">USER</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将文件&lt;src&gt;拷贝到container的文件系统对应的路径&lt;dest&gt;</span></span><br><span class=\"line\">COPY file.js /home/file.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将文件&lt;src&gt;拷贝到container的文件系统对应的路径&lt;dest&gt;</span></span><br><span class=\"line\">ADD file.js /home/file.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在终端中执行命令</span></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y ngnix </span><br><span class=\"line\">RUN <span class=\"built_in\">echo</span> <span class=\"string\">\"\\ndaemon off;\"</span>&gt;&gt;/etc/ngnix/nignix.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#container内部服务开启的端口，主机上要用还得在启动container时，做host-container的端口映射</span></span><br><span class=\"line\">EXPOSE 8017</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置环境变量</span></span><br><span class=\"line\">ENV</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#切换目录用，可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效</span></span><br><span class=\"line\">WORKDIR ../</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#可以将本地文件夹或者其他container的文件夹挂载到container中。</span></span><br><span class=\"line\">VOLUME</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#容器启动时执行指令</span></span><br><span class=\"line\"><span class=\"comment\">#一个Dockerfile中只能有一条CMD命令，多条则只执行最后一条CMD</span></span><br><span class=\"line\"><span class=\"comment\">#可替换性：当docker run command的命令匹配到CMD command时，会替换CMD执行的命令。</span></span><br><span class=\"line\">CMD /usr/sbin/ngnix</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#需要执行多条命令的时候可以像下边这样写</span></span><br><span class=\"line\">CMD [ <span class=\"string\">\"cmd1\"</span>, <span class=\"string\">\"cmd2\"</span>, <span class=\"string\">\"cmd3\"</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#container启动时执行的命令，但是一个Dockerfile中只能有一条ENTRYPOINT命令，如果多条，则只执行最后一条</span></span><br><span class=\"line\"><span class=\"comment\">#ENTRYPOINT没有CMD的可替换特性</span></span><br><span class=\"line\">ENTRYPOINT /usr/sbin/ngnix</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h4 id=\"docker信息\"><a href=\"#docker信息\" class=\"headerlink\" title=\"docker信息\"></a>docker信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看docker版本</span></span><br><span class=\"line\">$ docker version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看docker系统信息</span></span><br><span class=\"line\">$ docker info</span><br></pre></td></tr></table></figure>\n<h4 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看镜像列表</span></span><br><span class=\"line\">$ docker images</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除镜像</span></span><br><span class=\"line\">$ docker rmi name/id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 基于Dockerfile文件build镜像</span></span><br><span class=\"line\">$ docker  build [options] 镜像名 .  </span><br><span class=\"line\">注意： .代表Dockerfile文件在当前路径</span><br><span class=\"line\">    -t 为容器重新分配一个伪终端</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个新的容器并跑一个镜像</span></span><br><span class=\"line\">docker run [options]  image </span><br><span class=\"line\">    -i 以交互模式运行</span><br><span class=\"line\">    -t 为容器重新分配一个伪终端</span><br><span class=\"line\">    -d 运行到后台</span><br><span class=\"line\">    -p 80:80\t端口映射</span><br><span class=\"line\">    --name xxx 为容器指定一个名称</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存images为一个tar文件</span></span><br><span class=\"line\">$ docker save image_name -o name.tar</span><br><span class=\"line\">或者</span><br><span class=\"line\">$ docker save image_name &gt; name.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#从一个tar文件加载images</span></span><br><span class=\"line\">$ docker load &lt; name.tar</span><br></pre></td></tr></table></figure>\n<h4 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示正在运行的容器</span></span><br><span class=\"line\">$ docker ps</span><br><span class=\"line\">    -a 显示所有容器，包含不是运行中的容器</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止运行中的容器</span></span><br><span class=\"line\">$ docker stop 容器name/id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除容器</span></span><br><span class=\"line\">$ docker rm 容器name/id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进入到某个容器中</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it 容器name/id /bin/bash\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#通过差异性创建一个新的image</span></span><br><span class=\"line\">$ docker commit 容器id 新的镜像名</span><br><span class=\"line\">eg: docker commit bf2eff778794 dandanwu/testimage:v2</span><br></pre></td></tr></table></figure>\n<h4 id=\"Dockerfile编写\"><a href=\"#Dockerfile编写\" class=\"headerlink\" title=\"Dockerfile编写\"></a>Dockerfile编写</h4><p>DockerFile分为四部分组成：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#第一行必须指令基于的基础镜像</span></span><br><span class=\"line\">FROM ubutu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#维护者信息</span></span><br><span class=\"line\">MAINTAINER docker_user  docker_user@mail.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用哪个用户跑container </span></span><br><span class=\"line\">USER</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将文件&lt;src&gt;拷贝到container的文件系统对应的路径&lt;dest&gt;</span></span><br><span class=\"line\">COPY file.js /home/file.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将文件&lt;src&gt;拷贝到container的文件系统对应的路径&lt;dest&gt;</span></span><br><span class=\"line\">ADD file.js /home/file.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在终端中执行命令</span></span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y ngnix </span><br><span class=\"line\">RUN <span class=\"built_in\">echo</span> <span class=\"string\">\"\\ndaemon off;\"</span>&gt;&gt;/etc/ngnix/nignix.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#container内部服务开启的端口，主机上要用还得在启动container时，做host-container的端口映射</span></span><br><span class=\"line\">EXPOSE 8017</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置环境变量</span></span><br><span class=\"line\">ENV</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#切换目录用，可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效</span></span><br><span class=\"line\">WORKDIR ../</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#可以将本地文件夹或者其他container的文件夹挂载到container中。</span></span><br><span class=\"line\">VOLUME</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#容器启动时执行指令</span></span><br><span class=\"line\"><span class=\"comment\">#一个Dockerfile中只能有一条CMD命令，多条则只执行最后一条CMD</span></span><br><span class=\"line\"><span class=\"comment\">#可替换性：当docker run command的命令匹配到CMD command时，会替换CMD执行的命令。</span></span><br><span class=\"line\">CMD /usr/sbin/ngnix</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#需要执行多条命令的时候可以像下边这样写</span></span><br><span class=\"line\">CMD [ <span class=\"string\">\"cmd1\"</span>, <span class=\"string\">\"cmd2\"</span>, <span class=\"string\">\"cmd3\"</span> ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#container启动时执行的命令，但是一个Dockerfile中只能有一条ENTRYPOINT命令，如果多条，则只执行最后一条</span></span><br><span class=\"line\"><span class=\"comment\">#ENTRYPOINT没有CMD的可替换特性</span></span><br><span class=\"line\">ENTRYPOINT /usr/sbin/ngnix</span><br></pre></td></tr></table></figure></p>\n"},{"title":"es6基础","date":"2018-02-26T02:31:14.000Z","_content":"####  let命令\n\nlet有块级作用域，let声明的变量只在它所在的代码块有效\n\nvar有变量提升现象，let没有变量提升\n\nlet暂时性死区 \n```javascript\nvar tmp = 123;\n\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n\n```\nES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错\nlet不允许重复声明\n一道面试题：\n```javascript\nvar funcs = []\nfor (var i = 0; i < 10; i++) {\n    funcs.push(function() { console.log(i) })\n}\nfuncs.forEach(function(func) {\n    func()\n})\n```\n以上代码会输出10次数组10，如果想要输出0-9，两种解决方案：\n```javascript\n    // ES5告诉我们可以利用闭包解决这个问题\n    var funcs = []\n    for (var i = 0; i < 10; i++) {\n        func.push((function(value) {\n            return function() {\n                console.log(value)\n            }\n        }(i)))\n    }\n    // es6\n    for (let i = 0; i < 10; i++) {\n        func.push(function() {\n            console.log(i)\n        })\n    }\n```\n\n#### 模板字符串\n\n字符串拼接\n\n```javascript\n//es5 \nvar name = 'lux'\nconsole.log('hello' + name)\n//es6\nconst name = 'lux'\nconsole.log(`hello ${name}`) //hello lux\n```\nes6提供的常用的字符串方法\n\n```javascript\n// includes：判断是否包含然后直接返回布尔值\nlet str = 'hahay'\nconsole.log(str.includes('y')) // true\n\n// repeat: 获取字符串重复n次\nlet s = 'he'\nconsole.log(s.repeat(3)) // 'hehehe'\n```\n\n#### 函数\n默认参数\n```javascript\n//es5设置参数默认值\n//这种方式如果num=0就会出现num的值被默认200覆盖\n    function action(num) {\n        num = num || 200\n        //当传入num时，num为传入的值\n        //当没传入参数时，num即有了默认值200\n        return num\n    }\n//es6设置默认参数\n    function action(num = 200) {\n        console.log(num)\n    }\n    action() //200\n    action(300) //300\n```\n箭头函数\n> 三个特点:   \n1. 不需要function关键字来创建函数  \n2. 省略return关键字 \n3. 继承当前上下文的 this 关键字\n  \n```javascript\n//例如：\n    [1,2,3].map( x => x + 1 )\n    \n//等同于：\n    [1,2,3].map((function(x){\n        return x + 1\n    }).bind(this))\n```\n\n#### 拓展的对象功能\n对象初始化简写\n```javascript\nlet name = 'danw'\nlet age = 27\nvar d = {name:name,age:age}\n\n//以上代码es6可以简写为：\nlet name = 'danw'\nlet age = 27\nvar d = {name,age}\n```\n对象初始化中方法赋值的简写\n```javascript\nconst people = {\n    name: 'lux',\n    getName: function() {\n        console.log(this.name)\n    }\n}\n//以上代码简写如下：\nconst people = {\n    name: 'lux',\n    getName () {\n        console.log(this.name)\n    }\n}\n```\nObject.assign()实现对象浅复制\n```javascript\nvar objA = {a：1,b:2}\nconst obj = Object.assign({}, objA)\nobj.c = 3\nconsole.log(obj) //{a：1,b:2,c:3}\nconsole.log(objA) //{a：1,b:2}  objA的值不会被改变\n```\n\n#### 更方便的数据访问--解构\n```javascript\nconst people = {\n    name: 'lux',\n    age: 20\n}\nconst name = people.name\nconst age = people.age\nconsole.log(name + ' --- ' + age)\n\n//对象解构取值\nconst {name,age} = people\n//数组结构取值\nconst color = ['red', 'blue']\nconst [first, second] = color\n```\n\n#### Spread Operator 展开运算符（...）\n```javascript\n//数组\nconst color = ['red', 'yellow']\nconst colorful = [...color, 'green', 'pink']\nconsole.log(colorful) //[red, yellow, green, pink]\n\n//对象\nconst alp = { fist: 'a', second: 'b'}\nconst alphabets = { ...alp, third: 'c' }\nconsole.log(alphabets) //{ \"fist\": \"a\", \"second\": \"b\", \"third\": \"c\"\n\n```\n\n#### import 和 export\n用法总结\n- 当用export default people导出时，就用 import people 导入（不带大括号）\n- 一个文件里，有且只能有一个export default。但可以有多个export。\n- 当用export name 时，就用import { name }导入（记得带上大括号）\n- 当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } \n- 当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example\n\n#### Promise\n思考题\n```javascript\nsetTimeout(function() {\n      console.log(1)\n    }, 0);\n    new Promise(function executor(resolve) {\n      console.log(2);\n      for( var i=0 ; i<10000 ; i++ ) {\n        i == 9999 && resolve();\n      }\n      console.log(3);\n    }).then(function() {\n      console.log(4);\n    });\n    console.log(5);\n//输出：2 3 5 4 1\n\n```\n> 类似面试题：https://zhuanlan.zhihu.com/p/25407758\n","source":"_posts/es6基础.md","raw":"---\ntitle: es6基础\ndate: 2018-02-26 10:31:14\ntags: [es6]\ncategory: [javascript]\n---\n####  let命令\n\nlet有块级作用域，let声明的变量只在它所在的代码块有效\n\nvar有变量提升现象，let没有变量提升\n\nlet暂时性死区 \n```javascript\nvar tmp = 123;\n\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n\n```\nES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错\nlet不允许重复声明\n一道面试题：\n```javascript\nvar funcs = []\nfor (var i = 0; i < 10; i++) {\n    funcs.push(function() { console.log(i) })\n}\nfuncs.forEach(function(func) {\n    func()\n})\n```\n以上代码会输出10次数组10，如果想要输出0-9，两种解决方案：\n```javascript\n    // ES5告诉我们可以利用闭包解决这个问题\n    var funcs = []\n    for (var i = 0; i < 10; i++) {\n        func.push((function(value) {\n            return function() {\n                console.log(value)\n            }\n        }(i)))\n    }\n    // es6\n    for (let i = 0; i < 10; i++) {\n        func.push(function() {\n            console.log(i)\n        })\n    }\n```\n\n#### 模板字符串\n\n字符串拼接\n\n```javascript\n//es5 \nvar name = 'lux'\nconsole.log('hello' + name)\n//es6\nconst name = 'lux'\nconsole.log(`hello ${name}`) //hello lux\n```\nes6提供的常用的字符串方法\n\n```javascript\n// includes：判断是否包含然后直接返回布尔值\nlet str = 'hahay'\nconsole.log(str.includes('y')) // true\n\n// repeat: 获取字符串重复n次\nlet s = 'he'\nconsole.log(s.repeat(3)) // 'hehehe'\n```\n\n#### 函数\n默认参数\n```javascript\n//es5设置参数默认值\n//这种方式如果num=0就会出现num的值被默认200覆盖\n    function action(num) {\n        num = num || 200\n        //当传入num时，num为传入的值\n        //当没传入参数时，num即有了默认值200\n        return num\n    }\n//es6设置默认参数\n    function action(num = 200) {\n        console.log(num)\n    }\n    action() //200\n    action(300) //300\n```\n箭头函数\n> 三个特点:   \n1. 不需要function关键字来创建函数  \n2. 省略return关键字 \n3. 继承当前上下文的 this 关键字\n  \n```javascript\n//例如：\n    [1,2,3].map( x => x + 1 )\n    \n//等同于：\n    [1,2,3].map((function(x){\n        return x + 1\n    }).bind(this))\n```\n\n#### 拓展的对象功能\n对象初始化简写\n```javascript\nlet name = 'danw'\nlet age = 27\nvar d = {name:name,age:age}\n\n//以上代码es6可以简写为：\nlet name = 'danw'\nlet age = 27\nvar d = {name,age}\n```\n对象初始化中方法赋值的简写\n```javascript\nconst people = {\n    name: 'lux',\n    getName: function() {\n        console.log(this.name)\n    }\n}\n//以上代码简写如下：\nconst people = {\n    name: 'lux',\n    getName () {\n        console.log(this.name)\n    }\n}\n```\nObject.assign()实现对象浅复制\n```javascript\nvar objA = {a：1,b:2}\nconst obj = Object.assign({}, objA)\nobj.c = 3\nconsole.log(obj) //{a：1,b:2,c:3}\nconsole.log(objA) //{a：1,b:2}  objA的值不会被改变\n```\n\n#### 更方便的数据访问--解构\n```javascript\nconst people = {\n    name: 'lux',\n    age: 20\n}\nconst name = people.name\nconst age = people.age\nconsole.log(name + ' --- ' + age)\n\n//对象解构取值\nconst {name,age} = people\n//数组结构取值\nconst color = ['red', 'blue']\nconst [first, second] = color\n```\n\n#### Spread Operator 展开运算符（...）\n```javascript\n//数组\nconst color = ['red', 'yellow']\nconst colorful = [...color, 'green', 'pink']\nconsole.log(colorful) //[red, yellow, green, pink]\n\n//对象\nconst alp = { fist: 'a', second: 'b'}\nconst alphabets = { ...alp, third: 'c' }\nconsole.log(alphabets) //{ \"fist\": \"a\", \"second\": \"b\", \"third\": \"c\"\n\n```\n\n#### import 和 export\n用法总结\n- 当用export default people导出时，就用 import people 导入（不带大括号）\n- 一个文件里，有且只能有一个export default。但可以有多个export。\n- 当用export name 时，就用import { name }导入（记得带上大括号）\n- 当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } \n- 当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example\n\n#### Promise\n思考题\n```javascript\nsetTimeout(function() {\n      console.log(1)\n    }, 0);\n    new Promise(function executor(resolve) {\n      console.log(2);\n      for( var i=0 ; i<10000 ; i++ ) {\n        i == 9999 && resolve();\n      }\n      console.log(3);\n    }).then(function() {\n      console.log(4);\n    });\n    console.log(5);\n//输出：2 3 5 4 1\n\n```\n> 类似面试题：https://zhuanlan.zhihu.com/p/25407758\n","slug":"es6基础","published":1,"updated":"2018-02-26T03:32:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozlh00077oms7eecea99","content":"<h4 id=\"let命令\"><a href=\"#let命令\" class=\"headerlink\" title=\"let命令\"></a>let命令</h4><p>let有块级作用域，let声明的变量只在它所在的代码块有效</p>\n<p>var有变量提升现象，let没有变量提升</p>\n<p>let暂时性死区<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错<br>let不允许重复声明<br>一道面试题：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> funcs = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    funcs.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i) &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funcs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">    func()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码会输出10次数组10，如果想要输出0-9，两种解决方案：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5告诉我们可以利用闭包解决这个问题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> funcs = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    func.push((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;(i)))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    func.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><p>字符串拼接</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es5 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'lux'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span> + name)</span><br><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'lux'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>) <span class=\"comment\">//hello lux</span></span><br></pre></td></tr></table></figure>\n<p>es6提供的常用的字符串方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// includes：判断是否包含然后直接返回布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'hahay'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">'y'</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// repeat: 获取字符串重复n次</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'he'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.repeat(<span class=\"number\">3</span>)) <span class=\"comment\">// 'hehehe'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p>默认参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es5设置参数默认值</span></span><br><span class=\"line\"><span class=\"comment\">//这种方式如果num=0就会出现num的值被默认200覆盖</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">        num = num || <span class=\"number\">200</span></span><br><span class=\"line\">        <span class=\"comment\">//当传入num时，num为传入的值</span></span><br><span class=\"line\">        <span class=\"comment\">//当没传入参数时，num即有了默认值200</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//es6设置默认参数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action</span>(<span class=\"params\">num = <span class=\"number\">200</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    action() <span class=\"comment\">//200</span></span><br><span class=\"line\">    action(<span class=\"number\">300</span>) <span class=\"comment\">//300</span></span><br></pre></td></tr></table></figure></p>\n<p>箭头函数</p>\n<blockquote>\n<p>三个特点:   </p>\n<ol>\n<li>不需要function关键字来创建函数  </li>\n<li>省略return关键字 </li>\n<li>继承当前上下文的 this 关键字</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//例如：</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map( <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span> )</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//等同于：</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;).bind(<span class=\"keyword\">this</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"拓展的对象功能\"><a href=\"#拓展的对象功能\" class=\"headerlink\" title=\"拓展的对象功能\"></a>拓展的对象功能</h4><p>对象初始化简写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'danw'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = &#123;<span class=\"attr\">name</span>:name,<span class=\"attr\">age</span>:age&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以上代码es6可以简写为：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'danw'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = &#123;name,age&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对象初始化中方法赋值的简写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lux'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上代码简写如下：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lux'</span>,</span><br><span class=\"line\">    getName () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Object.assign()实现对象浅复制<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;a：<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, objA)</span><br><span class=\"line\">obj.c = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//&#123;a：1,b:2,c:3&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objA) <span class=\"comment\">//&#123;a：1,b:2&#125;  objA的值不会被改变</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"更方便的数据访问–解构\"><a href=\"#更方便的数据访问–解构\" class=\"headerlink\" title=\"更方便的数据访问–解构\"></a>更方便的数据访问–解构</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lux'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = people.name</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = people.age</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name + <span class=\"string\">' --- '</span> + age)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象解构取值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name,age&#125; = people</span><br><span class=\"line\"><span class=\"comment\">//数组结构取值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> color = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, second] = color</span><br></pre></td></tr></table></figure>\n<h4 id=\"Spread-Operator-展开运算符（…）\"><a href=\"#Spread-Operator-展开运算符（…）\" class=\"headerlink\" title=\"Spread Operator 展开运算符（…）\"></a>Spread Operator 展开运算符（…）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> color = [<span class=\"string\">'red'</span>, <span class=\"string\">'yellow'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> colorful = [...color, <span class=\"string\">'green'</span>, <span class=\"string\">'pink'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(colorful) <span class=\"comment\">//[red, yellow, green, pink]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> alp = &#123; <span class=\"attr\">fist</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">second</span>: <span class=\"string\">'b'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> alphabets = &#123; ...alp, <span class=\"attr\">third</span>: <span class=\"string\">'c'</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(alphabets) <span class=\"comment\">//&#123; \"fist\": \"a\", \"second\": \"b\", \"third\": \"c\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"import-和-export\"><a href=\"#import-和-export\" class=\"headerlink\" title=\"import 和 export\"></a>import 和 export</h4><p>用法总结</p>\n<ul>\n<li>当用export default people导出时，就用 import people 导入（不带大括号）</li>\n<li>一个文件里，有且只能有一个export default。但可以有多个export。</li>\n<li>当用export name 时，就用import { name }导入（记得带上大括号）</li>\n<li>当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } </li>\n<li>当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example</li>\n</ul>\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><p>思考题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span> ; i&lt;<span class=\"number\">10000</span> ; i++ ) &#123;</span><br><span class=\"line\">        i == <span class=\"number\">9999</span> &amp;&amp; resolve();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出：2 3 5 4 1</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>类似面试题：<a href=\"https://zhuanlan.zhihu.com/p/25407758\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/25407758</a></p>\n</blockquote>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h4 id=\"let命令\"><a href=\"#let命令\" class=\"headerlink\" title=\"let命令\"></a>let命令</h4><p>let有块级作用域，let声明的变量只在它所在的代码块有效</p>\n<p>var有变量提升现象，let没有变量提升</p>\n<p>let暂时性死区<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错<br>let不允许重复声明<br>一道面试题：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> funcs = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    funcs.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(i) &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">funcs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">    func()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>以上代码会输出10次数组10，如果想要输出0-9，两种解决方案：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5告诉我们可以利用闭包解决这个问题</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> funcs = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    func.push((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;(i)))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    func.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><p>字符串拼接</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es5 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'lux'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span> + name)</span><br><span class=\"line\"><span class=\"comment\">//es6</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'lux'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>) <span class=\"comment\">//hello lux</span></span><br></pre></td></tr></table></figure>\n<p>es6提供的常用的字符串方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// includes：判断是否包含然后直接返回布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'hahay'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">'y'</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// repeat: 获取字符串重复n次</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'he'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.repeat(<span class=\"number\">3</span>)) <span class=\"comment\">// 'hehehe'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p>默认参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es5设置参数默认值</span></span><br><span class=\"line\"><span class=\"comment\">//这种方式如果num=0就会出现num的值被默认200覆盖</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">        num = num || <span class=\"number\">200</span></span><br><span class=\"line\">        <span class=\"comment\">//当传入num时，num为传入的值</span></span><br><span class=\"line\">        <span class=\"comment\">//当没传入参数时，num即有了默认值200</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//es6设置默认参数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">action</span>(<span class=\"params\">num = <span class=\"number\">200</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    action() <span class=\"comment\">//200</span></span><br><span class=\"line\">    action(<span class=\"number\">300</span>) <span class=\"comment\">//300</span></span><br></pre></td></tr></table></figure></p>\n<p>箭头函数</p>\n<blockquote>\n<p>三个特点:   </p>\n<ol>\n<li>不需要function关键字来创建函数  </li>\n<li>省略return关键字 </li>\n<li>继承当前上下文的 this 关键字</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//例如：</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map( <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span> )</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//等同于：</span></span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].map((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;).bind(<span class=\"keyword\">this</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"拓展的对象功能\"><a href=\"#拓展的对象功能\" class=\"headerlink\" title=\"拓展的对象功能\"></a>拓展的对象功能</h4><p>对象初始化简写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'danw'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = &#123;<span class=\"attr\">name</span>:name,<span class=\"attr\">age</span>:age&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以上代码es6可以简写为：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'danw'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">27</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = &#123;name,age&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对象初始化中方法赋值的简写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lux'</span>,</span><br><span class=\"line\">    getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上代码简写如下：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lux'</span>,</span><br><span class=\"line\">    getName () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Object.assign()实现对象浅复制<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objA = &#123;a：<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, objA)</span><br><span class=\"line\">obj.c = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">//&#123;a：1,b:2,c:3&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(objA) <span class=\"comment\">//&#123;a：1,b:2&#125;  objA的值不会被改变</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"更方便的数据访问–解构\"><a href=\"#更方便的数据访问–解构\" class=\"headerlink\" title=\"更方便的数据访问–解构\"></a>更方便的数据访问–解构</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'lux'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = people.name</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = people.age</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name + <span class=\"string\">' --- '</span> + age)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象解构取值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name,age&#125; = people</span><br><span class=\"line\"><span class=\"comment\">//数组结构取值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> color = [<span class=\"string\">'red'</span>, <span class=\"string\">'blue'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, second] = color</span><br></pre></td></tr></table></figure>\n<h4 id=\"Spread-Operator-展开运算符（…）\"><a href=\"#Spread-Operator-展开运算符（…）\" class=\"headerlink\" title=\"Spread Operator 展开运算符（…）\"></a>Spread Operator 展开运算符（…）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> color = [<span class=\"string\">'red'</span>, <span class=\"string\">'yellow'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> colorful = [...color, <span class=\"string\">'green'</span>, <span class=\"string\">'pink'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(colorful) <span class=\"comment\">//[red, yellow, green, pink]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> alp = &#123; <span class=\"attr\">fist</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">second</span>: <span class=\"string\">'b'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> alphabets = &#123; ...alp, <span class=\"attr\">third</span>: <span class=\"string\">'c'</span> &#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(alphabets) <span class=\"comment\">//&#123; \"fist\": \"a\", \"second\": \"b\", \"third\": \"c\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"import-和-export\"><a href=\"#import-和-export\" class=\"headerlink\" title=\"import 和 export\"></a>import 和 export</h4><p>用法总结</p>\n<ul>\n<li>当用export default people导出时，就用 import people 导入（不带大括号）</li>\n<li>一个文件里，有且只能有一个export default。但可以有多个export。</li>\n<li>当用export name 时，就用import { name }导入（记得带上大括号）</li>\n<li>当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } </li>\n<li>当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example</li>\n</ul>\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><p>思考题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i=<span class=\"number\">0</span> ; i&lt;<span class=\"number\">10000</span> ; i++ ) &#123;</span><br><span class=\"line\">        i == <span class=\"number\">9999</span> &amp;&amp; resolve();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出：2 3 5 4 1</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>类似面试题：<a href=\"https://zhuanlan.zhihu.com/p/25407758\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/25407758</a></p>\n</blockquote>\n"},{"title":"javascript的GC理解","date":"2018-02-24T08:07:36.000Z","_content":"js会将我们使用不到的变量销毁，怎么判断哪些变量是不会再使用的\n* 全局变量是不会被销毁的，因为我们随时都可能会用到这个变量，所以不能被销毁。\n* 函数内部的变量再函数执行完之后就会被销毁，但是如果这个函数有被外部的变量引用就不会销毁\n```javascript\nfunction a(){\n    var b = 0;\n    return function(){\n        b ++;\n        console.log(b);\n    }\n}\nvar d = a();\nd();//1\nd();//2\n```\n","source":"_posts/javascript的GC理解.md","raw":"---\ntitle: javascript的GC理解\ndate: 2018-02-24 16:07:36\ntags: [垃圾回收]\ncategory: [javascript]\n---\njs会将我们使用不到的变量销毁，怎么判断哪些变量是不会再使用的\n* 全局变量是不会被销毁的，因为我们随时都可能会用到这个变量，所以不能被销毁。\n* 函数内部的变量再函数执行完之后就会被销毁，但是如果这个函数有被外部的变量引用就不会销毁\n```javascript\nfunction a(){\n    var b = 0;\n    return function(){\n        b ++;\n        console.log(b);\n    }\n}\nvar d = a();\nd();//1\nd();//2\n```\n","slug":"javascript的GC理解","published":1,"updated":"2018-02-24T08:20:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozlk00087omsdz93qx8p","content":"<p>js会将我们使用不到的变量销毁，怎么判断哪些变量是不会再使用的</p>\n<ul>\n<li>全局变量是不会被销毁的，因为我们随时都可能会用到这个变量，所以不能被销毁。</li>\n<li>函数内部的变量再函数执行完之后就会被销毁，但是如果这个函数有被外部的变量引用就不会销毁<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        b ++;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = a();</span><br><span class=\"line\">d();<span class=\"comment\">//1</span></span><br><span class=\"line\">d();<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>js会将我们使用不到的变量销毁，怎么判断哪些变量是不会再使用的</p>\n<ul>\n<li>全局变量是不会被销毁的，因为我们随时都可能会用到这个变量，所以不能被销毁。</li>\n<li>函数内部的变量再函数执行完之后就会被销毁，但是如果这个函数有被外部的变量引用就不会销毁<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        b ++;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = a();</span><br><span class=\"line\">d();<span class=\"comment\">//1</span></span><br><span class=\"line\">d();<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-02-05T03:16:43.000Z","updated":"2018-02-05T09:38:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozlo000b7omsqxvkw9ns","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br>","more":"</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"javascript的变量函数提升总结","date":"2018-03-01T02:28:56.000Z","_content":"\n首先对比三段代码：\n```javascript\nvar v='Hello World';\nalert(v); //Hello World\n```\n```javascript\nvar v='Hello World';\n(function(){\n    alert(v);\n})()//Hello World\n```\n```javascript\nvar v='Hello World';\n(function(){\n    alert(v);\n    var v='I love you';\n})()//undefined\n```\n#### javascript作用域\nJavaScript是函数级作用域(function-level scope)，并没有块级作用域,因此在代码块中并不会创建一个新的作用域。只有函数才会创建新的作用域，这样块里面的变量会影响到外部作用域，比如if语句：\n```javascript\nvar x = 1;\nconsole.log(x); // 1\nif (true) {\n   var x = 2;\n   console.log(x); //2\n}\n console.log(x);// 2\n```\n解决方案：\n在函数中创建一个临时的作用域，请像下面这样做\n```javascript\nfunction foo() {\n    var x = 1;\n    if (x) {\n        (function () {\n            var x = 2;\n            // some other code\n        }());\n    }\n    // x is still 1.\n}\n\n```\n#### 变量提升\n变量提升 **_只是提升变量的声明，并不会把赋值也提升上来_**。\n我们定义三个变量：\n\n```javascript\n(function(){\n    var a='One';\n    var b='Two';\n    var c='Three';\n})()\n```\n实际上它是这样子的：\n```javascript\n(function(){\n    var a,b,c;\n    a='One';\n    b='Two';\n    c='Three';\n})()\n```\n####  函数提升\njs中函数的定义有两种，函数声明方式和函数表达式方式，需要注意的是**_只有函数声明会被提升_**\n\n函数声明方式提升【成功】\n\n```javascript\nfunction myTest(){\n    foo();\n    function foo(){\n        alert(\"我来自 foo\");\n    }\n}\nmyTest();\n```\n函数表达式方式提升【失败】\n\n```javascript\nfunction myTest(){\n    foo();\n    var foo =function foo(){\n        alert(\"我来自 foo\");\n    }\n}\nmyTest();\n```\n原文：http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html","source":"_posts/javascript的变量函数提升总结.md","raw":"---\ntitle: javascript的变量函数提升总结\ndate: 2018-03-01 10:28:56\ntags: [变量函数提升]\ncategory: [javascript]\n---\n\n首先对比三段代码：\n```javascript\nvar v='Hello World';\nalert(v); //Hello World\n```\n```javascript\nvar v='Hello World';\n(function(){\n    alert(v);\n})()//Hello World\n```\n```javascript\nvar v='Hello World';\n(function(){\n    alert(v);\n    var v='I love you';\n})()//undefined\n```\n#### javascript作用域\nJavaScript是函数级作用域(function-level scope)，并没有块级作用域,因此在代码块中并不会创建一个新的作用域。只有函数才会创建新的作用域，这样块里面的变量会影响到外部作用域，比如if语句：\n```javascript\nvar x = 1;\nconsole.log(x); // 1\nif (true) {\n   var x = 2;\n   console.log(x); //2\n}\n console.log(x);// 2\n```\n解决方案：\n在函数中创建一个临时的作用域，请像下面这样做\n```javascript\nfunction foo() {\n    var x = 1;\n    if (x) {\n        (function () {\n            var x = 2;\n            // some other code\n        }());\n    }\n    // x is still 1.\n}\n\n```\n#### 变量提升\n变量提升 **_只是提升变量的声明，并不会把赋值也提升上来_**。\n我们定义三个变量：\n\n```javascript\n(function(){\n    var a='One';\n    var b='Two';\n    var c='Three';\n})()\n```\n实际上它是这样子的：\n```javascript\n(function(){\n    var a,b,c;\n    a='One';\n    b='Two';\n    c='Three';\n})()\n```\n####  函数提升\njs中函数的定义有两种，函数声明方式和函数表达式方式，需要注意的是**_只有函数声明会被提升_**\n\n函数声明方式提升【成功】\n\n```javascript\nfunction myTest(){\n    foo();\n    function foo(){\n        alert(\"我来自 foo\");\n    }\n}\nmyTest();\n```\n函数表达式方式提升【失败】\n\n```javascript\nfunction myTest(){\n    foo();\n    var foo =function foo(){\n        alert(\"我来自 foo\");\n    }\n}\nmyTest();\n```\n原文：http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html","slug":"javascript的变量函数提升总结","published":1,"updated":"2018-03-01T09:07:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozlr000c7omsw4mq5n7t","content":"<p>首先对比三段代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">alert(v); <span class=\"comment\">//Hello World</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(v);</span><br><span class=\"line\">&#125;)()<span class=\"comment\">//Hello World</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(v);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> v=<span class=\"string\">'I love you'</span>;</span><br><span class=\"line\">&#125;)()<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"javascript作用域\"><a href=\"#javascript作用域\" class=\"headerlink\" title=\"javascript作用域\"></a>javascript作用域</h4><p>JavaScript是函数级作用域(function-level scope)，并没有块级作用域,因此在代码块中并不会创建一个新的作用域。只有函数才会创建新的作用域，这样块里面的变量会影响到外部作用域，比如if语句：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(x);<span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>解决方案：<br>在函数中创建一个临时的作用域，请像下面这样做<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x) &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">// some other code</span></span><br><span class=\"line\">        &#125;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// x is still 1.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h4><p>变量提升 <strong><em>只是提升变量的声明，并不会把赋值也提升上来</em></strong>。<br>我们定义三个变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a=<span class=\"string\">'One'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b=<span class=\"string\">'Two'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c=<span class=\"string\">'Three'</span>;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>实际上它是这样子的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a,b,c;</span><br><span class=\"line\">    a=<span class=\"string\">'One'</span>;</span><br><span class=\"line\">    b=<span class=\"string\">'Two'</span>;</span><br><span class=\"line\">    c=<span class=\"string\">'Three'</span>;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h4><p>js中函数的定义有两种，函数声明方式和函数表达式方式，需要注意的是<strong><em>只有函数声明会被提升</em></strong></p>\n<p>函数声明方式提升【成功】</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTest</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    foo();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"我来自 foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myTest();</span><br></pre></td></tr></table></figure>\n<p>函数表达式方式提升【失败】</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTest</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    foo();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo =<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"我来自 foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myTest();</span><br></pre></td></tr></table></figure>\n<p>原文：<a href=\"http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html</a></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>首先对比三段代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">alert(v); <span class=\"comment\">//Hello World</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(v);</span><br><span class=\"line\">&#125;)()<span class=\"comment\">//Hello World</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v=<span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(v);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> v=<span class=\"string\">'I love you'</span>;</span><br><span class=\"line\">&#125;)()<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"javascript作用域\"><a href=\"#javascript作用域\" class=\"headerlink\" title=\"javascript作用域\"></a>javascript作用域</h4><p>JavaScript是函数级作用域(function-level scope)，并没有块级作用域,因此在代码块中并不会创建一个新的作用域。只有函数才会创建新的作用域，这样块里面的变量会影响到外部作用域，比如if语句：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(x); <span class=\"comment\">//2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(x);<span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>解决方案：<br>在函数中创建一个临时的作用域，请像下面这样做<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x) &#123;</span><br><span class=\"line\">        (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">// some other code</span></span><br><span class=\"line\">        &#125;());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// x is still 1.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h4><p>变量提升 <strong><em>只是提升变量的声明，并不会把赋值也提升上来</em></strong>。<br>我们定义三个变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a=<span class=\"string\">'One'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b=<span class=\"string\">'Two'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c=<span class=\"string\">'Three'</span>;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>实际上它是这样子的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a,b,c;</span><br><span class=\"line\">    a=<span class=\"string\">'One'</span>;</span><br><span class=\"line\">    b=<span class=\"string\">'Two'</span>;</span><br><span class=\"line\">    c=<span class=\"string\">'Three'</span>;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h4><p>js中函数的定义有两种，函数声明方式和函数表达式方式，需要注意的是<strong><em>只有函数声明会被提升</em></strong></p>\n<p>函数声明方式提升【成功】</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTest</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    foo();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"我来自 foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myTest();</span><br></pre></td></tr></table></figure>\n<p>函数表达式方式提升【失败】</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myTest</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    foo();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo =<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"我来自 foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myTest();</span><br></pre></td></tr></table></figure>\n<p>原文：<a href=\"http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html</a></p>\n"},{"title":"js对象引用赋值引发数据可变的解决方案","date":"2018-03-01T02:28:56.000Z","_content":"\n### js赋值（引用赋值）\n```javascript\nconst student1 = {\n    school: 'Baidu',\n    name: 'HOU Ce',\n    birthdate: '1995-12-15',\n}\n\nconst changeStudent = (student, newName, newBday) => {\n    const newStudent = student;\n    newStudent.name = newName;\n    newStudent.birthdate = newBday;\n    return newStudent;\n}\n\nconst student2 = changeStudent(student1, 'YAN Haijing', '1990-11-10');\n\n// both students will have the name properties\nconsole.log(student1, student2);\n// Object {school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"} \n// Object {school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"}\n```\n创建了一个新的对象student2，但是老的对象student1也被改动了\n\n### 深拷贝与浅拷贝的区别\n以Object.assign(浅拷贝)为列：\n```javascript\nvar obj1 = { a: 0, b: { c: 0 } }\nvar obj2 = Object.assign({}, obj1)\nobj2.a = 1\nobj2.b.c = 1\nconsole.log(obj1) //{ a: 0, b: { c: 1 } }\nconsole.log(obj2) //{ a: 1, b: { c: 1 }\n```\n为什么改变属性a不是指向同一个引用，而b.c指向了同一个引用?因为b不是简单地数据类型，Object.assign拷贝的时候是浅拷贝，只复制了{ c: 0 }的引用变量b,而a:1是简单类型，拷贝的时候拷贝的是值，所以当obj2.b.c改变的时候，因为obj1.b和obj2.b指向的是同一个内存地址，所以obj1.b.c的值也发生了改变。\n如果是深拷贝obj1.b.c的值就不会因为obj2.b.c改变而改变\n\n### 解决方案（创建不可变数据）\n\n ##### 使用ES6当中的解构赋值(浅拷贝，而不是深拷贝)\n```javascript\nconst changeStudent = (student, newName, newBday) => {\n    return {\n        ...student, // 使用解构\n        name: newName, // 覆盖name属性\n        birthdate: newBday // 覆盖birthdate属性\n    }\n}\n\nconst student2 = changeStudent(student1, 'YAN Haijing', '1990-11-10');\n\n// both students will have the name properties\nconsole.log(student1, student2);\n// Object {school: \"Baidu\", name: \"HOU Ce\", birthdate: \"1995-12-15\"} \n// Object {school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"}\n```\n ##### Objects.assign(浅拷贝，而不是深拷贝)\n```javascript\nconst changeStudent = (student, newName, newBday) => Object.assign({}, student, {name: newName, birthdate: newBday})\n\nconst student2 = changeStudent(student1, 'YAN Haijing', '1990-11-10');\n\nconsole.log(student1, student2);\n```\n ##### 使用第三方库\n \n 比如lodash中的merge函数\n\n\n注意：对于数组来说，它里面的 .map, .filter或者.reduce函数不会改变原数组，而是产生并返回一个新数组。这和纯函数的思想不谋而合。\n\n\n原文连接：https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9","source":"_posts/js对象引用赋值引发数据可变的解决方案.md","raw":"---\ntitle: js对象引用赋值引发数据可变的解决方案\ndate: 2018-03-01 10:28:56\ntags: [引用赋值]\ncategory: [javascript]\n---\n\n### js赋值（引用赋值）\n```javascript\nconst student1 = {\n    school: 'Baidu',\n    name: 'HOU Ce',\n    birthdate: '1995-12-15',\n}\n\nconst changeStudent = (student, newName, newBday) => {\n    const newStudent = student;\n    newStudent.name = newName;\n    newStudent.birthdate = newBday;\n    return newStudent;\n}\n\nconst student2 = changeStudent(student1, 'YAN Haijing', '1990-11-10');\n\n// both students will have the name properties\nconsole.log(student1, student2);\n// Object {school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"} \n// Object {school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"}\n```\n创建了一个新的对象student2，但是老的对象student1也被改动了\n\n### 深拷贝与浅拷贝的区别\n以Object.assign(浅拷贝)为列：\n```javascript\nvar obj1 = { a: 0, b: { c: 0 } }\nvar obj2 = Object.assign({}, obj1)\nobj2.a = 1\nobj2.b.c = 1\nconsole.log(obj1) //{ a: 0, b: { c: 1 } }\nconsole.log(obj2) //{ a: 1, b: { c: 1 }\n```\n为什么改变属性a不是指向同一个引用，而b.c指向了同一个引用?因为b不是简单地数据类型，Object.assign拷贝的时候是浅拷贝，只复制了{ c: 0 }的引用变量b,而a:1是简单类型，拷贝的时候拷贝的是值，所以当obj2.b.c改变的时候，因为obj1.b和obj2.b指向的是同一个内存地址，所以obj1.b.c的值也发生了改变。\n如果是深拷贝obj1.b.c的值就不会因为obj2.b.c改变而改变\n\n### 解决方案（创建不可变数据）\n\n ##### 使用ES6当中的解构赋值(浅拷贝，而不是深拷贝)\n```javascript\nconst changeStudent = (student, newName, newBday) => {\n    return {\n        ...student, // 使用解构\n        name: newName, // 覆盖name属性\n        birthdate: newBday // 覆盖birthdate属性\n    }\n}\n\nconst student2 = changeStudent(student1, 'YAN Haijing', '1990-11-10');\n\n// both students will have the name properties\nconsole.log(student1, student2);\n// Object {school: \"Baidu\", name: \"HOU Ce\", birthdate: \"1995-12-15\"} \n// Object {school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"}\n```\n ##### Objects.assign(浅拷贝，而不是深拷贝)\n```javascript\nconst changeStudent = (student, newName, newBday) => Object.assign({}, student, {name: newName, birthdate: newBday})\n\nconst student2 = changeStudent(student1, 'YAN Haijing', '1990-11-10');\n\nconsole.log(student1, student2);\n```\n ##### 使用第三方库\n \n 比如lodash中的merge函数\n\n\n注意：对于数组来说，它里面的 .map, .filter或者.reduce函数不会改变原数组，而是产生并返回一个新数组。这和纯函数的思想不谋而合。\n\n\n原文连接：https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9","slug":"js对象引用赋值引发数据可变的解决方案","published":1,"updated":"2018-03-01T09:07:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozlv000g7oms6fjxm9vn","content":"<h3 id=\"js赋值（引用赋值）\"><a href=\"#js赋值（引用赋值）\" class=\"headerlink\" title=\"js赋值（引用赋值）\"></a>js赋值（引用赋值）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student1 = &#123;</span><br><span class=\"line\">    school: <span class=\"string\">'Baidu'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'HOU Ce'</span>,</span><br><span class=\"line\">    birthdate: <span class=\"string\">'1995-12-15'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> changeStudent = <span class=\"function\">(<span class=\"params\">student, newName, newBday</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newStudent = student;</span><br><span class=\"line\">    newStudent.name = newName;</span><br><span class=\"line\">    newStudent.birthdate = newBday;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newStudent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student2 = changeStudent(student1, <span class=\"string\">'YAN Haijing'</span>, <span class=\"string\">'1990-11-10'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// both students will have the name properties</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(student1, student2);</span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"&#125;</span></span><br></pre></td></tr></table></figure>\n<p>创建了一个新的对象student2，但是老的对象student1也被改动了</p>\n<h3 id=\"深拷贝与浅拷贝的区别\"><a href=\"#深拷贝与浅拷贝的区别\" class=\"headerlink\" title=\"深拷贝与浅拷贝的区别\"></a>深拷贝与浅拷贝的区别</h3><p>以Object.assign(浅拷贝)为列：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">0</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">0</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class=\"line\">obj2.a = <span class=\"number\">1</span></span><br><span class=\"line\">obj2.b.c = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1) <span class=\"comment\">//&#123; a: 0, b: &#123; c: 1 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2) <span class=\"comment\">//&#123; a: 1, b: &#123; c: 1 &#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>为什么改变属性a不是指向同一个引用，而b.c指向了同一个引用?因为b不是简单地数据类型，Object.assign拷贝的时候是浅拷贝，只复制了{ c: 0 }的引用变量b,而a:1是简单类型，拷贝的时候拷贝的是值，所以当obj2.b.c改变的时候，因为obj1.b和obj2.b指向的是同一个内存地址，所以obj1.b.c的值也发生了改变。<br>如果是深拷贝obj1.b.c的值就不会因为obj2.b.c改变而改变</p>\n<h3 id=\"解决方案（创建不可变数据）\"><a href=\"#解决方案（创建不可变数据）\" class=\"headerlink\" title=\"解决方案（创建不可变数据）\"></a>解决方案（创建不可变数据）</h3><h5 id=\"使用ES6当中的解构赋值-浅拷贝，而不是深拷贝\"><a href=\"#使用ES6当中的解构赋值-浅拷贝，而不是深拷贝\" class=\"headerlink\" title=\"使用ES6当中的解构赋值(浅拷贝，而不是深拷贝)\"></a>使用ES6当中的解构赋值(浅拷贝，而不是深拷贝)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> changeStudent = <span class=\"function\">(<span class=\"params\">student, newName, newBday</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...student, <span class=\"comment\">// 使用解构</span></span><br><span class=\"line\">        name: newName, <span class=\"comment\">// 覆盖name属性</span></span><br><span class=\"line\">        birthdate: newBday <span class=\"comment\">// 覆盖birthdate属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student2 = changeStudent(student1, <span class=\"string\">'YAN Haijing'</span>, <span class=\"string\">'1990-11-10'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// both students will have the name properties</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(student1, student2);</span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"HOU Ce\", birthdate: \"1995-12-15\"&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"&#125;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Objects-assign-浅拷贝，而不是深拷贝\"><a href=\"#Objects-assign-浅拷贝，而不是深拷贝\" class=\"headerlink\" title=\"Objects.assign(浅拷贝，而不是深拷贝)\"></a>Objects.assign(浅拷贝，而不是深拷贝)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> changeStudent = <span class=\"function\">(<span class=\"params\">student, newName, newBday</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, student, &#123;<span class=\"attr\">name</span>: newName, <span class=\"attr\">birthdate</span>: newBday&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student2 = changeStudent(student1, <span class=\"string\">'YAN Haijing'</span>, <span class=\"string\">'1990-11-10'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(student1, student2);</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用第三方库\"><a href=\"#使用第三方库\" class=\"headerlink\" title=\"使用第三方库\"></a>使用第三方库</h5><p> 比如lodash中的merge函数</p>\n<p>注意：对于数组来说，它里面的 .map, .filter或者.reduce函数不会改变原数组，而是产生并返回一个新数组。这和纯函数的思想不谋而合。</p>\n<p>原文连接：<a href=\"https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9</a></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h3 id=\"js赋值（引用赋值）\"><a href=\"#js赋值（引用赋值）\" class=\"headerlink\" title=\"js赋值（引用赋值）\"></a>js赋值（引用赋值）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student1 = &#123;</span><br><span class=\"line\">    school: <span class=\"string\">'Baidu'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'HOU Ce'</span>,</span><br><span class=\"line\">    birthdate: <span class=\"string\">'1995-12-15'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> changeStudent = <span class=\"function\">(<span class=\"params\">student, newName, newBday</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newStudent = student;</span><br><span class=\"line\">    newStudent.name = newName;</span><br><span class=\"line\">    newStudent.birthdate = newBday;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newStudent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student2 = changeStudent(student1, <span class=\"string\">'YAN Haijing'</span>, <span class=\"string\">'1990-11-10'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// both students will have the name properties</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(student1, student2);</span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"&#125;</span></span><br></pre></td></tr></table></figure>\n<p>创建了一个新的对象student2，但是老的对象student1也被改动了</p>\n<h3 id=\"深拷贝与浅拷贝的区别\"><a href=\"#深拷贝与浅拷贝的区别\" class=\"headerlink\" title=\"深拷贝与浅拷贝的区别\"></a>深拷贝与浅拷贝的区别</h3><p>以Object.assign(浅拷贝)为列：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">0</span>, <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">0</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1)</span><br><span class=\"line\">obj2.a = <span class=\"number\">1</span></span><br><span class=\"line\">obj2.b.c = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1) <span class=\"comment\">//&#123; a: 0, b: &#123; c: 1 &#125; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2) <span class=\"comment\">//&#123; a: 1, b: &#123; c: 1 &#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>为什么改变属性a不是指向同一个引用，而b.c指向了同一个引用?因为b不是简单地数据类型，Object.assign拷贝的时候是浅拷贝，只复制了{ c: 0 }的引用变量b,而a:1是简单类型，拷贝的时候拷贝的是值，所以当obj2.b.c改变的时候，因为obj1.b和obj2.b指向的是同一个内存地址，所以obj1.b.c的值也发生了改变。<br>如果是深拷贝obj1.b.c的值就不会因为obj2.b.c改变而改变</p>\n<h3 id=\"解决方案（创建不可变数据）\"><a href=\"#解决方案（创建不可变数据）\" class=\"headerlink\" title=\"解决方案（创建不可变数据）\"></a>解决方案（创建不可变数据）</h3><h5 id=\"使用ES6当中的解构赋值-浅拷贝，而不是深拷贝\"><a href=\"#使用ES6当中的解构赋值-浅拷贝，而不是深拷贝\" class=\"headerlink\" title=\"使用ES6当中的解构赋值(浅拷贝，而不是深拷贝)\"></a>使用ES6当中的解构赋值(浅拷贝，而不是深拷贝)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> changeStudent = <span class=\"function\">(<span class=\"params\">student, newName, newBday</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...student, <span class=\"comment\">// 使用解构</span></span><br><span class=\"line\">        name: newName, <span class=\"comment\">// 覆盖name属性</span></span><br><span class=\"line\">        birthdate: newBday <span class=\"comment\">// 覆盖birthdate属性</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student2 = changeStudent(student1, <span class=\"string\">'YAN Haijing'</span>, <span class=\"string\">'1990-11-10'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// both students will have the name properties</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(student1, student2);</span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"HOU Ce\", birthdate: \"1995-12-15\"&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// Object &#123;school: \"Baidu\", name: \"YAN Haijing\", birthdate: \"1990-11-10\"&#125;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Objects-assign-浅拷贝，而不是深拷贝\"><a href=\"#Objects-assign-浅拷贝，而不是深拷贝\" class=\"headerlink\" title=\"Objects.assign(浅拷贝，而不是深拷贝)\"></a>Objects.assign(浅拷贝，而不是深拷贝)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> changeStudent = <span class=\"function\">(<span class=\"params\">student, newName, newBday</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, student, &#123;<span class=\"attr\">name</span>: newName, <span class=\"attr\">birthdate</span>: newBday&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> student2 = changeStudent(student1, <span class=\"string\">'YAN Haijing'</span>, <span class=\"string\">'1990-11-10'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(student1, student2);</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用第三方库\"><a href=\"#使用第三方库\" class=\"headerlink\" title=\"使用第三方库\"></a>使用第三方库</h5><p> 比如lodash中的merge函数</p>\n<p>注意：对于数组来说，它里面的 .map, .filter或者.reduce函数不会改变原数组，而是产生并返回一个新数组。这和纯函数的思想不谋而合。</p>\n<p>原文连接：<a href=\"https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/58d0ff6f1b69e6006b8fd4e9</a></p>\n"},{"title":"linux系统分类","date":"2018-02-27T08:07:34.000Z","_content":"一般来说著名的linux系统基本上分两大类：\n* RedHat系列：Redhat、Centos、Fedora等\n* Debian系列：Debian、Ubuntu等\n\n#### RedHat系列 \n\n常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数” \n\n包管理工具 yum \n\n```\nyum的配置文件：/etc/yum.conf \nyum install gcc  [centos] \n更新：yum update \n安装：yum install xxx \n移除：yum remove xxx \n清除已经安装过的档案（/var/cache/yum/）：yum clean all \n搜寻：yum search xxx \n列出所有档案：yum list \n查询档案讯息：yum info xxx \n```\n支持tar包\n\n#### Debian系列 \n\n常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数” \n\n包管理工具 apt-get \n\n```\n更新软件包：apt-get update\n安装：apt-get install xxx\n移除：apt-get remove xxx\n更新安装过的包：apt-get upgrade xxx\n```\n支持tar包\n","source":"_posts/linux系统分类.md","raw":"---\ntitle: linux系统分类\ndate: 2018-02-27 16:07:34\ntags: [linux,操作系统]\ncategory: [linux]\n---\n一般来说著名的linux系统基本上分两大类：\n* RedHat系列：Redhat、Centos、Fedora等\n* Debian系列：Debian、Ubuntu等\n\n#### RedHat系列 \n\n常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数” \n\n包管理工具 yum \n\n```\nyum的配置文件：/etc/yum.conf \nyum install gcc  [centos] \n更新：yum update \n安装：yum install xxx \n移除：yum remove xxx \n清除已经安装过的档案（/var/cache/yum/）：yum clean all \n搜寻：yum search xxx \n列出所有档案：yum list \n查询档案讯息：yum info xxx \n```\n支持tar包\n\n#### Debian系列 \n\n常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数” \n\n包管理工具 apt-get \n\n```\n更新软件包：apt-get update\n安装：apt-get install xxx\n移除：apt-get remove xxx\n更新安装过的包：apt-get upgrade xxx\n```\n支持tar包\n","slug":"linux系统分类","published":1,"updated":"2018-03-01T09:57:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozlz000i7omsyzts2yut","content":"<p>一般来说著名的linux系统基本上分两大类：</p>\n<ul>\n<li>RedHat系列：Redhat、Centos、Fedora等</li>\n<li>Debian系列：Debian、Ubuntu等</li>\n</ul>\n<h4 id=\"RedHat系列\"><a href=\"#RedHat系列\" class=\"headerlink\" title=\"RedHat系列\"></a>RedHat系列</h4><p>常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数” </p>\n<p>包管理工具 yum </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum的配置文件：/etc/yum.conf </span><br><span class=\"line\">yum install gcc  [centos] </span><br><span class=\"line\">更新：yum update </span><br><span class=\"line\">安装：yum install xxx </span><br><span class=\"line\">移除：yum remove xxx </span><br><span class=\"line\">清除已经安装过的档案（/var/cache/yum/）：yum clean all </span><br><span class=\"line\">搜寻：yum search xxx </span><br><span class=\"line\">列出所有档案：yum list </span><br><span class=\"line\">查询档案讯息：yum info xxx</span><br></pre></td></tr></table></figure>\n<p>支持tar包</p>\n<h4 id=\"Debian系列\"><a href=\"#Debian系列\" class=\"headerlink\" title=\"Debian系列\"></a>Debian系列</h4><p>常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数” </p>\n<p>包管理工具 apt-get </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">更新软件包：apt-get update</span><br><span class=\"line\">安装：apt-get install xxx</span><br><span class=\"line\">移除：apt-get remove xxx</span><br><span class=\"line\">更新安装过的包：apt-get upgrade xxx</span><br></pre></td></tr></table></figure>\n<p>支持tar包</p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>一般来说著名的linux系统基本上分两大类：</p>\n<ul>\n<li>RedHat系列：Redhat、Centos、Fedora等</li>\n<li>Debian系列：Debian、Ubuntu等</li>\n</ul>\n<h4 id=\"RedHat系列\"><a href=\"#RedHat系列\" class=\"headerlink\" title=\"RedHat系列\"></a>RedHat系列</h4><p>常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数” </p>\n<p>包管理工具 yum </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum的配置文件：/etc/yum.conf </span><br><span class=\"line\">yum install gcc  [centos] </span><br><span class=\"line\">更新：yum update </span><br><span class=\"line\">安装：yum install xxx </span><br><span class=\"line\">移除：yum remove xxx </span><br><span class=\"line\">清除已经安装过的档案（/var/cache/yum/）：yum clean all </span><br><span class=\"line\">搜寻：yum search xxx </span><br><span class=\"line\">列出所有档案：yum list </span><br><span class=\"line\">查询档案讯息：yum info xxx</span><br></pre></td></tr></table></figure>\n<p>支持tar包</p>\n<h4 id=\"Debian系列\"><a href=\"#Debian系列\" class=\"headerlink\" title=\"Debian系列\"></a>Debian系列</h4><p>常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数” </p>\n<p>包管理工具 apt-get </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">更新软件包：apt-get update</span><br><span class=\"line\">安装：apt-get install xxx</span><br><span class=\"line\">移除：apt-get remove xxx</span><br><span class=\"line\">更新安装过的包：apt-get upgrade xxx</span><br></pre></td></tr></table></figure>\n<p>支持tar包</p>\n"},{"title":"js实现冒泡排序算法","date":"2018-03-22T07:18:59.000Z","_content":"\n原理：将前后两个数进行比较，较大或者较小的往后放\n例如：let numbers={ 1,5,3,6,4,9,8,0,7,2}\n第一轮比较：\n第一次比较：1，5，3，6，4，9，8，0，7，2第一个数不大于第二个数，不调换位置\n\n第二次比较：1，3，5，6，4，9，8，0，7，2第二个数大于第三个数，调换位置\n\n第三次比较：1，3，5，6，4，9，8，0，7，2 第三个数不大于第四个数，不调换位置\n\n第四次比较：1，3，5，4，6，9，8，0，7，2 第四个数大于第五个数，调换位置\n.\n.\n.\n以此类推 第九次比较：1，3，5，4，6，8，0，7，2，9第九个数大于第十个数，调换位置\n\n第二轮比较：\n比较次数8次\n\n第三轮比较：\n比较次数7次\n.\n.\n.\n以此类推 第九轮比较1次\n从上面的分析我们可以看出我们排10个数需要比较九轮，每一轮比较由9次递减到1次\n\n以下是js代码的实现：\n```javascript\nvar arr = [2, 10, 3, 4, 1, 7, 5, 6, 9, 8]\nfunction sort(arr) {\n    for (let i = 0; i < arr.length-1; i++){\n        for (let j = 0; j < arr.length-1-i; j++){\n            let temp = arr[j]\n            if (arr[j] > arr[j + 1]) {\n                arr[j] = arr[j + 1]\n                arr[j+1] = temp\n            }\n        }\n    }\n}\nsort(arr)\nconsole.log(arr)\n```\n","source":"_posts/js实现冒泡排序算法.md","raw":"---\ntitle: js实现冒泡排序算法\ndate: 2018-03-22 15:18:59\ntags: [冒泡排序]\ncategory: [算法]\n---\n\n原理：将前后两个数进行比较，较大或者较小的往后放\n例如：let numbers={ 1,5,3,6,4,9,8,0,7,2}\n第一轮比较：\n第一次比较：1，5，3，6，4，9，8，0，7，2第一个数不大于第二个数，不调换位置\n\n第二次比较：1，3，5，6，4，9，8，0，7，2第二个数大于第三个数，调换位置\n\n第三次比较：1，3，5，6，4，9，8，0，7，2 第三个数不大于第四个数，不调换位置\n\n第四次比较：1，3，5，4，6，9，8，0，7，2 第四个数大于第五个数，调换位置\n.\n.\n.\n以此类推 第九次比较：1，3，5，4，6，8，0，7，2，9第九个数大于第十个数，调换位置\n\n第二轮比较：\n比较次数8次\n\n第三轮比较：\n比较次数7次\n.\n.\n.\n以此类推 第九轮比较1次\n从上面的分析我们可以看出我们排10个数需要比较九轮，每一轮比较由9次递减到1次\n\n以下是js代码的实现：\n```javascript\nvar arr = [2, 10, 3, 4, 1, 7, 5, 6, 9, 8]\nfunction sort(arr) {\n    for (let i = 0; i < arr.length-1; i++){\n        for (let j = 0; j < arr.length-1-i; j++){\n            let temp = arr[j]\n            if (arr[j] > arr[j + 1]) {\n                arr[j] = arr[j + 1]\n                arr[j+1] = temp\n            }\n        }\n    }\n}\nsort(arr)\nconsole.log(arr)\n```\n","slug":"js实现冒泡排序算法","published":1,"updated":"2018-03-22T07:29:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozm5000n7omsib21eajh","content":"<p>原理：将前后两个数进行比较，较大或者较小的往后放<br>例如：let numbers={ 1,5,3,6,4,9,8,0,7,2}<br>第一轮比较：<br>第一次比较：1，5，3，6，4，9，8，0，7，2第一个数不大于第二个数，不调换位置</p>\n<p>第二次比较：1，3，5，6，4，9，8，0，7，2第二个数大于第三个数，调换位置</p>\n<p>第三次比较：1，3，5，6，4，9，8，0，7，2 第三个数不大于第四个数，不调换位置</p>\n<p>第四次比较：1，3，5，4，6，9，8，0，7，2 第四个数大于第五个数，调换位置<br>.<br>.<br>.<br>以此类推 第九次比较：1，3，5，4，6，8，0，7，2，9第九个数大于第十个数，调换位置</p>\n<p>第二轮比较：<br>比较次数8次</p>\n<p>第三轮比较：<br>比较次数7次<br>.<br>.<br>.<br>以此类推 第九轮比较1次<br>从上面的分析我们可以看出我们排10个数需要比较九轮，每一轮比较由9次递减到1次</p>\n<p>以下是js代码的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length<span class=\"number\">-1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr.length<span class=\"number\">-1</span>-i; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = arr[j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = temp</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sort(arr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>原理：将前后两个数进行比较，较大或者较小的往后放<br>例如：let numbers={ 1,5,3,6,4,9,8,0,7,2}<br>第一轮比较：<br>第一次比较：1，5，3，6，4，9，8，0，7，2第一个数不大于第二个数，不调换位置</p>\n<p>第二次比较：1，3，5，6，4，9，8，0，7，2第二个数大于第三个数，调换位置</p>\n<p>第三次比较：1，3，5，6，4，9，8，0，7，2 第三个数不大于第四个数，不调换位置</p>\n<p>第四次比较：1，3，5，4，6，9，8，0，7，2 第四个数大于第五个数，调换位置<br>.<br>.<br>.<br>以此类推 第九次比较：1，3，5，4，6，8，0，7，2，9第九个数大于第十个数，调换位置</p>\n<p>第二轮比较：<br>比较次数8次</p>\n<p>第三轮比较：<br>比较次数7次<br>.<br>.<br>.<br>以此类推 第九轮比较1次<br>从上面的分析我们可以看出我们排10个数需要比较九轮，每一轮比较由9次递减到1次</p>\n<p>以下是js代码的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length<span class=\"number\">-1</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; arr.length<span class=\"number\">-1</span>-i; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = arr[j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>]</span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = temp</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sort(arr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"js实现插入排序算法","date":"2018-03-22T08:58:40.000Z","_content":"\n原理：从下标1开始，current=array[i],对数组的前i-1项进行检查，如果存在大于current值，将此值往后移，赋值给下一项\n\n以下是js代码的实现：\n```javascript\nfunction sort(arr) {\n    for (let i = 1; i < arr.length; i++){\n        let current = arr[i]\n        var index = i;//记录要被插入的下标\n        for (let j = i-1; j >= 0; j--){\n            if (current < arr[j]) { \n                arr[j + 1] = arr[j]\n                index = j\n            }\n        }\n        arr[index] = current\n    }\n    return arr\n}\nlet arr = [34,8,64,51,32,21]\nconsole.log(sort(arr))\n```\n","source":"_posts/js实现插入排序算法.md","raw":"---\ntitle: js实现插入排序算法\ndate: 2018-03-22 16:58:40\ntags: [插入排序]\ncategory: [算法]\n---\n\n原理：从下标1开始，current=array[i],对数组的前i-1项进行检查，如果存在大于current值，将此值往后移，赋值给下一项\n\n以下是js代码的实现：\n```javascript\nfunction sort(arr) {\n    for (let i = 1; i < arr.length; i++){\n        let current = arr[i]\n        var index = i;//记录要被插入的下标\n        for (let j = i-1; j >= 0; j--){\n            if (current < arr[j]) { \n                arr[j + 1] = arr[j]\n                index = j\n            }\n        }\n        arr[index] = current\n    }\n    return arr\n}\nlet arr = [34,8,64,51,32,21]\nconsole.log(sort(arr))\n```\n","slug":"js实现插入排序算法","published":1,"updated":"2018-03-22T09:03:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozmb000p7oms0awezu08","content":"<p>原理：从下标1开始，current=array[i],对数组的前i-1项进行检查，如果存在大于current值，将此值往后移，赋值给下一项</p>\n<p>以下是js代码的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> current = arr[i]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index = i;<span class=\"comment\">//记录要被插入的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i<span class=\"number\">-1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current &lt; arr[j]) &#123; </span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j]</span><br><span class=\"line\">                index = j</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[index] = current</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">34</span>,<span class=\"number\">8</span>,<span class=\"number\">64</span>,<span class=\"number\">51</span>,<span class=\"number\">32</span>,<span class=\"number\">21</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sort(arr))</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>原理：从下标1开始，current=array[i],对数组的前i-1项进行检查，如果存在大于current值，将此值往后移，赋值给下一项</p>\n<p>以下是js代码的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> current = arr[i]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index = i;<span class=\"comment\">//记录要被插入的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i<span class=\"number\">-1</span>; j &gt;= <span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current &lt; arr[j]) &#123; </span><br><span class=\"line\">                arr[j + <span class=\"number\">1</span>] = arr[j]</span><br><span class=\"line\">                index = j</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[index] = current</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">34</span>,<span class=\"number\">8</span>,<span class=\"number\">64</span>,<span class=\"number\">51</span>,<span class=\"number\">32</span>,<span class=\"number\">21</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sort(arr))</span><br></pre></td></tr></table></figure></p>\n"},{"title":"promise深入理解","date":"2018-02-12T06:01:37.000Z","_content":"#### promise是什么\npromise 是一个构造函数，自己身上有all、reject、resolve这些方法，原型上有then、catch这些方法，用Promise new出来的对象肯定就有then、catch方法。\n```javascript\nvar p = new Promise(function(resolve, reject){\n    //做一些异步操作\n    setTimeout(function(){\n        console.log('执行完成');\n        resolve('随便什么数据');\n    }, 2000);\n});\n```\n\n*注意，这里知识new了一个Promise对象，并没有去调用它，但是传进去的函数已经之行了，所以在使用Promise的时候一般是包在一个函数中，使用的时候再去调用函数。\n\n#### promise链式操作调用\n\n```javascript\nfunction runAsync1(){\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync1执行完成');\n            resolve('runAsync1随便什么数据');\n        }, 2000);\n    });\n}\nfunction runAsync2(){\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync2执行完成');\n            resolve('runAsync2随便什么数据');\n        }, 2000);\n    });\n}\nfunction runAsync3(){\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync3执行完成');\n            resolve('runAsync3随便什么数据');\n        }, 2000);\n    });\n}\n\nrunAsync1().then(data => {\n    console.log(data)//runAsync1函数的resolve结果\n    return runAsync2()\n}).then(data => {\n    console.log(data)//runAsync2函数的resolve结果\n    return runAsync3()\n}).then(data => {\n    console.log(data) //runAsync3函数的resolve结果  \n})\n\n//如果当前函数执行不依赖于上一个函数的返回值，也可以这样写:\nrunAsync1().then(runAsync2).then(runAsync3).then(data => {\n    console.log(data) //这里只能拿到runAsync3函数的resolve结果 \n})\n\n//当然这种方式也可以手动在每一个函数内部获取上一个函数的返回值，例如runAsync2想要使用runAsync1的返回值，runAsync2就得这样写：\n\nfunction runAsync2(data){\n    console.log(data)//data为runAsync1函数的resolve结果\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync2执行完成');\n            resolve('runAsync2随便什么数据');\n        }, 2000);\n    });\n}\n```\n#### 异常处理\n使用catch处理异常\nthen方法有两个参数，第一个是处理resolve的回调，第二个是处理reject的回调，catch和then的第二个参数一样也是指定reject回调的。\n以上面的列子说明：\n1. 可以在then的第二个参数里面处理error\n```javascript\nrunAsync1().then(data => {\n    console.log(data)//runAsync1函数的resolve结果\n    return runAsync2()\n}).then(data => {\n    console.log(data)//runAsync2函数的resolve结果\n    return runAsync3()\n}).then(data => {\n    console.log(data) //runAsync3函数的resolve结果  \n},err=>{\n    console.log(err)\n})\n\n```\n2. 也可以放在then方法的外面使用catch处理，效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中\n```javascript\nrunAsync1().then(data => {\n    console.log(data)\n    return runAsync2()\n}).then(data => {\n    console.log(data)\n    return runAsync3()\n}).then(data => {\n    console.log(data)    \n}).catch(err => { \n    console.log(err)\n})\n\n```\n*注意，不管runAsync1、runAsync2、runAsync3出现异常，都会走到catch中，如果runAsync1出现异常，runAsync2、runAsync3都不会执行。\n#### Promise.all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\n并行执行一组异步操作，并且返回值是所有异步操作返回值的数组\n```javascript\nPromise\n    .all([runAsync1(), runAsync2(), runAsync3()])\n    .then(function(results){\n        console.log(results);\n});\n```\n#### Promise.race（谁执行的快以谁为准执行回调）\n使用场景：可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作\n```javascript\nPromise\n.race([runAsync1(), runAsync2(), runAsync3()])\n.then(function(results){\n    console.log(results);\n});\n```\n###### 示例代码：\n```javascript\n//10秒之后执行\nfunction timeout10(){\n    var p = new Promise(function(resolve, reject){\n        setTimeout(function(){\n            resolve('success');\n        }, 4000);\n    });\n    return p;\n}\n\n//延时函数，用于给请求计时\nfunction timeout5(){\n    var p = new Promise(function(resolve, reject){\n        setTimeout(function(){\n            reject('请求超时');\n        }, 5000);\n    });\n    return p;\n}\n\nPromise\n.race([timeout10(), timeout5()])\n.then(function(results){\n    console.log(results);\n})\n.catch(function(reason){\n    console.log(reason);\n});\n```\n\n参考帖子：http://www.cnblogs.com/lvdabao/p/es6-promise-1.html\n","source":"_posts/promise深入理解.md","raw":"---\ntitle: promise深入理解\ndate: 2018-02-12 14:01:37\ntags: [js,promise]\ncategory: [node]\n---\n#### promise是什么\npromise 是一个构造函数，自己身上有all、reject、resolve这些方法，原型上有then、catch这些方法，用Promise new出来的对象肯定就有then、catch方法。\n```javascript\nvar p = new Promise(function(resolve, reject){\n    //做一些异步操作\n    setTimeout(function(){\n        console.log('执行完成');\n        resolve('随便什么数据');\n    }, 2000);\n});\n```\n\n*注意，这里知识new了一个Promise对象，并没有去调用它，但是传进去的函数已经之行了，所以在使用Promise的时候一般是包在一个函数中，使用的时候再去调用函数。\n\n#### promise链式操作调用\n\n```javascript\nfunction runAsync1(){\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync1执行完成');\n            resolve('runAsync1随便什么数据');\n        }, 2000);\n    });\n}\nfunction runAsync2(){\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync2执行完成');\n            resolve('runAsync2随便什么数据');\n        }, 2000);\n    });\n}\nfunction runAsync3(){\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync3执行完成');\n            resolve('runAsync3随便什么数据');\n        }, 2000);\n    });\n}\n\nrunAsync1().then(data => {\n    console.log(data)//runAsync1函数的resolve结果\n    return runAsync2()\n}).then(data => {\n    console.log(data)//runAsync2函数的resolve结果\n    return runAsync3()\n}).then(data => {\n    console.log(data) //runAsync3函数的resolve结果  \n})\n\n//如果当前函数执行不依赖于上一个函数的返回值，也可以这样写:\nrunAsync1().then(runAsync2).then(runAsync3).then(data => {\n    console.log(data) //这里只能拿到runAsync3函数的resolve结果 \n})\n\n//当然这种方式也可以手动在每一个函数内部获取上一个函数的返回值，例如runAsync2想要使用runAsync1的返回值，runAsync2就得这样写：\n\nfunction runAsync2(data){\n    console.log(data)//data为runAsync1函数的resolve结果\n    return new Promise(function(resolve, reject){\n        //做一些异步操作\n        setTimeout(function(){\n            console.log('runAsync2执行完成');\n            resolve('runAsync2随便什么数据');\n        }, 2000);\n    });\n}\n```\n#### 异常处理\n使用catch处理异常\nthen方法有两个参数，第一个是处理resolve的回调，第二个是处理reject的回调，catch和then的第二个参数一样也是指定reject回调的。\n以上面的列子说明：\n1. 可以在then的第二个参数里面处理error\n```javascript\nrunAsync1().then(data => {\n    console.log(data)//runAsync1函数的resolve结果\n    return runAsync2()\n}).then(data => {\n    console.log(data)//runAsync2函数的resolve结果\n    return runAsync3()\n}).then(data => {\n    console.log(data) //runAsync3函数的resolve结果  \n},err=>{\n    console.log(err)\n})\n\n```\n2. 也可以放在then方法的外面使用catch处理，效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中\n```javascript\nrunAsync1().then(data => {\n    console.log(data)\n    return runAsync2()\n}).then(data => {\n    console.log(data)\n    return runAsync3()\n}).then(data => {\n    console.log(data)    \n}).catch(err => { \n    console.log(err)\n})\n\n```\n*注意，不管runAsync1、runAsync2、runAsync3出现异常，都会走到catch中，如果runAsync1出现异常，runAsync2、runAsync3都不会执行。\n#### Promise.all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\n并行执行一组异步操作，并且返回值是所有异步操作返回值的数组\n```javascript\nPromise\n    .all([runAsync1(), runAsync2(), runAsync3()])\n    .then(function(results){\n        console.log(results);\n});\n```\n#### Promise.race（谁执行的快以谁为准执行回调）\n使用场景：可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作\n```javascript\nPromise\n.race([runAsync1(), runAsync2(), runAsync3()])\n.then(function(results){\n    console.log(results);\n});\n```\n###### 示例代码：\n```javascript\n//10秒之后执行\nfunction timeout10(){\n    var p = new Promise(function(resolve, reject){\n        setTimeout(function(){\n            resolve('success');\n        }, 4000);\n    });\n    return p;\n}\n\n//延时函数，用于给请求计时\nfunction timeout5(){\n    var p = new Promise(function(resolve, reject){\n        setTimeout(function(){\n            reject('请求超时');\n        }, 5000);\n    });\n    return p;\n}\n\nPromise\n.race([timeout10(), timeout5()])\n.then(function(results){\n    console.log(results);\n})\n.catch(function(reason){\n    console.log(reason);\n});\n```\n\n参考帖子：http://www.cnblogs.com/lvdabao/p/es6-promise-1.html\n","slug":"promise深入理解","published":1,"updated":"2018-03-01T09:57:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozmf000t7omst8l48q83","content":"<h4 id=\"promise是什么\"><a href=\"#promise是什么\" class=\"headerlink\" title=\"promise是什么\"></a>promise是什么</h4><p>promise 是一个构造函数，自己身上有all、reject、resolve这些方法，原型上有then、catch这些方法，用Promise new出来的对象肯定就有then、catch方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行完成'</span>);</span><br><span class=\"line\">        resolve(<span class=\"string\">'随便什么数据'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>*注意，这里知识new了一个Promise对象，并没有去调用它，但是传进去的函数已经之行了，所以在使用Promise的时候一般是包在一个函数中，使用的时候再去调用函数。</p>\n<h4 id=\"promise链式操作调用\"><a href=\"#promise链式操作调用\" class=\"headerlink\" title=\"promise链式操作调用\"></a>promise链式操作调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync1执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync1随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync2执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync2随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync3执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync3随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">runAsync1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync1函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync2()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync2函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync3()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">//runAsync3函数的resolve结果  </span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果当前函数执行不依赖于上一个函数的返回值，也可以这样写:</span></span><br><span class=\"line\">runAsync1().then(runAsync2).then(runAsync3).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">//这里只能拿到runAsync3函数的resolve结果 </span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当然这种方式也可以手动在每一个函数内部获取上一个函数的返回值，例如runAsync2想要使用runAsync1的返回值，runAsync2就得这样写：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync2</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//data为runAsync1函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync2执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync2随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><p>使用catch处理异常<br>then方法有两个参数，第一个是处理resolve的回调，第二个是处理reject的回调，catch和then的第二个参数一样也是指定reject回调的。<br>以上面的列子说明：</p>\n<ol>\n<li><p>可以在then的第二个参数里面处理error</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runAsync1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync1函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync2()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync2函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync3()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">//runAsync3函数的resolve结果  </span></span><br><span class=\"line\">&#125;,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>也可以放在then方法的外面使用catch处理，效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runAsync1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync2()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync3()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)    </span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>*注意，不管runAsync1、runAsync2、runAsync3出现异常，都会走到catch中，如果runAsync1出现异常，runAsync2、runAsync3都不会执行。</p>\n<h4 id=\"Promise-all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\"><a href=\"#Promise-all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\" class=\"headerlink\" title=\"Promise.all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\"></a>Promise.all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）</h4><p>并行执行一组异步操作，并且返回值是所有异步操作返回值的数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">    .all([runAsync1(), runAsync2(), runAsync3()])</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Promise-race（谁执行的快以谁为准执行回调）\"><a href=\"#Promise-race（谁执行的快以谁为准执行回调）\" class=\"headerlink\" title=\"Promise.race（谁执行的快以谁为准执行回调）\"></a>Promise.race（谁执行的快以谁为准执行回调）</h4><p>使用场景：可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">.race([runAsync1(), runAsync2(), runAsync3()])</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"示例代码：\"><a href=\"#示例代码：\" class=\"headerlink\" title=\"示例代码：\"></a>示例代码：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//10秒之后执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout10</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">4000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//延时函数，用于给请求计时</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout5</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'请求超时'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">5000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">.race([timeout10(), timeout5()])</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>参考帖子：<a href=\"http://www.cnblogs.com/lvdabao/p/es6-promise-1.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/lvdabao/p/es6-promise-1.html</a></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<h4 id=\"promise是什么\"><a href=\"#promise是什么\" class=\"headerlink\" title=\"promise是什么\"></a>promise是什么</h4><p>promise 是一个构造函数，自己身上有all、reject、resolve这些方法，原型上有then、catch这些方法，用Promise new出来的对象肯定就有then、catch方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'执行完成'</span>);</span><br><span class=\"line\">        resolve(<span class=\"string\">'随便什么数据'</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>*注意，这里知识new了一个Promise对象，并没有去调用它，但是传进去的函数已经之行了，所以在使用Promise的时候一般是包在一个函数中，使用的时候再去调用函数。</p>\n<h4 id=\"promise链式操作调用\"><a href=\"#promise链式操作调用\" class=\"headerlink\" title=\"promise链式操作调用\"></a>promise链式操作调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync1执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync1随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync2执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync2随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync3执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync3随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">runAsync1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync1函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync2()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync2函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync3()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">//runAsync3函数的resolve结果  </span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果当前函数执行不依赖于上一个函数的返回值，也可以这样写:</span></span><br><span class=\"line\">runAsync1().then(runAsync2).then(runAsync3).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">//这里只能拿到runAsync3函数的resolve结果 </span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当然这种方式也可以手动在每一个函数内部获取上一个函数的返回值，例如runAsync2想要使用runAsync1的返回值，runAsync2就得这样写：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runAsync2</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//data为runAsync1函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做一些异步操作</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'runAsync2执行完成'</span>);</span><br><span class=\"line\">            resolve(<span class=\"string\">'runAsync2随便什么数据'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><p>使用catch处理异常<br>then方法有两个参数，第一个是处理resolve的回调，第二个是处理reject的回调，catch和then的第二个参数一样也是指定reject回调的。<br>以上面的列子说明：</p>\n<ol>\n<li><p>可以在then的第二个参数里面处理error</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runAsync1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync1函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync2()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)<span class=\"comment\">//runAsync2函数的resolve结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync3()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data) <span class=\"comment\">//runAsync3函数的resolve结果  </span></span><br><span class=\"line\">&#125;,err=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>也可以放在then方法的外面使用catch处理，效果和写在then的第二个参数里面一样。不过它还有另外一个作用：在执行resolve的回调（也就是上面then中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会报错卡死js，而是会进到这个catch方法中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runAsync1().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync2()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> runAsync3()</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)    </span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>*注意，不管runAsync1、runAsync2、runAsync3出现异常，都会走到catch中，如果runAsync1出现异常，runAsync2、runAsync3都不会执行。</p>\n<h4 id=\"Promise-all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\"><a href=\"#Promise-all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\" class=\"headerlink\" title=\"Promise.all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）\"></a>Promise.all使用（谁执行的慢以谁为准执行回调，但是返回值是所有的返回值集合）</h4><p>并行执行一组异步操作，并且返回值是所有异步操作返回值的数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">    .all([runAsync1(), runAsync2(), runAsync3()])</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Promise-race（谁执行的快以谁为准执行回调）\"><a href=\"#Promise-race（谁执行的快以谁为准执行回调）\" class=\"headerlink\" title=\"Promise.race（谁执行的快以谁为准执行回调）\"></a>Promise.race（谁执行的快以谁为准执行回调）</h4><p>使用场景：可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">.race([runAsync1(), runAsync2(), runAsync3()])</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"示例代码：\"><a href=\"#示例代码：\" class=\"headerlink\" title=\"示例代码：\"></a>示例代码：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//10秒之后执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout10</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">4000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//延时函数，用于给请求计时</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout5</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'请求超时'</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">5000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">.race([timeout10(), timeout5()])</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>参考帖子：<a href=\"http://www.cnblogs.com/lvdabao/p/es6-promise-1.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/lvdabao/p/es6-promise-1.html</a></p>\n"},{"title":"输出1-100之间的素数","date":"2018-02-28T02:55:39.000Z","_content":"\n素数：除了1和它本身外没有其他因数，即，除了1和它本身外不能被其他数整除\n1---不是素数\n2---最小的素数\n3---2（判断是否能被2整除）\n4---2，3（判断是否能被2,3整除）\n5---2，3，4（判断是否能被2,3,4整除）\n6---2，3，4，5（判断是否能被2,3,4,5整除）\n...\n\n以下是js代码的实现：\n```javascript\nfor(let i=2;i<=100;i++){\n    let flag = true;\n    for(let j=2;j<i;j++){\n        if(i%j==0){\n            flag = false;\n            break;\n        }\n    }\n    if(flag){\n        console.log(i)\n    }  \n}\n```\n","source":"_posts/输出1-100之间的素数.md","raw":"---\ntitle: 输出1-100之间的素数\ndate: 2018-02-28 10:55:39\ntags: [素数]\ncategory: [算法]\n---\n\n素数：除了1和它本身外没有其他因数，即，除了1和它本身外不能被其他数整除\n1---不是素数\n2---最小的素数\n3---2（判断是否能被2整除）\n4---2，3（判断是否能被2,3整除）\n5---2，3，4（判断是否能被2,3,4整除）\n6---2，3，4，5（判断是否能被2,3,4,5整除）\n...\n\n以下是js代码的实现：\n```javascript\nfor(let i=2;i<=100;i++){\n    let flag = true;\n    for(let j=2;j<i;j++){\n        if(i%j==0){\n            flag = false;\n            break;\n        }\n    }\n    if(flag){\n        console.log(i)\n    }  \n}\n```\n","slug":"输出1-100之间的素数","published":1,"updated":"2018-03-01T09:58:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozmi000v7omsjkodo28q","content":"<p>素数：除了1和它本身外没有其他因数，即，除了1和它本身外不能被其他数整除<br>1—不是素数<br>2—最小的素数<br>3—2（判断是否能被2整除）<br>4—2，3（判断是否能被2,3整除）<br>5—2，3，4（判断是否能被2,3,4整除）<br>6—2，3，4，5（判断是否能被2,3,4,5整除）<br>…</p>\n<p>以下是js代码的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j=<span class=\"number\">2</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i%j==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>素数：除了1和它本身外没有其他因数，即，除了1和它本身外不能被其他数整除<br>1—不是素数<br>2—最小的素数<br>3—2（判断是否能被2整除）<br>4—2，3（判断是否能被2,3整除）<br>5—2，3，4（判断是否能被2,3,4整除）<br>6—2，3，4，5（判断是否能被2,3,4,5整除）<br>…</p>\n<p>以下是js代码的实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j=<span class=\"number\">2</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i%j==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"mac下使用tree命令","date":"2018-02-10T05:06:56.000Z","_content":"\nmac下默认是没有 tree命令的，不过我们可以使用find命令模拟出tree命令的效果\n\n如显示当前目录的 tree 的命令\n```\nfind . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\n```\n\n使用alias 指定别名，将它变成一个命令\n\n.bash_profile文件增加以下代码：\n\n```\nalias tree=\"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\"\n```\n","source":"_posts/mac下使用tree命令.md","raw":"---\ntitle: mac下使用tree命令\ndate: 2018-02-10 13:06:56\ncategory: [mac]\ntags: [mac,shell]\n---\n\nmac下默认是没有 tree命令的，不过我们可以使用find命令模拟出tree命令的效果\n\n如显示当前目录的 tree 的命令\n```\nfind . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\n```\n\n使用alias 指定别名，将它变成一个命令\n\n.bash_profile文件增加以下代码：\n\n```\nalias tree=\"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\"\n```\n","slug":"mac下使用tree命令","published":1,"updated":"2018-03-01T09:57:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjf3dozmk000y7omsqkomwxlo","content":"<p>mac下默认是没有 tree命令的，不过我们可以使用find命令模拟出tree命令的效果</p>\n<p>如显示当前目录的 tree 的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;</span><br></pre></td></tr></table></figure></p>\n<p>使用alias 指定别名，将它变成一个命令</p>\n<p>.bash_profile文件增加以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"next":{"override":true,"favicon":{"small":"/images/favicon-16x16-next.png","medium":"/images/favicon-32x32-next.png","apple_touch_icon":"/images/apple-touch-icon-next.png","safari_pinned_tab":"/images/logo.svg"},"keywords":"Hexo, NexT","rss":null,"footer":{"copyright":"wdd. All rights reserved.","powered":false,"theme":{"enable":false,"version":false}},"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/ || home","categories":"/categories/ || th","archives":"/archives/ || archive","tags":"/tags/ || tags","about":"/about/ || user"},"menu_icons":{"enable":true},"scheme":"Pisces","passage_end_tag":{"enabled":true},"social":{"GitHub":"https://github.com/danwbj"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo","Linkedin":"linkedin"},"links_icon":"link","links_title":"Links","links_layout":"block","avatar":"/images/avatar.jpg","toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":true,"length":100},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"totalcount":false,"separated_meta":true},"wechatpay":"/images/wechatpay.png","alipay":"/images/alipay.png","use_motion":false,"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":false,"host":null,"global":{"external":true,"family":"Lato","size":null},"headings":{"external":true,"family":null,"size":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":true,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":true,"shortname":"椰子菇凉","count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":false,"verify":false,"placeholder":"Just go go","avatar":"mm","guest_info":"nick,mail,link","pageSize":10},"gitment":{"enable":false,"mint":true,"count":true,"lazy":false,"cleanly":false,"language":null,"github_user":null,"github_repo":null,"client_id":null,"client_secret":null,"proxy_gateway":null,"redirect_protocol":null},"needmoreshare2":{"enable":false,"postbottom":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"bottomCenter","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}},"float":{"enable":false,"options":{"iconStyle":"box","boxForm":"horizontal","position":"middleRight","networks":"Weibo,Wechat,Douban,QQZone,Twitter,Facebook"}}},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"firestore":{"enable":false,"collection":"articles","apiKey":null,"projectId":null,"bluebird":false},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":true,"calendar":{"enable":true,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null,"needMoreShare2":null},"css":"css","js":"js","images":"images","version":"5.1.4"}}},"excerpt":"","more":"<p>mac下默认是没有 tree命令的，不过我们可以使用find命令模拟出tree命令的效果</p>\n<p>如显示当前目录的 tree 的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;</span><br></pre></td></tr></table></figure></p>\n<p>使用alias 指定别名，将它变成一个命令</p>\n<p>.bash_profile文件增加以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g&apos;&quot;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjf3dozkm00007omsmwbbc7aq","category_id":"cjf3dozl800047oms8w3wss4i","_id":"cjf3dozlt000d7omsmiwndyr1"},{"post_id":"cjf3dozkx00027omsuvcrsrps","category_id":"cjf3dozlm00097omsj96fpo63","_id":"cjf3dozm2000k7omsxwecgw7v"},{"post_id":"cjf3dozlr000c7omsw4mq5n7t","category_id":"cjf3dozlm00097omsj96fpo63","_id":"cjf3dozmb000o7omsldrtisuc"},{"post_id":"cjf3dozlv000g7oms6fjxm9vn","category_id":"cjf3dozlm00097omsj96fpo63","_id":"cjf3dozmd000q7omszvt76ej2"},{"post_id":"cjf3dozlc00067oms1bry9ocq","category_id":"cjf3dozlt000e7omsbl5b6xxl","_id":"cjf3dozmh000u7oms7wof76vw"},{"post_id":"cjf3dozlh00077oms7eecea99","category_id":"cjf3dozlm00097omsj96fpo63","_id":"cjf3dozmk000x7oms0qfrri7d"},{"post_id":"cjf3dozmf000t7omst8l48q83","category_id":"cjf3dozl800047oms8w3wss4i","_id":"cjf3dozmp00117omssxzld58d"},{"post_id":"cjf3dozlk00087omsdz93qx8p","category_id":"cjf3dozlm00097omsj96fpo63","_id":"cjf3dozmq00147omsubtdzj66"},{"post_id":"cjf3dozlz000i7omsyzts2yut","category_id":"cjf3dozmk000w7omsud60abu3","_id":"cjf3dozmr00177omswwohkr3w"},{"post_id":"cjf3dozm5000n7omsib21eajh","category_id":"cjf3dozmp00127omsxaon4syw","_id":"cjf3dozmu001d7omsetc2m41r"},{"post_id":"cjf3dozmb000p7oms0awezu08","category_id":"cjf3dozmp00127omsxaon4syw","_id":"cjf3dozmw001h7oms9agjmwwp"},{"post_id":"cjf3dozmi000v7omsjkodo28q","category_id":"cjf3dozmp00127omsxaon4syw","_id":"cjf3dozmx001k7omseafvb1qu"},{"post_id":"cjf3dozmk000y7omsqkomwxlo","category_id":"cjf3dozmv001g7omsn0nfvlzy","_id":"cjf3dozmx001n7oms8xa1rsy1"}],"PostTag":[{"post_id":"cjf3dozkm00007omsmwbbc7aq","tag_id":"cjf3dozlb00057omshiqn4pz3","_id":"cjf3dozly000h7omslz32nywd"},{"post_id":"cjf3dozkm00007omsmwbbc7aq","tag_id":"cjf3dozlm000a7omsbhmq7zk4","_id":"cjf3dozm1000j7omsvzpvqtwr"},{"post_id":"cjf3dozkx00027omsuvcrsrps","tag_id":"cjf3dozlu000f7omsbj0f12bn","_id":"cjf3dozmo00107omsme9m6q1h"},{"post_id":"cjf3dozkx00027omsuvcrsrps","tag_id":"cjf3dozm3000m7omsuv2xuaxd","_id":"cjf3dozmq00137omsgnogclk5"},{"post_id":"cjf3dozkx00027omsuvcrsrps","tag_id":"cjf3dozme000s7omsnylg4n4u","_id":"cjf3dozmr00167omsus7z3adp"},{"post_id":"cjf3dozlc00067oms1bry9ocq","tag_id":"cjf3dozmo000z7omsqgks9vyw","_id":"cjf3dozmr00187omsvrrn86vw"},{"post_id":"cjf3dozlh00077oms7eecea99","tag_id":"cjf3dozmq00157omsqxco9tjm","_id":"cjf3dozmt001b7omsipjywguz"},{"post_id":"cjf3dozlk00087omsdz93qx8p","tag_id":"cjf3dozms001a7omski32697i","_id":"cjf3dozmv001f7oms4wu3n2iq"},{"post_id":"cjf3dozlr000c7omsw4mq5n7t","tag_id":"cjf3dozmu001e7oms22zephd7","_id":"cjf3dozmx001j7oms76xghr3l"},{"post_id":"cjf3dozlv000g7oms6fjxm9vn","tag_id":"cjf3dozmx001i7omsyi8gy7ki","_id":"cjf3dozmx001m7omsth7o9k20"},{"post_id":"cjf3dozlz000i7omsyzts2yut","tag_id":"cjf3dozmx001l7omshx5bwhmi","_id":"cjf3dozn0001q7omsrmvehl7n"},{"post_id":"cjf3dozlz000i7omsyzts2yut","tag_id":"cjf3dozmz001o7oms8li8d46c","_id":"cjf3dozn0001r7omsg2zke9x2"},{"post_id":"cjf3dozm5000n7omsib21eajh","tag_id":"cjf3dozn0001p7oms8ycuigo4","_id":"cjf3dozn1001t7oms8mof7vqw"},{"post_id":"cjf3dozmb000p7oms0awezu08","tag_id":"cjf3dozn0001s7oms69cznjka","_id":"cjf3dozn3001v7omsn9qpzuml"},{"post_id":"cjf3dozmf000t7omst8l48q83","tag_id":"cjf3dozn1001u7omsfrx4ywii","_id":"cjf3dozn7001y7oms5rko9j62"},{"post_id":"cjf3dozmf000t7omst8l48q83","tag_id":"cjf3dozn4001w7omsk9k6lk81","_id":"cjf3dozn7001z7omsndnuejxs"},{"post_id":"cjf3dozmi000v7omsjkodo28q","tag_id":"cjf3dozn4001x7oms2nwvzf8s","_id":"cjf3dozn900217omsv8wob3jt"},{"post_id":"cjf3dozmk000y7omsqkomwxlo","tag_id":"cjf3dozn800207omsmp53i1k4","_id":"cjf3dozn900237omsbxun35yv"},{"post_id":"cjf3dozmk000y7omsqkomwxlo","tag_id":"cjf3dozn900227oms7dp6fey8","_id":"cjf3dozn900247omsqy1wm4qa"}],"Tag":[{"name":"node","_id":"cjf3dozlb00057omshiqn4pz3"},{"name":"setTimeout","_id":"cjf3dozlm000a7omsbhmq7zk4"},{"name":"call()","_id":"cjf3dozlu000f7omsbj0f12bn"},{"name":"apply()","_id":"cjf3dozm3000m7omsuv2xuaxd"},{"name":"bind()","_id":"cjf3dozme000s7omsnylg4n4u"},{"name":"docker","_id":"cjf3dozmo000z7omsqgks9vyw"},{"name":"es6","_id":"cjf3dozmq00157omsqxco9tjm"},{"name":"垃圾回收","_id":"cjf3dozms001a7omski32697i"},{"name":"变量函数提升","_id":"cjf3dozmu001e7oms22zephd7"},{"name":"引用赋值","_id":"cjf3dozmx001i7omsyi8gy7ki"},{"name":"linux","_id":"cjf3dozmx001l7omshx5bwhmi"},{"name":"操作系统","_id":"cjf3dozmz001o7oms8li8d46c"},{"name":"冒泡排序","_id":"cjf3dozn0001p7oms8ycuigo4"},{"name":"插入排序","_id":"cjf3dozn0001s7oms69cznjka"},{"name":"js","_id":"cjf3dozn1001u7omsfrx4ywii"},{"name":"promise","_id":"cjf3dozn4001w7omsk9k6lk81"},{"name":"素数","_id":"cjf3dozn4001x7oms2nwvzf8s"},{"name":"mac","_id":"cjf3dozn800207omsmp53i1k4"},{"name":"shell","_id":"cjf3dozn900227oms7dp6fey8"}]}}